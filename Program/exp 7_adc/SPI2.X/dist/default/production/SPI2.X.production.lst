

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Wed Jun 15 14:23:02 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	idataCOMRAM
    27  00782C                     __pidataCOMRAM:
    28                           	opt stack 0
    29                           
    30                           ;initializer for main@F5333
    31  00782C  03                 	db	3
    32  00782D  50                 	db	80
    33  00782E  49                 	db	73
    34  00782F  F6                 	db	246
    35  007830  AC                 	db	172
    36  007831  9B                 	db	155
    37  007832  DE                 	db	222
    38  007833  7A                 	db	122
    39  007834  6C                 	db	108
    40  007835  12                 	db	18
    41                           
    42                           	psect	smallconst
    43  000804                     __psmallconst:
    44                           	opt stack 0
    45  000804  00                 	db	0
    46  000805                     _dpowers:
    47                           	opt stack 0
    48  000805  0001               	dw	1
    49  000807  000A               	dw	10
    50  000809  0064               	dw	100
    51  00080B  03E8               	dw	1000
    52  00080D  2710               	dw	10000
    53  00080F                     __end_of_dpowers:
    54                           	opt stack 0
    55  00080F                     _hexpowers:
    56                           	opt stack 0
    57  00080F  0001               	dw	1
    58  000811  0010               	dw	16
    59  000813  0100               	dw	256
    60  000815  1000               	dw	4096
    61  000817                     __end_of_hexpowers:
    62                           	opt stack 0
    63  0000                     _ADCON1	set	4033
    64  0000                     _LATAbits	set	3977
    65  0000                     _LATB	set	3978
    66  0000                     _LATEbits	set	3981
    67  0000                     _PIR1bits	set	3998
    68  0000                     _SSPBUF	set	4041
    69  0000                     _SSPCON1bits	set	4038
    70  0000                     _SSPSTATbits	set	4039
    71  0000                     _TRISAbits	set	3986
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISBbits	set	3987
    74  0000                     _TRISCbits	set	3988
    75  0000                     _TRISEbits	set	3990
    76  0000                     _SSPEN	set	32309
    77  000817                     __stringdata:
    78                           	opt stack 0
    79  000817                     STR_3:
    80  000817  72                 	db	114	;'r'
    81  000818  65                 	db	101	;'e'
    82  000819  61                 	db	97	;'a'
    83  00081A  64                 	db	100	;'d'
    84  00081B  5F                 	db	95	;'_'
    85  00081C  64                 	db	100	;'d'
    86  00081D  61                 	db	97	;'a'
    87  00081E  74                 	db	116	;'t'
    88  00081F  61                 	db	97	;'a'
    89  000820  25                 	db	37
    90  000821  64                 	db	100	;'d'
    91  000822  20                 	db	32
    92  000823  3D                 	db	61	;'='
    93  000824  30                 	db	48	;'0'
    94  000825  78                 	db	120	;'x'
    95  000826  25                 	db	37
    96  000827  30                 	db	48	;'0'
    97  000828  32                 	db	50	;'2'
    98  000829  58                 	db	88	;'X'
    99  00082A  00                 	db	0
   100  00082B                     STR_2:
   101  00082B  77                 	db	119	;'w'
   102  00082C  72                 	db	114	;'r'
   103  00082D  69                 	db	105	;'i'
   104  00082E  74                 	db	116	;'t'
   105  00082F  65                 	db	101	;'e'
   106  000830  5F                 	db	95	;'_'
   107  000831  64                 	db	100	;'d'
   108  000832  61                 	db	97	;'a'
   109  000833  74                 	db	116	;'t'
   110  000834  61                 	db	97	;'a'
   111  000835  25                 	db	37
   112  000836  64                 	db	100	;'d'
   113  000837  3D                 	db	61	;'='
   114  000838  30                 	db	48	;'0'
   115  000839  78                 	db	120	;'x'
   116  00083A  25                 	db	37
   117  00083B  30                 	db	48	;'0'
   118  00083C  32                 	db	50	;'2'
   119  00083D  58                 	db	88	;'X'
   120  00083E  00                 	db	0
   121  00083F                     STR_4:
   122  00083F  30                 	db	48	;'0'
   123  000840  31                 	db	49	;'1'
   124  000841  32                 	db	50	;'2'
   125  000842  33                 	db	51	;'3'
   126  000843  34                 	db	52	;'4'
   127  000844  35                 	db	53	;'5'
   128  000845  36                 	db	54	;'6'
   129  000846  37                 	db	55	;'7'
   130  000847  38                 	db	56	;'8'
   131  000848  39                 	db	57	;'9'
   132  000849  41                 	db	65	;'A'
   133  00084A  42                 	db	66	;'B'
   134  00084B  43                 	db	67	;'C'
   135  00084C  44                 	db	68	;'D'
   136  00084D  45                 	db	69	;'E'
   137  00084E  46                 	db	70	;'F'
   138  00084F  00                 	db	0
   139  000850                     STR_1:
   140  000850  20                 	db	32
   141  000851  20                 	db	32
   142  000852  20                 	db	32
   143  000853  53                 	db	83	;'S'
   144  000854  50                 	db	80	;'P'
   145  000855  49                 	db	73	;'I'
   146  000856  20                 	db	32
   147  000857  45                 	db	69	;'E'
   148  000858  45                 	db	69	;'E'
   149  000859  50                 	db	80	;'P'
   150  00085A  52                 	db	82	;'R'
   151  00085B  4F                 	db	79	;'O'
   152  00085C  4D                 	db	77	;'M'
   153  00085D  00                 	db	0
   154  00085E                     __end_of__stringdata:
   155                           	opt stack 0
   156  00085E  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           ; #config settings
   159                           
   160                           	psect	cinit
   161  0078FE                     __pcinit:
   162                           	opt stack 0
   163  0078FE                     start_initialization:
   164                           	opt stack 0
   165  0078FE                     __initialization:
   166                           	opt stack 0
   167                           
   168                           ; Initialize objects allocated to COMRAM (10 bytes)
   169                           ; load TBLPTR registers with __pidataCOMRAM
   170  0078FE  0E2C               	movlw	low __pidataCOMRAM
   171  007900  6EF6               	movwf	tblptrl,c
   172  007902  0E78               	movlw	high __pidataCOMRAM
   173  007904  6EF7               	movwf	tblptrh,c
   174  007906  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   175  007908  6EF8               	movwf	tblptru,c
   176  00790A  EE00  F054         	lfsr	0,__pdataCOMRAM
   177  00790E  EE10 F00A          	lfsr	1,10
   178  007912                     copy_data0:
   179  007912  0009               	tblrd		*+
   180  007914  CFF5 FFEE          	movff	tablat,postinc0
   181  007918  50E5               	movf	postdec1,w,c
   182  00791A  50E1               	movf	fsr1l,w,c
   183  00791C  E1FA               	bnz	copy_data0
   184  00791E                     end_of_initialization:
   185                           	opt stack 0
   186  00791E                     __end_of__initialization:
   187                           	opt stack 0
   188  00791E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   189  007920  6EF8               	movwf	tblptru,c
   190  007922  0100               	movlb	0
   191  007924  EF30  F03D         	goto	_main	;jump to C main() function
   192                           tblptru	equ	0xFF8
   193                           tblptrh	equ	0xFF7
   194                           tblptrl	equ	0xFF6
   195                           tablat	equ	0xFF5
   196                           postinc0	equ	0xFEE
   197                           postdec1	equ	0xFE5
   198                           fsr1l	equ	0xFE1
   199                           
   200                           	psect	dataCOMRAM
   201  000054                     __pdataCOMRAM:
   202                           	opt stack 0
   203  000054                     main@F5333:
   204                           	opt stack 0
   205  000054                     	ds	10
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           postdec1	equ	0xFE5
   212                           fsr1l	equ	0xFE1
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	opt stack 0
   217  000001                     ??_isdigit:
   218  000001                     ?___lwdiv:
   219                           	opt stack 0
   220  000001                     ?___wmul:
   221                           	opt stack 0
   222  000001                     SPI_Transmit@Data:
   223                           	opt stack 0
   224  000001                     SPI_Receive@RecData:
   225                           	opt stack 0
   226  000001                     delay@time:
   227                           	opt stack 0
   228  000001                     ___lwdiv@dividend:
   229                           	opt stack 0
   230  000001                     ___wmul@multiplier:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x0
   234  000001                     	ds	1
   235  000002                     _isdigit$1028:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x1
   239  000002                     	ds	1
   240  000003                     isdigit@c:
   241                           	opt stack 0
   242  000003                     delay@i:
   243                           	opt stack 0
   244  000003                     ___lwdiv@divisor:
   245                           	opt stack 0
   246  000003                     ___wmul@multiplicand:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x2
   250  000003                     	ds	2
   251  000005                     ??___lwdiv:
   252  000005                     delay@j:
   253                           	opt stack 0
   254  000005                     ___wmul@product:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x4
   258  000005                     	ds	1
   259  000006                     ___lwdiv@quotient:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x5
   263  000006                     	ds	1
   264  000007                     SendInstruction@command:
   265                           	opt stack 0
   266  000007                     SendData@lcddata:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x6
   270  000007                     	ds	1
   271  000008                     ___lwdiv@counter:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x7
   275  000008                     	ds	1
   276  000009                     ?___lwmod:
   277                           	opt stack 0
   278  000009                     ___lwmod@dividend:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x8
   282  000009                     	ds	2
   283  00000B                     ___lwmod@divisor:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xA
   287  00000B                     	ds	2
   288  00000D                     ??___lwmod:
   289                           
   290                           ; 0 bytes @ 0xC
   291  00000D                     	ds	1
   292  00000E                     ___lwmod@counter:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0xD
   296  00000E                     	ds	1
   297  00000F                     ?_sprintf:
   298                           	opt stack 0
   299  00000F                     sprintf@sp:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0xE
   303  00000F                     	ds	2
   304  000011                     sprintf@f:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x10
   308  000011                     	ds	6
   309  000017                     ??_sprintf:
   310                           
   311                           ; 0 bytes @ 0x16
   312  000017                     	ds	4
   313  00001B                     sprintf@idx:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x1A
   317  00001B                     	ds	1
   318  00001C                     sprintf@ap:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x1B
   322  00001C                     	ds	2
   323  00001E                     sprintf@prec:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x1D
   327  00001E                     	ds	1
   328  00001F                     sprintf@_val:
   329                           	opt stack 0
   330                           
   331                           ; 5 bytes @ 0x1E
   332  00001F                     	ds	5
   333  000024                     sprintf@flag:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x23
   337  000024                     	ds	1
   338  000025                     sprintf@width:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x24
   342  000025                     	ds	2
   343  000027                     sprintf@c:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x26
   347  000027                     	ds	1
   348  000028                     ??_main:
   349                           
   350                           ; 0 bytes @ 0x27
   351  000028                     	ds	1
   352  000029                     main@write_data:
   353                           	opt stack 0
   354                           
   355                           ; 10 bytes @ 0x28
   356  000029                     	ds	10
   357  000033                     main@read_data:
   358                           	opt stack 0
   359                           
   360                           ; 10 bytes @ 0x32
   361  000033                     	ds	10
   362  00003D                     main@text:
   363                           	opt stack 0
   364                           
   365                           ; 16 bytes @ 0x3C
   366  00003D                     	ds	16
   367  00004D                     main@string1:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x4C
   371  00004D                     	ds	2
   372  00004F                     main@ADDRESS:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x4E
   376  00004F                     	ds	1
   377  000050                     main@j:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x4F
   381  000050                     	ds	2
   382  000052                     main@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x51
   386  000052                     	ds	2
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 54 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  text           16   60[COMRAM] unsigned char [16]
   405 ;;  read_data      10   50[COMRAM] unsigned char [10]
   406 ;;  write_data     10   40[COMRAM] unsigned char [10]
   407 ;;  i               2   81[COMRAM] int 
   408 ;;  j               2   79[COMRAM] int 
   409 ;;  string1         2   76[COMRAM] PTR unsigned char 
   410 ;;		 -> STR_1(14), 
   411 ;;  ADDRESS         1   78[COMRAM] unsigned char 
   412 ;; Return value:  Size  Location     Type
   413 ;;		None               void
   414 ;; Registers used:
   415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   416 ;; Tracked objects:
   417 ;;		On entry : 0/0
   418 ;;		On exit  : 0/0
   419 ;;		Unchanged: 0/0
   420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   421 ;;      Params:         0       0       0       0       0       0       0       0       0
   422 ;;      Locals:        43       0       0       0       0       0       0       0       0
   423 ;;      Temps:          1       0       0       0       0       0       0       0       0
   424 ;;      Totals:        44       0       0       0       0       0       0       0       0
   425 ;;Total ram usage:       44 bytes
   426 ;; Hardware stack levels required when called:    3
   427 ;; This function calls:
   428 ;;		_InitLCD
   429 ;;		_InitSPI
   430 ;;		_SPI_Receive
   431 ;;		_SPI_Transmit
   432 ;;		_SendData
   433 ;;		_SendInstruction
   434 ;;		_delay
   435 ;;		_sprintf
   436 ;; This function is called by:
   437 ;;		Startup code after reset
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           	psect	text0
   442  007A60                     __ptext0:
   443                           	opt stack 0
   444  007A60                     _main:
   445                           	opt stack 28
   446                           
   447                           ;main.c: 56: unsigned char text[16];
   448                           ;main.c: 57: unsigned char *string1 = "   SPI EEPROM";
   449                           
   450                           ;incstack = 0
   451  007A60  0E08               	movlw	high STR_1
   452  007A62  6E4E               	movwf	main@string1+1,c
   453  007A64  0E50               	movlw	low STR_1
   454  007A66  6E4D               	movwf	main@string1,c
   455                           
   456                           ;main.c: 58: unsigned char write_data[10]={0x03,0x50,0x49,0xF6,0xAC,0x9B,0xDE,0x7A,0x6C,
      +                          0x12};
   457  007A68  EE20  F054         	lfsr	2,main@F5333
   458  007A6C  EE10  F029         	lfsr	1,main@write_data
   459  007A70  0E0A               	movlw	10
   460  007A72                     u771:
   461  007A72  CFDE FFE6          	movff	postinc2,postinc1
   462  007A76  2EE8               	decfsz	wreg,f,c
   463  007A78  D7FC               	goto	u771
   464                           
   465                           ;main.c: 59: unsigned char read_data[10];
   466                           ;main.c: 60: unsigned char ADDRESS = 0x0130;
   467  007A7A  6E28               	movwf	??_main& (0+255),c
   468  007A7C  0E30               	movlw	48
   469  007A7E  6E4F               	movwf	main@ADDRESS,c
   470  007A80  5028               	movf	??_main& (0+255),w,c
   471                           
   472                           ;main.c: 61: int i,j;
   473                           ;main.c: 63: InitLCD();
   474  007A82  EC94  F03C         	call	_InitLCD	;wreg free
   475                           
   476                           ;main.c: 64: while(*string1)
   477  007A86  D00A               	goto	l1442
   478  007A88                     l1438:
   479                           
   480                           ;main.c: 65: SendData(*string1++);
   481  007A88  C04D  FFF6         	movff	main@string1,tblptrl
   482  007A8C  C04E  FFF7         	movff	main@string1+1,tblptrh
   483  007A90  0008               	tblrd		*
   484  007A92  50F5               	movf	tablat,w,c
   485  007A94  EC56  F03C         	call	_SendData
   486  007A98  4A4D               	infsnz	main@string1,f,c
   487  007A9A  2A4E               	incf	main@string1+1,f,c
   488  007A9C                     l1442:
   489  007A9C  C04D  FFF6         	movff	main@string1,tblptrl
   490  007AA0  C04E  FFF7         	movff	main@string1+1,tblptrh
   491  007AA4  0008               	tblrd		*
   492  007AA6  50F5               	movf	tablat,w,c
   493  007AA8  0900               	iorlw	0
   494  007AAA  A4D8               	btfss	status,2,c
   495  007AAC  D7ED               	goto	l1438
   496                           
   497                           ;main.c: 66: delay(20000);
   498  007AAE  0E4E               	movlw	78
   499  007AB0  6E02               	movwf	delay@time+1,c
   500  007AB2  0E20               	movlw	32
   501  007AB4  6E01               	movwf	delay@time,c
   502  007AB6  ECAA  F03C         	call	_delay	;wreg free
   503                           
   504                           ;main.c: 69: InitSPI();
   505  007ABA  EC2F  F03C         	call	_InitSPI	;wreg free
   506                           
   507                           ;main.c: 70: LATAbits.LATA5 = 0;
   508  007ABE  9A89               	bcf	3977,5,c	;volatile
   509                           
   510                           ;main.c: 71: SPI_Transmit(0x06);
   511  007AC0  0E06               	movlw	6
   512  007AC2  EC24  F03C         	call	_SPI_Transmit
   513                           
   514                           ;main.c: 72: LATAbits.LATA5 = 1;
   515  007AC6  8A89               	bsf	3977,5,c	;volatile
   516                           
   517                           ;main.c: 74: delay(100);
   518  007AC8  0E00               	movlw	0
   519  007ACA  6E02               	movwf	delay@time+1,c
   520  007ACC  0E64               	movlw	100
   521  007ACE  6E01               	movwf	delay@time,c
   522  007AD0  ECAA  F03C         	call	_delay	;wreg free
   523                           
   524                           ;main.c: 76: LATAbits.LATA5 = 0;
   525  007AD4  9A89               	bcf	3977,5,c	;volatile
   526                           
   527                           ;main.c: 77: SPI_Transmit(0x02);
   528  007AD6  0E02               	movlw	2
   529  007AD8  EC24  F03C         	call	_SPI_Transmit
   530                           
   531                           ;main.c: 78: SPI_Transmit(ADDRESS >> 8);
   532  007ADC  0E00               	movlw	0
   533  007ADE  EC24  F03C         	call	_SPI_Transmit
   534                           
   535                           ;main.c: 79: SPI_Transmit(ADDRESS & 0xFF);
   536  007AE2  504F               	movf	main@ADDRESS,w,c
   537  007AE4  EC24  F03C         	call	_SPI_Transmit
   538                           
   539                           ;main.c: 80: for(i=0;i<10;i++)
   540  007AE8  0E00               	movlw	0
   541  007AEA  6E53               	movwf	main@i+1,c
   542  007AEC  0E00               	movlw	0
   543  007AEE  6E52               	movwf	main@i,c
   544  007AF0  5053               	movf	main@i+1,w,c
   545  007AF2  0A80               	xorlw	128
   546  007AF4  0F80               	addlw	-128
   547  007AF6  0E0A               	movlw	10
   548  007AF8  B4D8               	btfsc	status,2,c
   549  007AFA  5C52               	subwf	main@i,w,c
   550  007AFC  B0D8               	btfsc	status,0,c
   551  007AFE  D00C               	goto	l46
   552                           
   553                           ;main.c: 81: SPI_Transmit(write_data[i]);
   554  007B00  0E29               	movlw	low main@write_data
   555  007B02  2452               	addwf	main@i,w,c
   556  007B04  6ED9               	movwf	fsr2l,c
   557  007B06  0E00               	movlw	high main@write_data
   558  007B08  2053               	addwfc	main@i+1,w,c
   559  007B0A  6EDA               	movwf	fsr2h,c
   560  007B0C  50DF               	movf	indf2,w,c
   561  007B0E  EC24  F03C         	call	_SPI_Transmit
   562  007B12  4A52               	infsnz	main@i,f,c
   563  007B14  2A53               	incf	main@i+1,f,c
   564  007B16  D7EC               	goto	L1
   565  007B18                     l46:
   566                           
   567                           ;main.c: 82: LATAbits.LATA5 = 1;
   568  007B18  8A89               	bsf	3977,5,c	;volatile
   569                           
   570                           ;main.c: 83: delay(100);
   571  007B1A  0E00               	movlw	0
   572  007B1C  6E02               	movwf	delay@time+1,c
   573  007B1E  0E64               	movlw	100
   574  007B20  6E01               	movwf	delay@time,c
   575  007B22  ECAA  F03C         	call	_delay	;wreg free
   576                           
   577                           ;main.c: 86: LATAbits.LATA5 = 0;
   578  007B26  9A89               	bcf	3977,5,c	;volatile
   579                           
   580                           ;main.c: 87: SPI_Transmit(0x03);
   581  007B28  0E03               	movlw	3
   582  007B2A  EC24  F03C         	call	_SPI_Transmit
   583                           
   584                           ;main.c: 88: SPI_Transmit(ADDRESS >> 8);
   585  007B2E  0E00               	movlw	0
   586  007B30  EC24  F03C         	call	_SPI_Transmit
   587                           
   588                           ;main.c: 89: SPI_Transmit(ADDRESS & 0xFF);
   589  007B34  504F               	movf	main@ADDRESS,w,c
   590  007B36  EC24  F03C         	call	_SPI_Transmit
   591                           
   592                           ;main.c: 90: for(i=0;i<10;i++)
   593  007B3A  0E00               	movlw	0
   594  007B3C  6E53               	movwf	main@i+1,c
   595  007B3E  0E00               	movlw	0
   596  007B40  6E52               	movwf	main@i,c
   597  007B42  5053               	movf	main@i+1,w,c
   598  007B44  0A80               	xorlw	128
   599  007B46  0F80               	addlw	-128
   600  007B48  0E0A               	movlw	10
   601  007B4A  B4D8               	btfsc	status,2,c
   602  007B4C  5C52               	subwf	main@i,w,c
   603  007B4E  B0D8               	btfsc	status,0,c
   604  007B50  D00C               	goto	l48
   605                           
   606                           ;main.c: 91: read_data[i] = SPI_Receive();
   607  007B52  0E33               	movlw	low main@read_data
   608  007B54  2452               	addwf	main@i,w,c
   609  007B56  6ED9               	movwf	fsr2l,c
   610  007B58  0E00               	movlw	high main@read_data
   611  007B5A  2053               	addwfc	main@i+1,w,c
   612  007B5C  6EDA               	movwf	fsr2h,c
   613  007B5E  EC1B  F03C         	call	_SPI_Receive	;wreg free
   614  007B62  6EDF               	movwf	indf2,c
   615  007B64  4A52               	infsnz	main@i,f,c
   616  007B66  2A53               	incf	main@i+1,f,c
   617  007B68  D7EC               	goto	L2
   618  007B6A                     l48:
   619                           
   620                           ;main.c: 92: LATAbits.LATA5 = 1;
   621  007B6A  8A89               	bsf	3977,5,c	;volatile
   622                           
   623                           ;main.c: 93: delay(100);
   624  007B6C  0E00               	movlw	0
   625  007B6E  6E02               	movwf	delay@time+1,c
   626  007B70  0E64               	movlw	100
   627  007B72  6E01               	movwf	delay@time,c
   628  007B74  ECAA  F03C         	call	_delay	;wreg free
   629                           
   630                           ;main.c: 95: LATAbits.LATA5 = 0;
   631  007B78  9A89               	bcf	3977,5,c	;volatile
   632                           
   633                           ;main.c: 97: SSPEN = 0;
   634  007B7A  9AC6               	bcf	4038,5,c	;volatile
   635                           
   636                           ;main.c: 98: InitLCD();
   637  007B7C  EC94  F03C         	call	_InitLCD	;wreg free
   638                           
   639                           ;main.c: 100: for(i=0;i<10;i++)
   640  007B80  0E00               	movlw	0
   641  007B82  6E53               	movwf	main@i+1,c
   642  007B84  0E00               	movlw	0
   643  007B86  6E52               	movwf	main@i,c
   644  007B88  5053               	movf	main@i+1,w,c
   645  007B8A  0A80               	xorlw	128
   646  007B8C  0F80               	addlw	-128
   647  007B8E  0E0A               	movlw	10
   648  007B90  B4D8               	btfsc	status,2,c
   649  007B92  5C52               	subwf	main@i,w,c
   650  007B94  B0D8               	btfsc	status,0,c
   651  007B96  D071               	goto	l55
   652                           
   653                           ;main.c: 101: {
   654                           ;main.c: 102: SendInstruction(0x80);
   655  007B98  0E80               	movlw	128
   656  007B9A  EC42  F03C         	call	_SendInstruction
   657                           
   658                           ;main.c: 103: sprintf(text,"write_data%d=0x%02X",i,write_data[i]);
   659  007B9E  0E00               	movlw	high main@text
   660  007BA0  6E10               	movwf	sprintf@sp+1,c
   661  007BA2  0E3D               	movlw	low main@text
   662  007BA4  6E0F               	movwf	sprintf@sp,c
   663  007BA6  0E08               	movlw	high STR_2
   664  007BA8  6E12               	movwf	sprintf@f+1,c
   665  007BAA  0E2B               	movlw	low STR_2
   666  007BAC  6E11               	movwf	sprintf@f,c
   667  007BAE  C052  F013         	movff	main@i,?_sprintf+4
   668  007BB2  C053  F014         	movff	main@i+1,?_sprintf+5
   669  007BB6  0E29               	movlw	low main@write_data
   670  007BB8  2452               	addwf	main@i,w,c
   671  007BBA  6ED9               	movwf	fsr2l,c
   672  007BBC  0E00               	movlw	high main@write_data
   673  007BBE  2053               	addwfc	main@i+1,w,c
   674  007BC0  6EDA               	movwf	fsr2h,c
   675  007BC2  50DF               	movf	indf2,w,c
   676  007BC4  6E28               	movwf	??_main& (0+255),c
   677  007BC6  5028               	movf	??_main,w,c
   678  007BC8  6E15               	movwf	?_sprintf+6,c
   679  007BCA  6A16               	clrf	?_sprintf+7,c
   680  007BCC  EC3E  F03E         	call	_sprintf	;wreg free
   681                           
   682                           ;main.c: 104: for(j=0;j<16;j++)
   683  007BD0  0E00               	movlw	0
   684  007BD2  6E51               	movwf	main@j+1,c
   685  007BD4  0E00               	movlw	0
   686  007BD6  6E50               	movwf	main@j,c
   687  007BD8  5051               	movf	main@j+1,w,c
   688  007BDA  0A80               	xorlw	128
   689  007BDC  0F80               	addlw	-128
   690  007BDE  0E10               	movlw	16
   691  007BE0  B4D8               	btfsc	status,2,c
   692  007BE2  5C50               	subwf	main@j,w,c
   693  007BE4  B0D8               	btfsc	status,0,c
   694  007BE6  D00C               	goto	l1524
   695                           
   696                           ;main.c: 105: SendData(text[j]);
   697  007BE8  0E3D               	movlw	low main@text
   698  007BEA  2450               	addwf	main@j,w,c
   699  007BEC  6ED9               	movwf	fsr2l,c
   700  007BEE  0E00               	movlw	high main@text
   701  007BF0  2051               	addwfc	main@j+1,w,c
   702  007BF2  6EDA               	movwf	fsr2h,c
   703  007BF4  50DF               	movf	indf2,w,c
   704  007BF6  EC56  F03C         	call	_SendData
   705  007BFA  4A50               	infsnz	main@j,f,c
   706  007BFC  2A51               	incf	main@j+1,f,c
   707  007BFE  D7EC               	goto	L3
   708  007C00                     l1524:
   709                           
   710                           ;main.c: 107: SendInstruction(0xC0);
   711  007C00  0EC0               	movlw	192
   712  007C02  EC42  F03C         	call	_SendInstruction
   713                           
   714                           ;main.c: 108: sprintf(text,"read_data%d =0x%02X",i,read_data[i]);
   715  007C06  0E00               	movlw	high main@text
   716  007C08  6E10               	movwf	sprintf@sp+1,c
   717  007C0A  0E3D               	movlw	low main@text
   718  007C0C  6E0F               	movwf	sprintf@sp,c
   719  007C0E  0E08               	movlw	high STR_3
   720  007C10  6E12               	movwf	sprintf@f+1,c
   721  007C12  0E17               	movlw	low STR_3
   722  007C14  6E11               	movwf	sprintf@f,c
   723  007C16  C052  F013         	movff	main@i,?_sprintf+4
   724  007C1A  C053  F014         	movff	main@i+1,?_sprintf+5
   725  007C1E  0E33               	movlw	low main@read_data
   726  007C20  2452               	addwf	main@i,w,c
   727  007C22  6ED9               	movwf	fsr2l,c
   728  007C24  0E00               	movlw	high main@read_data
   729  007C26  2053               	addwfc	main@i+1,w,c
   730  007C28  6EDA               	movwf	fsr2h,c
   731  007C2A  50DF               	movf	indf2,w,c
   732  007C2C  6E28               	movwf	??_main& (0+255),c
   733  007C2E  5028               	movf	??_main,w,c
   734  007C30  6E15               	movwf	?_sprintf+6,c
   735  007C32  6A16               	clrf	?_sprintf+7,c
   736  007C34  EC3E  F03E         	call	_sprintf	;wreg free
   737                           
   738                           ;main.c: 109: for(j=0;j<16;j++)
   739  007C38  0E00               	movlw	0
   740  007C3A  6E51               	movwf	main@j+1,c
   741  007C3C  0E00               	movlw	0
   742  007C3E  6E50               	movwf	main@j,c
   743  007C40  5051               	movf	main@j+1,w,c
   744  007C42  0A80               	xorlw	128
   745  007C44  0F80               	addlw	-128
   746  007C46  0E10               	movlw	16
   747  007C48  B4D8               	btfsc	status,2,c
   748  007C4A  5C50               	subwf	main@j,w,c
   749  007C4C  B0D8               	btfsc	status,0,c
   750  007C4E  D00C               	goto	l1540
   751                           
   752                           ;main.c: 110: SendData(text[j]);
   753  007C50  0E3D               	movlw	low main@text
   754  007C52  2450               	addwf	main@j,w,c
   755  007C54  6ED9               	movwf	fsr2l,c
   756  007C56  0E00               	movlw	high main@text
   757  007C58  2051               	addwfc	main@j+1,w,c
   758  007C5A  6EDA               	movwf	fsr2h,c
   759  007C5C  50DF               	movf	indf2,w,c
   760  007C5E  EC56  F03C         	call	_SendData
   761  007C62  4A50               	infsnz	main@j,f,c
   762  007C64  2A51               	incf	main@j+1,f,c
   763  007C66  D7EC               	goto	L4
   764  007C68                     l1540:
   765                           
   766                           ;main.c: 111: delay(20000);
   767  007C68  0E4E               	movlw	78
   768  007C6A  6E02               	movwf	delay@time+1,c
   769  007C6C  0E20               	movlw	32
   770  007C6E  6E01               	movwf	delay@time,c
   771  007C70  ECAA  F03C         	call	_delay	;wreg free
   772  007C74  4A52               	infsnz	main@i,f,c
   773  007C76  2A53               	incf	main@i+1,f,c
   774  007C78  D787               	goto	L5
   775  007C7A                     l55:
   776  007C7A  D7FF               	goto	l55
   777  007C7C                     __end_of_main:
   778                           	opt stack 0
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postinc1	equ	0xFE6
   786                           postdec1	equ	0xFE5
   787                           fsr1l	equ	0xFE1
   788                           indf2	equ	0xFDF
   789                           postinc2	equ	0xFDE
   790                           fsr2h	equ	0xFDA
   791                           fsr2l	equ	0xFD9
   792                           status	equ	0xFD8
   793                           
   794 ;; *************** function _sprintf *****************
   795 ;; Defined at:
   796 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\doprnt.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  sp              2   14[COMRAM] PTR unsigned char 
   799 ;;		 -> main@text(16), 
   800 ;;  f               2   16[COMRAM] PTR const unsigned char 
   801 ;;		 -> STR_3(20), STR_2(20), 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  idx             1   26[COMRAM] unsigned char 
   804 ;;  _val            5   30[COMRAM] struct .
   805 ;;  width           2   36[COMRAM] int 
   806 ;;  ap              2   27[COMRAM] PTR void [1]
   807 ;;		 -> ?_sprintf(2), 
   808 ;;  c               1   38[COMRAM] char 
   809 ;;  flag            1   35[COMRAM] unsigned char 
   810 ;;  prec            1   29[COMRAM] char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  2   14[COMRAM] int 
   813 ;; Registers used:
   814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   820 ;;      Params:         8       0       0       0       0       0       0       0       0
   821 ;;      Locals:        13       0       0       0       0       0       0       0       0
   822 ;;      Temps:          4       0       0       0       0       0       0       0       0
   823 ;;      Totals:        25       0       0       0       0       0       0       0       0
   824 ;;Total ram usage:       25 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    1
   827 ;; This function calls:
   828 ;;		___lwdiv
   829 ;;		___lwmod
   830 ;;		___wmul
   831 ;;		_isdigit
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text1
   838  007C7C                     __ptext1:
   839                           	opt stack 0
   840  007C7C                     _sprintf:
   841                           	opt stack 29
   842                           
   843                           ;doprnt.c: 494: va_list ap;
   844                           ;doprnt.c: 499: signed char c;
   845                           ;doprnt.c: 501: int width;
   846                           ;doprnt.c: 506: signed char prec;
   847                           ;doprnt.c: 508: unsigned char flag;
   848                           ;doprnt.c: 527: union {
   849                           ;doprnt.c: 528: unsigned int _val;
   850                           ;doprnt.c: 529: struct {
   851                           ;doprnt.c: 530: const char * _cp;
   852                           ;doprnt.c: 531: unsigned _len;
   853                           ;doprnt.c: 532: } _str;
   854                           ;doprnt.c: 533: } _val;
   855                           ;doprnt.c: 542: *ap = __va_start();
   856                           
   857                           ;incstack = 0
   858  007C7C  0E00               	movlw	high (?_sprintf+4)
   859  007C7E  6E1D               	movwf	sprintf@ap+1,c
   860  007C80  0E13               	movlw	low (?_sprintf+4)
   861  007C82  6E1C               	movwf	sprintf@ap,c
   862                           
   863                           ;doprnt.c: 545: while(c = *f++) {
   864  007C84  D1AB               	goto	l1424
   865  007C86                     l1284:
   866                           
   867                           ;doprnt.c: 547: if(c != '%')
   868  007C86  5027               	movf	sprintf@c,w,c
   869  007C88  0A25               	xorlw	37
   870  007C8A  B4D8               	btfsc	status,2,c
   871  007C8C  D009               	goto	l1290
   872                           
   873                           ;doprnt.c: 549: {
   874                           ;doprnt.c: 550: ((*sp++ = (c)));
   875  007C8E  C00F  FFD9         	movff	sprintf@sp,fsr2l
   876  007C92  C010  FFDA         	movff	sprintf@sp+1,fsr2h
   877  007C96  C027  FFDF         	movff	sprintf@c,indf2
   878  007C9A  4A0F               	infsnz	sprintf@sp,f,c
   879  007C9C  2A10               	incf	sprintf@sp+1,f,c
   880                           
   881                           ;doprnt.c: 551: continue;
   882  007C9E  D19E               	goto	l1424
   883  007CA0                     l1290:
   884                           
   885                           ;doprnt.c: 552: }
   886                           ;doprnt.c: 555: width = 0;
   887  007CA0  0E00               	movlw	0
   888  007CA2  6E26               	movwf	sprintf@width+1,c
   889  007CA4  0E00               	movlw	0
   890  007CA6  6E25               	movwf	sprintf@width,c
   891                           
   892                           ;doprnt.c: 557: flag = 0;
   893  007CA8  6E17               	movwf	??_sprintf& (0+255),c
   894  007CAA  0E00               	movlw	0
   895  007CAC  6E24               	movwf	sprintf@flag,c
   896  007CAE  5017               	movf	??_sprintf& (0+255),w,c
   897  007CB0  D003               	goto	l1298
   898  007CB2                     l1294:
   899                           
   900                           ;doprnt.c: 589: flag |= 0x04;
   901  007CB2  8424               	bsf	sprintf@flag,2,c
   902                           
   903                           ;doprnt.c: 590: f++;
   904  007CB4  4A11               	infsnz	sprintf@f,f,c
   905  007CB6  2A12               	incf	sprintf@f+1,f,c
   906  007CB8                     l1298:
   907  007CB8  C011  FFF6         	movff	sprintf@f,tblptrl
   908  007CBC  C012  FFF7         	movff	sprintf@f+1,tblptrh
   909  007CC0  0008               	tblrd		*
   910  007CC2  50F5               	movf	tablat,w,c
   911                           
   912                           ; Switch size 1, requested type "space"
   913                           ; Number of cases is 1, Range of values is 48 to 48
   914                           ; switch strategies available:
   915                           ; Name         Instructions Cycles
   916                           ; simple_byte            4     3 (average)
   917                           ;	Chosen strategy is simple_byte
   918  007CC4  0A30               	xorlw	48	; case 48
   919  007CC6  B4D8               	btfsc	status,2,c
   920  007CC8  D7F4               	goto	l1294
   921                           
   922                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
   923                           
   924                           ;doprnt.c: 595: }
   925                           
   926                           ;doprnt.c: 594: break;
   927  007CCA  C011  FFF6         	movff	sprintf@f,tblptrl
   928  007CCE  C012  FFF7         	movff	sprintf@f+1,tblptrh
   929  007CD2  0008               	tblrd		*
   930  007CD4  50F5               	movf	tablat,w,c
   931  007CD6  EC6A  F03C         	call	_isdigit
   932  007CDA  A0D8               	btfss	status,0,c
   933  007CDC  D035               	goto	l1316
   934                           
   935                           ;doprnt.c: 607: width = 0;
   936  007CDE  0E00               	movlw	0
   937  007CE0  6E26               	movwf	sprintf@width+1,c
   938  007CE2  0E00               	movlw	0
   939  007CE4  6E25               	movwf	sprintf@width,c
   940  007CE6                     l1304:
   941                           
   942                           ;doprnt.c: 609: width *= 10;
   943  007CE6  C025  F001         	movff	sprintf@width,___wmul@multiplier
   944  007CEA  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   945  007CEE  0E00               	movlw	0
   946  007CF0  6E04               	movwf	___wmul@multiplicand+1,c
   947  007CF2  0E0A               	movlw	10
   948  007CF4  6E03               	movwf	___wmul@multiplicand,c
   949  007CF6  ECC5  F03C         	call	___wmul	;wreg free
   950  007CFA  C001  F025         	movff	?___wmul,sprintf@width
   951  007CFE  C002  F026         	movff	?___wmul+1,sprintf@width+1
   952                           
   953                           ;doprnt.c: 610: width += *f++ - '0';
   954  007D02  0ED0               	movlw	208
   955  007D04  6E17               	movwf	??_sprintf& (0+255),c
   956  007D06  0EFF               	movlw	255
   957  007D08  6E18               	movwf	(??_sprintf+1)& (0+255),c
   958  007D0A  C011  FFF6         	movff	sprintf@f,tblptrl
   959  007D0E  C012  FFF7         	movff	sprintf@f+1,tblptrh
   960  007D12  0008               	tblrd		*
   961  007D14  50F5               	movf	tablat,w,c
   962  007D16  6E19               	movwf	(??_sprintf+2)& (0+255),c
   963  007D18  6A1A               	clrf	(??_sprintf+3)& (0+255),c
   964  007D1A  5017               	movf	??_sprintf,w,c
   965  007D1C  2619               	addwf	??_sprintf+2,f,c
   966  007D1E  5018               	movf	??_sprintf+1,w,c
   967  007D20  221A               	addwfc	??_sprintf+3,f,c
   968  007D22  5019               	movf	??_sprintf+2,w,c
   969  007D24  2625               	addwf	sprintf@width,f,c
   970  007D26  501A               	movf	??_sprintf+3,w,c
   971  007D28  2226               	addwfc	sprintf@width+1,f,c
   972  007D2A  4A11               	infsnz	sprintf@f,f,c
   973  007D2C  2A12               	incf	sprintf@f+1,f,c
   974                           
   975                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
   976  007D2E  C011  FFF6         	movff	sprintf@f,tblptrl
   977  007D32  C012  FFF7         	movff	sprintf@f+1,tblptrh
   978  007D36  0008               	tblrd		*
   979  007D38  50F5               	movf	tablat,w,c
   980  007D3A  EC6A  F03C         	call	_isdigit
   981  007D3E  A0D8               	btfss	status,0,c
   982  007D40  D003               	goto	l1316
   983  007D42  D7D1               	goto	l1304
   984  007D44                     l1312:
   985                           
   986                           ;doprnt.c: 727: case 'x':
   987                           ;doprnt.c: 730: flag |= 0x80;
   988  007D44  8E24               	bsf	sprintf@flag,7,c
   989                           
   990                           ;doprnt.c: 732: break;
   991  007D46  D01A               	goto	l133
   992  007D48                     l1316:
   993  007D48  C011  FFF6         	movff	sprintf@f,tblptrl
   994  007D4C  C012  FFF7         	movff	sprintf@f+1,tblptrh
   995  007D50  4A11               	infsnz	sprintf@f,f,c
   996  007D52  2A12               	incf	sprintf@f+1,f,c
   997  007D54  0008               	tblrd		*
   998  007D56  CFF5 F027          	movff	tablat,sprintf@c
   999  007D5A  5027               	movf	sprintf@c& (0+255),w,c
  1000                           
  1001                           ; Switch size 1, requested type "space"
  1002                           ; Number of cases is 5, Range of values is 0 to 120
  1003                           ; switch strategies available:
  1004                           ; Name         Instructions Cycles
  1005                           ; simple_byte           16     9 (average)
  1006                           ;	Chosen strategy is simple_byte
  1007  007D5C  0A00               	xorlw	0	; case 0
  1008  007D5E  B4D8               	btfsc	status,2,c
  1009  007D60  D148               	goto	l1426
  1010  007D62  0A58               	xorlw	88	; case 88
  1011  007D64  B4D8               	btfsc	status,2,c
  1012  007D66  D7EE               	goto	l1312
  1013  007D68  0A3C               	xorlw	60	; case 100
  1014  007D6A  B4D8               	btfsc	status,2,c
  1015  007D6C  D007               	goto	l133
  1016  007D6E  0A0D               	xorlw	13	; case 105
  1017  007D70  B4D8               	btfsc	status,2,c
  1018  007D72  D004               	goto	l133
  1019  007D74  0A11               	xorlw	17	; case 120
  1020  007D76  B4D8               	btfsc	status,2,c
  1021  007D78  D7E5               	goto	l1312
  1022  007D7A  D130               	goto	l1424
  1023  007D7C                     l133:
  1024                           
  1025                           ;doprnt.c: 1260: if((flag & 0x80) == 0x00)
  1026  007D7C  BE24               	btfsc	sprintf@flag,7,c
  1027  007D7E  D01D               	goto	l1328
  1028                           
  1029                           ;doprnt.c: 1262: {
  1030                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1031  007D80  C01C  FFD9         	movff	sprintf@ap,fsr2l
  1032  007D84  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  1033  007D88  CFDE F01F          	movff	postinc2,sprintf@_val
  1034  007D8C  CFDD F020          	movff	postdec2,sprintf@_val+1
  1035  007D90  0E02               	movlw	2
  1036  007D92  261C               	addwf	sprintf@ap,f,c
  1037  007D94  0E00               	movlw	0
  1038  007D96  221D               	addwfc	sprintf@ap+1,f,c
  1039                           
  1040                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  1041  007D98  5020               	movf	sprintf@_val+1,w,c
  1042  007D9A  0A80               	xorlw	128
  1043  007D9C  6EF3               	movwf	prodl,c
  1044  007D9E  0E80               	movlw	128
  1045  007DA0  5CF3               	subwf	prodl,w,c
  1046  007DA2  0E00               	movlw	0
  1047  007DA4  B4D8               	btfsc	status,2,c
  1048  007DA6  5C1F               	subwf	sprintf@_val,w,c
  1049  007DA8  B0D8               	btfsc	status,0,c
  1050  007DAA  D050               	goto	l1362
  1051                           
  1052                           ;doprnt.c: 1271: flag |= 0x03;
  1053  007DAC  0E03               	movlw	3
  1054  007DAE  1224               	iorwf	sprintf@flag,f,c
  1055                           
  1056                           ;doprnt.c: 1272: _val._val = -_val._val;
  1057  007DB0  6C1F               	negf	sprintf@_val,c
  1058  007DB2  1E20               	comf	sprintf@_val+1,f,c
  1059  007DB4  B0D8               	btfsc	status,0,c
  1060  007DB6  2A20               	incf	sprintf@_val+1,f,c
  1061  007DB8  D049               	goto	l1362
  1062  007DBA                     l1328:
  1063                           
  1064                           ;doprnt.c: 1277: else
  1065                           ;doprnt.c: 1282: {
  1066                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1067  007DBA  C01C  FFD9         	movff	sprintf@ap,fsr2l
  1068  007DBE  C01D  FFDA         	movff	sprintf@ap+1,fsr2h
  1069  007DC2  CFDE F01F          	movff	postinc2,sprintf@_val
  1070  007DC6  CFDD F020          	movff	postdec2,sprintf@_val+1
  1071  007DCA  0E02               	movlw	2
  1072  007DCC  261C               	addwf	sprintf@ap,f,c
  1073  007DCE  0E00               	movlw	0
  1074  007DD0  221D               	addwfc	sprintf@ap+1,f,c
  1075  007DD2  D03C               	goto	l1362
  1076  007DD4                     l1332:
  1077                           
  1078                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1079  007DD4  6E17               	movwf	??_sprintf& (0+255),c
  1080  007DD6  0E01               	movlw	1
  1081  007DD8  6E27               	movwf	sprintf@c,c
  1082  007DDA  5017               	movf	??_sprintf& (0+255),w,c
  1083  007DDC  5027               	movf	sprintf@c,w,c
  1084  007DDE  0A05               	xorlw	5
  1085  007DE0  B4D8               	btfsc	status,2,c
  1086  007DE2  D03C               	goto	l1364
  1087                           
  1088                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  1089  007DE4  5027               	movf	sprintf@c,w,c
  1090  007DE6  0D02               	mullw	2
  1091  007DE8  0E05               	movlw	low _dpowers
  1092  007DEA  24F3               	addwf	prodl,w,c
  1093  007DEC  6EF6               	movwf	tblptrl,c
  1094  007DEE  0E08               	movlw	high _dpowers
  1095  007DF0  20F4               	addwfc	prodh,w,c
  1096  007DF2  6EF7               	movwf	tblptrh,c
  1097  007DF4  0009               	tblrd		*+
  1098  007DF6  CFF5 F017          	movff	tablat,??_sprintf
  1099  007DFA  0009               	tblrd		*+
  1100  007DFC  CFF5 F018          	movff	tablat,??_sprintf+1
  1101  007E00  5017               	movf	??_sprintf,w,c
  1102  007E02  5C1F               	subwf	sprintf@_val,w,c
  1103  007E04  5018               	movf	??_sprintf+1,w,c
  1104  007E06  5820               	subwfb	sprintf@_val+1,w,c
  1105  007E08  A0D8               	btfss	status,0,c
  1106  007E0A  D028               	goto	l1364
  1107                           
  1108                           ;doprnt.c: 1316: break;
  1109  007E0C  2A27               	incf	sprintf@c,f,c
  1110  007E0E  D7E6               	goto	L6
  1111  007E10                     l1346:
  1112                           
  1113                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1114  007E10  6E17               	movwf	??_sprintf& (0+255),c
  1115  007E12  0E01               	movlw	1
  1116  007E14  6E27               	movwf	sprintf@c,c
  1117  007E16  5017               	movf	??_sprintf& (0+255),w,c
  1118  007E18  5027               	movf	sprintf@c,w,c
  1119  007E1A  0A04               	xorlw	4
  1120  007E1C  B4D8               	btfsc	status,2,c
  1121  007E1E  D01E               	goto	l1364
  1122                           
  1123                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  1124  007E20  5027               	movf	sprintf@c,w,c
  1125  007E22  0D02               	mullw	2
  1126  007E24  0E0F               	movlw	low _hexpowers
  1127  007E26  24F3               	addwf	prodl,w,c
  1128  007E28  6EF6               	movwf	tblptrl,c
  1129  007E2A  0E08               	movlw	high _hexpowers
  1130  007E2C  20F4               	addwfc	prodh,w,c
  1131  007E2E  6EF7               	movwf	tblptrh,c
  1132  007E30  0009               	tblrd		*+
  1133  007E32  CFF5 F017          	movff	tablat,??_sprintf
  1134  007E36  0009               	tblrd		*+
  1135  007E38  CFF5 F018          	movff	tablat,??_sprintf+1
  1136  007E3C  5017               	movf	??_sprintf,w,c
  1137  007E3E  5C1F               	subwf	sprintf@_val,w,c
  1138  007E40  5018               	movf	??_sprintf+1,w,c
  1139  007E42  5820               	subwfb	sprintf@_val+1,w,c
  1140  007E44  A0D8               	btfss	status,0,c
  1141  007E46  D00A               	goto	l1364
  1142                           
  1143                           ;doprnt.c: 1327: break;
  1144  007E48  2A27               	incf	sprintf@c,f,c
  1145  007E4A  D7E6               	goto	L7
  1146  007E4C                     l1362:
  1147  007E4C  5024               	movf	sprintf@flag,w,c
  1148  007E4E  0B80               	andlw	128
  1149                           
  1150                           ; Switch size 1, requested type "space"
  1151                           ; Number of cases is 2, Range of values is 0 to 128
  1152                           ; switch strategies available:
  1153                           ; Name         Instructions Cycles
  1154                           ; simple_byte            7     4 (average)
  1155                           ;	Chosen strategy is simple_byte
  1156  007E50  0A00               	xorlw	0	; case 0
  1157  007E52  B4D8               	btfsc	status,2,c
  1158  007E54  D7BF               	goto	l1332
  1159  007E56  0A80               	xorlw	128	; case 128
  1160  007E58  B4D8               	btfsc	status,2,c
  1161  007E5A  D7DA               	goto	l1346
  1162  007E5C                     l1364:
  1163                           
  1164                           ;doprnt.c: 1354: if(width && flag & 0x03)
  1165  007E5C  5026               	movf	sprintf@width+1,w,c
  1166  007E5E  1025               	iorwf	sprintf@width,w,c
  1167  007E60  B4D8               	btfsc	status,2,c
  1168  007E62  D009               	goto	l1370
  1169  007E64  C024  F017         	movff	sprintf@flag,??_sprintf
  1170  007E68  0E03               	movlw	3
  1171  007E6A  1617               	andwf	??_sprintf,f,c
  1172  007E6C  B4D8               	btfsc	status,2,c
  1173  007E6E  D003               	goto	l1370
  1174                           
  1175                           ;doprnt.c: 1355: width--;
  1176  007E70  0625               	decf	sprintf@width,f,c
  1177  007E72  A0D8               	btfss	status,0,c
  1178  007E74  0626               	decf	sprintf@width+1,f,c
  1179  007E76                     l1370:
  1180                           
  1181                           ;doprnt.c: 1390: if(width > c)
  1182  007E76  0E80               	movlw	128
  1183  007E78  BE27               	btfsc	sprintf@c,7,c
  1184  007E7A  0E7F               	movlw	127
  1185  007E7C  6E17               	movwf	??_sprintf& (0+255),c
  1186  007E7E  5025               	movf	sprintf@width,w,c
  1187  007E80  5C27               	subwf	sprintf@c,w,c
  1188  007E82  5026               	movf	sprintf@width+1,w,c
  1189  007E84  0A80               	xorlw	128
  1190  007E86  5817               	subwfb	??_sprintf& (0+255),w,c
  1191  007E88  B0D8               	btfsc	status,0,c
  1192  007E8A  D007               	goto	l1374
  1193                           
  1194                           ;doprnt.c: 1391: width -= c;
  1195  007E8C  5027               	movf	sprintf@c,w,c
  1196  007E8E  5E25               	subwf	sprintf@width,f,c
  1197  007E90  0E00               	movlw	0
  1198  007E92  BE27               	btfsc	sprintf@c,7,c
  1199  007E94  0EFF               	movlw	255
  1200  007E96  5A26               	subwfb	sprintf@width+1,f,c
  1201  007E98  D004               	goto	l1376
  1202  007E9A                     l1374:
  1203                           
  1204                           ;doprnt.c: 1392: else
  1205                           ;doprnt.c: 1393: width = 0;
  1206  007E9A  0E00               	movlw	0
  1207  007E9C  6E26               	movwf	sprintf@width+1,c
  1208  007E9E  0E00               	movlw	0
  1209  007EA0  6E25               	movwf	sprintf@width,c
  1210  007EA2                     l1376:
  1211                           
  1212                           ;doprnt.c: 1396: if(flag & 0x04) {
  1213  007EA2  A424               	btfss	sprintf@flag,2,c
  1214  007EA4  D01E               	goto	l1392
  1215                           
  1216                           ;doprnt.c: 1401: if(flag & 0x03)
  1217  007EA6  C024  F017         	movff	sprintf@flag,??_sprintf
  1218  007EAA  0E03               	movlw	3
  1219  007EAC  1617               	andwf	??_sprintf,f,c
  1220  007EAE  B4D8               	btfsc	status,2,c
  1221  007EB0  D008               	goto	l1384
  1222                           
  1223                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  1224  007EB2  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1225  007EB6  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1226  007EBA  0E2D               	movlw	45
  1227  007EBC  6EDF               	movwf	indf2,c
  1228  007EBE  4A0F               	infsnz	sprintf@sp,f,c
  1229  007EC0  2A10               	incf	sprintf@sp+1,f,c
  1230  007EC2                     l1384:
  1231                           
  1232                           ;doprnt.c: 1424: if(width)
  1233  007EC2  5026               	movf	sprintf@width+1,w,c
  1234  007EC4  1025               	iorwf	sprintf@width,w,c
  1235  007EC6  B4D8               	btfsc	status,2,c
  1236  007EC8  D02D               	goto	l1406
  1237                           
  1238                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  1239                           
  1240                           ;doprnt.c: 1425: do
  1241  007ECA  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1242  007ECE  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1243  007ED2  0E30               	movlw	48
  1244  007ED4  6EDF               	movwf	indf2,c
  1245  007ED6  4A0F               	infsnz	sprintf@sp,f,c
  1246  007ED8  2A10               	incf	sprintf@sp+1,f,c
  1247                           
  1248                           ;doprnt.c: 1427: while(--width);
  1249  007EDA  0625               	decf	sprintf@width,f,c
  1250  007EDC  A0D8               	btfss	status,0,c
  1251  007EDE  0626               	decf	sprintf@width+1,f,c
  1252  007EE0  D7F0               	goto	l1384
  1253  007EE2                     l1392:
  1254                           
  1255                           ;doprnt.c: 1431: {
  1256                           ;doprnt.c: 1433: if(width
  1257                           ;doprnt.c: 1437: )
  1258  007EE2  5026               	movf	sprintf@width+1,w,c
  1259  007EE4  1025               	iorwf	sprintf@width,w,c
  1260  007EE6  B4D8               	btfsc	status,2,c
  1261  007EE8  D00F               	goto	l1400
  1262  007EEA                     l1394:
  1263                           
  1264                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  1265  007EEA  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1266  007EEE  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1267  007EF2  0E20               	movlw	32
  1268  007EF4  6EDF               	movwf	indf2,c
  1269  007EF6  4A0F               	infsnz	sprintf@sp,f,c
  1270  007EF8  2A10               	incf	sprintf@sp+1,f,c
  1271                           
  1272                           ;doprnt.c: 1440: while(--width);
  1273  007EFA  0625               	decf	sprintf@width,f,c
  1274  007EFC  A0D8               	btfss	status,0,c
  1275  007EFE  0626               	decf	sprintf@width+1,f,c
  1276  007F00  5026               	movf	(sprintf@width+1)& (0+255),w,c
  1277  007F02  1025               	iorwf	sprintf@width& (0+255),w,c
  1278  007F04  A4D8               	btfss	status,2,c
  1279  007F06  D7F1               	goto	l1394
  1280  007F08                     l1400:
  1281                           
  1282                           ;doprnt.c: 1447: if(flag & 0x03)
  1283  007F08  C024  F017         	movff	sprintf@flag,??_sprintf
  1284  007F0C  0E03               	movlw	3
  1285  007F0E  1617               	andwf	??_sprintf,f,c
  1286  007F10  B4D8               	btfsc	status,2,c
  1287  007F12  D008               	goto	l1406
  1288                           
  1289                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  1290  007F14  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1291  007F18  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1292  007F1C  0E2D               	movlw	45
  1293  007F1E  6EDF               	movwf	indf2,c
  1294  007F20  4A0F               	infsnz	sprintf@sp,f,c
  1295  007F22  2A10               	incf	sprintf@sp+1,f,c
  1296  007F24                     l1406:
  1297                           
  1298                           ;doprnt.c: 1478: }
  1299                           ;doprnt.c: 1481: prec = c;
  1300  007F24  C027  F01E         	movff	sprintf@c,sprintf@prec
  1301                           
  1302                           ;doprnt.c: 1483: while(prec--) {
  1303  007F28  D055               	goto	l1422
  1304  007F2A                     l1408:
  1305                           
  1306                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  1307  007F2A  501E               	movf	sprintf@prec,w,c
  1308  007F2C  0D02               	mullw	2
  1309  007F2E  0E05               	movlw	low _dpowers
  1310  007F30  24F3               	addwf	prodl,w,c
  1311  007F32  6EF6               	movwf	tblptrl,c
  1312  007F34  0E08               	movlw	high _dpowers
  1313  007F36  20F4               	addwfc	prodh,w,c
  1314  007F38  6EF7               	movwf	tblptrh,c
  1315  007F3A  0009               	tblrd		*+
  1316  007F3C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1317  007F40  000A               	tblrd		*-
  1318  007F42  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1319  007F46  C01F  F001         	movff	sprintf@_val,___lwdiv@dividend
  1320  007F4A  C020  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
  1321  007F4E  EC05  F03D         	call	___lwdiv	;wreg free
  1322  007F52  C001  F009         	movff	?___lwdiv,___lwmod@dividend
  1323  007F56  C002  F00A         	movff	?___lwdiv+1,___lwmod@dividend+1
  1324  007F5A  0E00               	movlw	0
  1325  007F5C  6E0C               	movwf	___lwmod@divisor+1,c
  1326  007F5E  0E0A               	movlw	10
  1327  007F60  6E0B               	movwf	___lwmod@divisor,c
  1328  007F62  ECE2  F03C         	call	___lwmod	;wreg free
  1329  007F66  5009               	movf	?___lwmod,w,c
  1330  007F68  0F30               	addlw	48
  1331  007F6A  6E27               	movwf	sprintf@c,c
  1332                           
  1333                           ;doprnt.c: 1500: break;
  1334  007F6C  D02B               	goto	l1418
  1335  007F6E                     l1410:
  1336                           
  1337                           ;doprnt.c: 1508: {
  1338                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  1339  007F6E  C01F  F001         	movff	sprintf@_val,___lwdiv@dividend
  1340  007F72  C020  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
  1341  007F76  501E               	movf	sprintf@prec,w,c
  1342  007F78  0D02               	mullw	2
  1343  007F7A  0E0F               	movlw	low _hexpowers
  1344  007F7C  24F3               	addwf	prodl,w,c
  1345  007F7E  6EF6               	movwf	tblptrl,c
  1346  007F80  0E08               	movlw	high _hexpowers
  1347  007F82  20F4               	addwfc	prodh,w,c
  1348  007F84  6EF7               	movwf	tblptrh,c
  1349  007F86  0009               	tblrd		*+
  1350  007F88  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1351  007F8C  000A               	tblrd		*-
  1352  007F8E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1353  007F92  EC05  F03D         	call	___lwdiv	;wreg free
  1354  007F96  5001               	movf	?___lwdiv,w,c
  1355  007F98  0B0F               	andlw	15
  1356  007F9A  6E1B               	movwf	sprintf@idx,c
  1357                           
  1358                           ;doprnt.c: 1513: c = "0123456789ABCDEF"[idx];
  1359  007F9C  501B               	movf	sprintf@idx,w,c
  1360  007F9E  0D01               	mullw	1
  1361  007FA0  0E3F               	movlw	low STR_4
  1362  007FA2  24F3               	addwf	prodl,w,c
  1363  007FA4  6EF6               	movwf	tblptrl,c
  1364  007FA6  0E08               	movlw	high STR_4
  1365  007FA8  20F4               	addwfc	prodh,w,c
  1366  007FAA  6EF7               	movwf	tblptrh,c
  1367  007FAC  0008               	tblrd		*
  1368  007FAE  CFF5 F027          	movff	tablat,sprintf@c
  1369                           
  1370                           ;doprnt.c: 1517: }
  1371                           ;doprnt.c: 1519: break;
  1372  007FB2  D008               	goto	l1418
  1373  007FB4                     l1416:
  1374  007FB4  5024               	movf	sprintf@flag,w,c
  1375  007FB6  0B80               	andlw	128
  1376                           
  1377                           ; Switch size 1, requested type "space"
  1378                           ; Number of cases is 2, Range of values is 0 to 128
  1379                           ; switch strategies available:
  1380                           ; Name         Instructions Cycles
  1381                           ; simple_byte            7     4 (average)
  1382                           ;	Chosen strategy is simple_byte
  1383  007FB8  0A00               	xorlw	0	; case 0
  1384  007FBA  B4D8               	btfsc	status,2,c
  1385  007FBC  D7B6               	goto	l1408
  1386  007FBE  0A80               	xorlw	128	; case 128
  1387  007FC0  B4D8               	btfsc	status,2,c
  1388  007FC2  D7D5               	goto	l1410
  1389  007FC4                     l1418:
  1390                           
  1391                           ;doprnt.c: 1533: ((*sp++ = (c)));
  1392  007FC4  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1393  007FC8  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1394  007FCC  C027  FFDF         	movff	sprintf@c,indf2
  1395  007FD0  4A0F               	infsnz	sprintf@sp,f,c
  1396  007FD2  2A10               	incf	sprintf@sp+1,f,c
  1397  007FD4                     l1422:
  1398  007FD4  061E               	decf	sprintf@prec,f,c
  1399  007FD6  281E               	incf	sprintf@prec& (0+255),w,c
  1400  007FD8  A4D8               	btfss	status,2,c
  1401  007FDA  D7EC               	goto	l1416
  1402  007FDC                     l1424:
  1403  007FDC  C011  FFF6         	movff	sprintf@f,tblptrl
  1404  007FE0  C012  FFF7         	movff	sprintf@f+1,tblptrh
  1405  007FE4  4A11               	infsnz	sprintf@f,f,c
  1406  007FE6  2A12               	incf	sprintf@f+1,f,c
  1407  007FE8  0008               	tblrd		*
  1408  007FEA  CFF5 F027          	movff	tablat,sprintf@c
  1409  007FEE  6627               	tstfsz	sprintf@c& (0+255),c
  1410  007FF0  D64A               	goto	l1284
  1411  007FF2                     l1426:
  1412                           
  1413                           ;doprnt.c: 1547: *sp = 0;
  1414  007FF2  C00F  FFD9         	movff	sprintf@sp,fsr2l
  1415  007FF6  C010  FFDA         	movff	sprintf@sp+1,fsr2h
  1416  007FFA  0E00               	movlw	0
  1417  007FFC  6EDF               	movwf	indf2,c
  1418                           
  1419                           ;doprnt.c: 1549: return 0;
  1420                           ;	Return value of _sprintf is never used
  1421  007FFE  0012               	return	
  1422  008000                     __end_of_sprintf:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postinc1	equ	0xFE6
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           indf2	equ	0xFDF
  1436                           postinc2	equ	0xFDE
  1437                           postdec2	equ	0xFDD
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _isdigit *****************
  1443 ;; Defined at:
  1444 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\isdigit.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  c               1    wreg     unsigned char 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  c               1    2[COMRAM] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;		None               void
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1458 ;;      Params:         0       0       0       0       0       0       0       0       0
  1459 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1460 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1461 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1462 ;;Total ram usage:        3 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_sprintf
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text2
  1472  0078D4                     __ptext2:
  1473                           	opt stack 0
  1474  0078D4                     _isdigit:
  1475                           	opt stack 29
  1476                           
  1477                           ;incstack = 0
  1478                           ;isdigit@c stored from wreg
  1479  0078D4  CFE8 F003          	movff	wreg,isdigit@c
  1480  0078D8  6E01               	movwf	??_isdigit& (0+255),c
  1481  0078DA  0E00               	movlw	0
  1482  0078DC  6E02               	movwf	_isdigit$1028,c
  1483  0078DE  5001               	movf	??_isdigit& (0+255),w,c
  1484  0078E0  0E3A               	movlw	58
  1485  0078E2  5C03               	subwf	isdigit@c,w,c
  1486  0078E4  B0D8               	btfsc	status,0,c
  1487  0078E6  D007               	goto	l1278
  1488  0078E8  0E2F               	movlw	47
  1489  0078EA  6403               	cpfsgt	isdigit@c,c
  1490  0078EC  D004               	goto	l1278
  1491  0078EE  6E01               	movwf	??_isdigit& (0+255),c
  1492  0078F0  0E01               	movlw	1
  1493  0078F2  6E02               	movwf	_isdigit$1028,c
  1494  0078F4  5001               	movf	??_isdigit& (0+255),w,c
  1495  0078F6                     l1278:
  1496  0078F6  C002  F001         	movff	_isdigit$1028,??_isdigit
  1497  0078FA  3001               	rrcf	??_isdigit,w,c
  1498  0078FC  0012               	return	
  1499  0078FE                     __end_of_isdigit:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           prodh	equ	0xFF4
  1506                           prodl	equ	0xFF3
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postinc1	equ	0xFE6
  1510                           postdec1	equ	0xFE5
  1511                           fsr1l	equ	0xFE1
  1512                           indf2	equ	0xFDF
  1513                           postinc2	equ	0xFDE
  1514                           postdec2	equ	0xFDD
  1515                           fsr2h	equ	0xFDA
  1516                           fsr2l	equ	0xFD9
  1517                           status	equ	0xFD8
  1518                           
  1519 ;; *************** function ___wmul *****************
  1520 ;; Defined at:
  1521 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\wmul.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  multiplier      2    0[COMRAM] unsigned int 
  1524 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  product         2    4[COMRAM] unsigned int 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  2    0[COMRAM] unsigned int 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0, prodl, prodh
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1536 ;;      Params:         4       0       0       0       0       0       0       0       0
  1537 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1539 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1540 ;;Total ram usage:        6 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_sprintf
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text3
  1550  00798A                     __ptext3:
  1551                           	opt stack 0
  1552  00798A                     ___wmul:
  1553                           	opt stack 29
  1554                           
  1555                           ;incstack = 0
  1556  00798A  5001               	movf	___wmul@multiplier,w,c
  1557  00798C  0203               	mulwf	___wmul@multiplicand,c
  1558  00798E  CFF3 F005          	movff	prodl,___wmul@product
  1559  007992  CFF4 F006          	movff	prodh,___wmul@product+1
  1560  007996  5001               	movf	___wmul@multiplier,w,c
  1561  007998  0204               	mulwf	___wmul@multiplicand+1,c
  1562  00799A  CFF3 FFF4          	movff	prodl,prodh
  1563  00799E  6AF3               	clrf	prodl,c
  1564  0079A0  50F3               	movf	prodl,w,c
  1565  0079A2  2605               	addwf	___wmul@product,f,c
  1566  0079A4  50F4               	movf	prodh,w,c
  1567  0079A6  2206               	addwfc	___wmul@product+1,f,c
  1568  0079A8  5002               	movf	___wmul@multiplier+1,w,c
  1569  0079AA  0203               	mulwf	___wmul@multiplicand,c
  1570  0079AC  CFF3 FFF4          	movff	prodl,prodh
  1571  0079B0  6AF3               	clrf	prodl,c
  1572  0079B2  50F3               	movf	prodl,w,c
  1573  0079B4  2605               	addwf	___wmul@product,f,c
  1574  0079B6  50F4               	movf	prodh,w,c
  1575  0079B8  2206               	addwfc	___wmul@product+1,f,c
  1576  0079BA  C005  F001         	movff	___wmul@product,?___wmul
  1577  0079BE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1578  0079C2  0012               	return	
  1579  0079C4                     __end_of___wmul:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           prodh	equ	0xFF4
  1586                           prodl	equ	0xFF3
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postinc1	equ	0xFE6
  1590                           postdec1	equ	0xFE5
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function ___lwmod *****************
  1600 ;; Defined at:
  1601 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\lwmod.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;  dividend        2    8[COMRAM] unsigned int 
  1604 ;;  divisor         2   10[COMRAM] unsigned int 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  counter         1   13[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  2    8[COMRAM] unsigned int 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1616 ;;      Params:         4       0       0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1618 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1619 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1620 ;;Total ram usage:        6 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_sprintf
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text4
  1630  0079C4                     __ptext4:
  1631                           	opt stack 0
  1632  0079C4                     ___lwmod:
  1633                           	opt stack 29
  1634                           
  1635                           ;incstack = 0
  1636  0079C4  500C               	movf	___lwmod@divisor+1,w,c
  1637  0079C6  100B               	iorwf	___lwmod@divisor,w,c
  1638  0079C8  B4D8               	btfsc	status,2,c
  1639  0079CA  D01A               	goto	l692
  1640  0079CC  6E0D               	movwf	??___lwmod& (0+255),c
  1641  0079CE  0E01               	movlw	1
  1642  0079D0  6E0E               	movwf	___lwmod@counter,c
  1643  0079D2  500D               	movf	??___lwmod& (0+255),w,c
  1644  0079D4  D004               	goto	l972
  1645  0079D6                     l970:
  1646  0079D6  90D8               	bcf	status,0,c
  1647  0079D8  360B               	rlcf	___lwmod@divisor,f,c
  1648  0079DA  360C               	rlcf	___lwmod@divisor+1,f,c
  1649  0079DC  2A0E               	incf	___lwmod@counter,f,c
  1650  0079DE                     l972:
  1651  0079DE  AE0C               	btfss	___lwmod@divisor+1,7,c
  1652  0079E0  D7FA               	goto	l970
  1653  0079E2                     l974:
  1654  0079E2  500B               	movf	___lwmod@divisor,w,c
  1655  0079E4  5C09               	subwf	___lwmod@dividend,w,c
  1656  0079E6  500C               	movf	___lwmod@divisor+1,w,c
  1657  0079E8  580A               	subwfb	___lwmod@dividend+1,w,c
  1658  0079EA  A0D8               	btfss	status,0,c
  1659  0079EC  D004               	goto	l978
  1660  0079EE  500B               	movf	___lwmod@divisor,w,c
  1661  0079F0  5E09               	subwf	___lwmod@dividend,f,c
  1662  0079F2  500C               	movf	___lwmod@divisor+1,w,c
  1663  0079F4  5A0A               	subwfb	___lwmod@dividend+1,f,c
  1664  0079F6                     l978:
  1665  0079F6  90D8               	bcf	status,0,c
  1666  0079F8  320C               	rrcf	___lwmod@divisor+1,f,c
  1667  0079FA  320B               	rrcf	___lwmod@divisor,f,c
  1668  0079FC  2E0E               	decfsz	___lwmod@counter,f,c
  1669  0079FE  D7F1               	goto	l974
  1670  007A00                     l692:
  1671  007A00  C009  F009         	movff	___lwmod@dividend,?___lwmod
  1672  007A04  C00A  F00A         	movff	___lwmod@dividend+1,?___lwmod+1
  1673  007A08  0012               	return	
  1674  007A0A                     __end_of___lwmod:
  1675                           	opt stack 0
  1676                           tblptru	equ	0xFF8
  1677                           tblptrh	equ	0xFF7
  1678                           tblptrl	equ	0xFF6
  1679                           tablat	equ	0xFF5
  1680                           prodh	equ	0xFF4
  1681                           prodl	equ	0xFF3
  1682                           postinc0	equ	0xFEE
  1683                           wreg	equ	0xFE8
  1684                           postinc1	equ	0xFE6
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function ___lwdiv *****************
  1695 ;; Defined at:
  1696 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\lwdiv.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;  dividend        2    0[COMRAM] unsigned int 
  1699 ;;  divisor         2    2[COMRAM] unsigned int 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  quotient        2    5[COMRAM] unsigned int 
  1702 ;;  counter         1    7[COMRAM] unsigned char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  2    0[COMRAM] unsigned int 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1712 ;;      Params:         4       0       0       0       0       0       0       0       0
  1713 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1714 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1715 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1716 ;;Total ram usage:        8 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_sprintf
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text5
  1726  007A0A                     __ptext5:
  1727                           	opt stack 0
  1728  007A0A                     ___lwdiv:
  1729                           	opt stack 29
  1730                           
  1731                           ;incstack = 0
  1732  007A0A  0E00               	movlw	0
  1733  007A0C  6E07               	movwf	___lwdiv@quotient+1,c
  1734  007A0E  0E00               	movlw	0
  1735  007A10  6E06               	movwf	___lwdiv@quotient,c
  1736  007A12  5004               	movf	___lwdiv@divisor+1,w,c
  1737  007A14  1003               	iorwf	___lwdiv@divisor,w,c
  1738  007A16  B4D8               	btfsc	status,2,c
  1739  007A18  D01E               	goto	l682
  1740  007A1A  6E05               	movwf	??___lwdiv& (0+255),c
  1741  007A1C  0E01               	movlw	1
  1742  007A1E  6E08               	movwf	___lwdiv@counter,c
  1743  007A20  5005               	movf	??___lwdiv& (0+255),w,c
  1744  007A22  D004               	goto	l922
  1745  007A24                     l920:
  1746  007A24  90D8               	bcf	status,0,c
  1747  007A26  3603               	rlcf	___lwdiv@divisor,f,c
  1748  007A28  3604               	rlcf	___lwdiv@divisor+1,f,c
  1749  007A2A  2A08               	incf	___lwdiv@counter,f,c
  1750  007A2C                     l922:
  1751  007A2C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1752  007A2E  D7FA               	goto	l920
  1753  007A30                     l924:
  1754  007A30  90D8               	bcf	status,0,c
  1755  007A32  3606               	rlcf	___lwdiv@quotient,f,c
  1756  007A34  3607               	rlcf	___lwdiv@quotient+1,f,c
  1757  007A36  5003               	movf	___lwdiv@divisor,w,c
  1758  007A38  5C01               	subwf	___lwdiv@dividend,w,c
  1759  007A3A  5004               	movf	___lwdiv@divisor+1,w,c
  1760  007A3C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1761  007A3E  A0D8               	btfss	status,0,c
  1762  007A40  D005               	goto	l932
  1763  007A42  5003               	movf	___lwdiv@divisor,w,c
  1764  007A44  5E01               	subwf	___lwdiv@dividend,f,c
  1765  007A46  5004               	movf	___lwdiv@divisor+1,w,c
  1766  007A48  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1767  007A4A  8006               	bsf	___lwdiv@quotient,0,c
  1768  007A4C                     l932:
  1769  007A4C  90D8               	bcf	status,0,c
  1770  007A4E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1771  007A50  3203               	rrcf	___lwdiv@divisor,f,c
  1772  007A52  2E08               	decfsz	___lwdiv@counter,f,c
  1773  007A54  D7ED               	goto	l924
  1774  007A56                     l682:
  1775  007A56  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  1776  007A5A  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1777  007A5E  0012               	return	
  1778  007A60                     __end_of___lwdiv:
  1779                           	opt stack 0
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           prodh	equ	0xFF4
  1785                           prodl	equ	0xFF3
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           postinc1	equ	0xFE6
  1789                           postdec1	equ	0xFE5
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _SendData *****************
  1799 ;; Defined at:
  1800 ;;		line 29 in file "main.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  lcddata         1    wreg     unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  lcddata         1    6[COMRAM] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1814 ;;      Params:         0       0       0       0       0       0       0       0       0
  1815 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1817 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1818 ;;Total ram usage:        1 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    1
  1821 ;; This function calls:
  1822 ;;		_delay
  1823 ;; This function is called by:
  1824 ;;		_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text6
  1829  0078AC                     __ptext6:
  1830                           	opt stack 0
  1831  0078AC                     _SendData:
  1832                           	opt stack 29
  1833                           
  1834                           ;incstack = 0
  1835                           ;SendData@lcddata stored from wreg
  1836  0078AC  CFE8 F007          	movff	wreg,SendData@lcddata
  1837                           
  1838                           ;main.c: 31: LATAbits.LA0 = 1;
  1839  0078B0  8089               	bsf	3977,0,c	;volatile
  1840                           
  1841                           ;main.c: 32: LATB = lcddata;
  1842  0078B2  C007  FF8A         	movff	SendData@lcddata,3978	;volatile
  1843                           
  1844                           ;main.c: 33: LATAbits.LA1 = 1;
  1845  0078B6  8289               	bsf	3977,1,c	;volatile
  1846                           
  1847                           ;main.c: 34: delay(10);
  1848  0078B8  0E00               	movlw	0
  1849  0078BA  6E02               	movwf	delay@time+1,c
  1850  0078BC  0E0A               	movlw	10
  1851  0078BE  6E01               	movwf	delay@time,c
  1852  0078C0  ECAA  F03C         	call	_delay	;wreg free
  1853                           
  1854                           ;main.c: 35: LATAbits.LA1 = 0;
  1855  0078C4  9289               	bcf	3977,1,c	;volatile
  1856                           
  1857                           ;main.c: 36: delay(10);
  1858  0078C6  0E00               	movlw	0
  1859  0078C8  6E02               	movwf	delay@time+1,c
  1860  0078CA  0E0A               	movlw	10
  1861  0078CC  6E01               	movwf	delay@time,c
  1862  0078CE  ECAA  F03C         	call	_delay	;wreg free
  1863  0078D2  0012               	return	
  1864  0078D4                     __end_of_SendData:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postinc1	equ	0xFE6
  1875                           postdec1	equ	0xFE5
  1876                           fsr1l	equ	0xFE1
  1877                           indf2	equ	0xFDF
  1878                           postinc2	equ	0xFDE
  1879                           postdec2	equ	0xFDD
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _SPI_Transmit *****************
  1885 ;; Defined at:
  1886 ;;		line 41 in file "SPI_EEPROM.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  Data            1    wreg     unsigned char 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  Data            1    0[COMRAM] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0
  1901 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1903 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1904 ;;Total ram usage:        1 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text7
  1914  007848                     __ptext7:
  1915                           	opt stack 0
  1916  007848                     _SPI_Transmit:
  1917                           	opt stack 30
  1918                           
  1919                           ;incstack = 0
  1920                           ;SPI_Transmit@Data stored from wreg
  1921  007848  CFE8 F001          	movff	wreg,SPI_Transmit@Data
  1922                           
  1923                           ;SPI_EEPROM.c: 43: PIR1bits.SSPIF = 0;
  1924  00784C  969E               	bcf	3998,3,c	;volatile
  1925                           
  1926                           ;SPI_EEPROM.c: 44: SSPBUF = Data;
  1927  00784E  C001  FFC9         	movff	SPI_Transmit@Data,4041	;volatile
  1928  007852                     l94:
  1929  007852  A69E               	btfss	3998,3,c	;volatile
  1930  007854  D7FE               	goto	l94
  1931                           
  1932                           ;SPI_EEPROM.c: 46: PIR1bits.SSPIF = 0;
  1933  007856  969E               	bcf	3998,3,c	;volatile
  1934                           
  1935                           ;SPI_EEPROM.c: 47: Data = SSPBUF;
  1936  007858  CFC9 F001          	movff	4041,SPI_Transmit@Data	;volatile
  1937  00785C  0012               	return	
  1938  00785E                     __end_of_SPI_Transmit:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           prodh	equ	0xFF4
  1945                           prodl	equ	0xFF3
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           postinc1	equ	0xFE6
  1949                           postdec1	equ	0xFE5
  1950                           fsr1l	equ	0xFE1
  1951                           indf2	equ	0xFDF
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _SPI_Receive *****************
  1959 ;; Defined at:
  1960 ;;		line 50 in file "SPI_EEPROM.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  RecData         1    0[COMRAM] unsigned char 
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      unsigned char 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1974 ;;      Params:         0       0       0       0       0       0       0       0       0
  1975 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1977 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1978 ;;Total ram usage:        1 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; This function calls:
  1981 ;;		Nothing
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text8
  1988  007836                     __ptext8:
  1989                           	opt stack 0
  1990  007836                     _SPI_Receive:
  1991                           	opt stack 30
  1992                           
  1993                           ;SPI_EEPROM.c: 52: unsigned char RecData;
  1994                           ;SPI_EEPROM.c: 53: SSPBUF = 0x00;
  1995                           
  1996                           ;incstack = 0
  1997  007836  0E00               	movlw	0
  1998  007838  6EC9               	movwf	4041,c	;volatile
  1999  00783A                     l100:
  2000  00783A  A69E               	btfss	3998,3,c	;volatile
  2001  00783C  D7FE               	goto	l100
  2002                           
  2003                           ;SPI_EEPROM.c: 55: RecData = SSPBUF;
  2004  00783E  CFC9 F001          	movff	4041,SPI_Receive@RecData	;volatile
  2005                           
  2006                           ;SPI_EEPROM.c: 56: PIR1bits.SSPIF = 0;
  2007  007842  969E               	bcf	3998,3,c	;volatile
  2008                           
  2009                           ;SPI_EEPROM.c: 57: return RecData;
  2010  007844  5001               	movf	SPI_Receive@RecData,w,c
  2011  007846  0012               	return	
  2012  007848                     __end_of_SPI_Receive:
  2013                           	opt stack 0
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           prodh	equ	0xFF4
  2019                           prodl	equ	0xFF3
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           postinc1	equ	0xFE6
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           indf2	equ	0xFDF
  2026                           postinc2	equ	0xFDE
  2027                           postdec2	equ	0xFDD
  2028                           fsr2h	equ	0xFDA
  2029                           fsr2l	equ	0xFD9
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function _InitSPI *****************
  2033 ;; Defined at:
  2034 ;;		line 14 in file "SPI_EEPROM.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;		None               void
  2041 ;; Registers used:
  2042 ;;		wreg, status,2
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2048 ;;      Params:         0       0       0       0       0       0       0       0       0
  2049 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2051 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_main
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text9
  2062  00785E                     __ptext9:
  2063                           	opt stack 0
  2064  00785E                     _InitSPI:
  2065                           	opt stack 30
  2066                           
  2067                           ;SPI_EEPROM.c: 16: ADCON1 = 0x0f;
  2068                           
  2069                           ;incstack = 0
  2070  00785E  0E0F               	movlw	15
  2071  007860  6EC1               	movwf	4033,c	;volatile
  2072                           
  2073                           ;SPI_EEPROM.c: 17: TRISBbits.TRISB0 = 1;
  2074  007862  8093               	bsf	3987,0,c	;volatile
  2075                           
  2076                           ;SPI_EEPROM.c: 18: TRISBbits.TRISB1 = 0;
  2077  007864  9293               	bcf	3987,1,c	;volatile
  2078                           
  2079                           ;SPI_EEPROM.c: 19: TRISCbits.TRISC7 = 0;
  2080  007866  9E94               	bcf	3988,7,c	;volatile
  2081                           
  2082                           ;SPI_EEPROM.c: 21: TRISAbits.TRISA5 = 0;
  2083  007868  9A92               	bcf	3986,5,c	;volatile
  2084                           
  2085                           ;SPI_EEPROM.c: 22: TRISEbits.RE1 = 0;
  2086  00786A  9296               	bcf	3990,1,c	;volatile
  2087                           
  2088                           ;SPI_EEPROM.c: 24: LATAbits.LATA5 = 1;
  2089  00786C  8A89               	bsf	3977,5,c	;volatile
  2090                           
  2091                           ;SPI_EEPROM.c: 25: LATEbits.LE1 = 1;
  2092  00786E  828D               	bsf	3981,1,c	;volatile
  2093                           
  2094                           ;SPI_EEPROM.c: 27: SSPCON1bits.SSPEN = 0;
  2095  007870  9AC6               	bcf	4038,5,c	;volatile
  2096                           
  2097                           ;SPI_EEPROM.c: 29: SSPSTATbits.SMP = 0;
  2098  007872  9EC7               	bcf	4039,7,c	;volatile
  2099                           
  2100                           ;SPI_EEPROM.c: 30: SSPSTATbits.CKE = 1;
  2101  007874  8CC7               	bsf	4039,6,c	;volatile
  2102                           
  2103                           ;SPI_EEPROM.c: 32: SSPCON1bits.CKP = 0;
  2104  007876  98C6               	bcf	4038,4,c	;volatile
  2105                           
  2106                           ;SPI_EEPROM.c: 33: SSPCON1bits.SSPM0 = 0;
  2107  007878  90C6               	bcf	4038,0,c	;volatile
  2108                           
  2109                           ;SPI_EEPROM.c: 34: SSPCON1bits.SSPM1 = 1;
  2110  00787A  82C6               	bsf	4038,1,c	;volatile
  2111                           
  2112                           ;SPI_EEPROM.c: 35: SSPCON1bits.SSPM2 = 0;
  2113  00787C  94C6               	bcf	4038,2,c	;volatile
  2114                           
  2115                           ;SPI_EEPROM.c: 36: SSPCON1bits.SSPM3 = 0;
  2116  00787E  96C6               	bcf	4038,3,c	;volatile
  2117                           
  2118                           ;SPI_EEPROM.c: 38: SSPCON1bits.SSPEN = 1;
  2119  007880  8AC6               	bsf	4038,5,c	;volatile
  2120  007882  0012               	return	
  2121  007884                     __end_of_InitSPI:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           prodh	equ	0xFF4
  2128                           prodl	equ	0xFF3
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           postinc1	equ	0xFE6
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           indf2	equ	0xFDF
  2135                           postinc2	equ	0xFDE
  2136                           postdec2	equ	0xFDD
  2137                           fsr2h	equ	0xFDA
  2138                           fsr2l	equ	0xFD9
  2139                           status	equ	0xFD8
  2140                           
  2141 ;; *************** function _InitLCD *****************
  2142 ;; Defined at:
  2143 ;;		line 39 in file "main.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;		None               void
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0
  2158 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2160 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    2
  2164 ;; This function calls:
  2165 ;;		_SendInstruction
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text10
  2172  007928                     __ptext10:
  2173                           	opt stack 0
  2174  007928                     _InitLCD:
  2175                           	opt stack 28
  2176                           
  2177                           ;main.c: 41: ADCON1 = 0x0F;
  2178                           
  2179                           ;incstack = 0
  2180  007928  0E0F               	movlw	15
  2181  00792A  6EC1               	movwf	4033,c	;volatile
  2182                           
  2183                           ;main.c: 42: TRISB = 0x00;
  2184  00792C  0E00               	movlw	0
  2185  00792E  6E93               	movwf	3987,c	;volatile
  2186                           
  2187                           ;main.c: 43: TRISAbits.RA0 = 0;
  2188  007930  9092               	bcf	3986,0,c	;volatile
  2189                           
  2190                           ;main.c: 44: TRISAbits.RA1 = 0;
  2191  007932  9292               	bcf	3986,1,c	;volatile
  2192                           
  2193                           ;main.c: 46: SendInstruction(0x38);
  2194  007934  0E38               	movlw	56
  2195  007936  EC42  F03C         	call	_SendInstruction
  2196                           
  2197                           ;main.c: 47: SendInstruction(0x06);
  2198  00793A  0E06               	movlw	6
  2199  00793C  EC42  F03C         	call	_SendInstruction
  2200                           
  2201                           ;main.c: 48: SendInstruction(0x0C);
  2202  007940  0E0C               	movlw	12
  2203  007942  EC42  F03C         	call	_SendInstruction
  2204                           
  2205                           ;main.c: 49: SendInstruction(0x01);
  2206  007946  0E01               	movlw	1
  2207  007948  EC42  F03C         	call	_SendInstruction
  2208                           
  2209                           ;main.c: 50: SendInstruction(0x80);
  2210  00794C  0E80               	movlw	128
  2211  00794E  EC42  F03C         	call	_SendInstruction
  2212  007952  0012               	return	
  2213  007954                     __end_of_InitLCD:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           prodh	equ	0xFF4
  2220                           prodl	equ	0xFF3
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postinc1	equ	0xFE6
  2224                           postdec1	equ	0xFE5
  2225                           fsr1l	equ	0xFE1
  2226                           indf2	equ	0xFDF
  2227                           postinc2	equ	0xFDE
  2228                           postdec2	equ	0xFDD
  2229                           fsr2h	equ	0xFDA
  2230                           fsr2l	equ	0xFD9
  2231                           status	equ	0xFD8
  2232                           
  2233 ;; *************** function _SendInstruction *****************
  2234 ;; Defined at:
  2235 ;;		line 19 in file "main.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  command         1    wreg     unsigned char 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  command         1    6[COMRAM] unsigned char 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;		None               void
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0
  2250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2252 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2253 ;;Total ram usage:        1 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    1
  2256 ;; This function calls:
  2257 ;;		_delay
  2258 ;; This function is called by:
  2259 ;;		_InitLCD
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text11
  2265  007884                     __ptext11:
  2266                           	opt stack 0
  2267  007884                     _SendInstruction:
  2268                           	opt stack 29
  2269                           
  2270                           ;incstack = 0
  2271                           ;SendInstruction@command stored from wreg
  2272  007884  CFE8 F007          	movff	wreg,SendInstruction@command
  2273                           
  2274                           ;main.c: 21: LATAbits.LA0 = 0;
  2275  007888  9089               	bcf	3977,0,c	;volatile
  2276                           
  2277                           ;main.c: 22: LATB = command;
  2278  00788A  C007  FF8A         	movff	SendInstruction@command,3978	;volatile
  2279                           
  2280                           ;main.c: 23: LATAbits.LA1 = 1;
  2281  00788E  8289               	bsf	3977,1,c	;volatile
  2282                           
  2283                           ;main.c: 24: delay(10);
  2284  007890  0E00               	movlw	0
  2285  007892  6E02               	movwf	delay@time+1,c
  2286  007894  0E0A               	movlw	10
  2287  007896  6E01               	movwf	delay@time,c
  2288  007898  ECAA  F03C         	call	_delay	;wreg free
  2289                           
  2290                           ;main.c: 25: LATAbits.LA1 = 0;
  2291  00789C  9289               	bcf	3977,1,c	;volatile
  2292                           
  2293                           ;main.c: 26: delay(10);
  2294  00789E  0E00               	movlw	0
  2295  0078A0  6E02               	movwf	delay@time+1,c
  2296  0078A2  0E0A               	movlw	10
  2297  0078A4  6E01               	movwf	delay@time,c
  2298  0078A6  ECAA  F03C         	call	_delay	;wreg free
  2299  0078AA  0012               	return	
  2300  0078AC                     __end_of_SendInstruction:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postinc1	equ	0xFE6
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           indf2	equ	0xFDF
  2314                           postinc2	equ	0xFDE
  2315                           postdec2	equ	0xFDD
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _delay *****************
  2321 ;; Defined at:
  2322 ;;		line 8 in file "main.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  time            2    0[COMRAM] unsigned int 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  j               2    4[COMRAM] unsigned int 
  2327 ;;  i               2    2[COMRAM] unsigned int 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         2       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        6 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; This function calls:
  2344 ;;		Nothing
  2345 ;; This function is called by:
  2346 ;;		_SendInstruction
  2347 ;;		_SendData
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text12
  2353  007954                     __ptext12:
  2354                           	opt stack 0
  2355  007954                     _delay:
  2356                           	opt stack 30
  2357                           
  2358                           ;main.c: 10: unsigned int i , j ;
  2359                           ;main.c: 12: for(i = 0; i < time; i++)
  2360                           
  2361                           ;incstack = 0
  2362  007954  0E00               	movlw	0
  2363  007956  6E04               	movwf	delay@i+1,c
  2364  007958  0E00               	movlw	0
  2365  00795A  6E03               	movwf	delay@i,c
  2366  00795C  D00F               	goto	l838
  2367  00795E                     l826:
  2368                           
  2369                           ;main.c: 13: {
  2370                           ;main.c: 14: for(j=0;j<100;j++);
  2371  00795E  0E00               	movlw	0
  2372  007960  6E06               	movwf	delay@j+1,c
  2373  007962  0E00               	movlw	0
  2374  007964  6E05               	movwf	delay@j,c
  2375  007966  0E64               	movlw	100
  2376  007968  5C05               	subwf	delay@j,w,c
  2377  00796A  0E00               	movlw	0
  2378  00796C  5806               	subwfb	delay@j+1,w,c
  2379  00796E  B0D8               	btfsc	status,0,c
  2380  007970  D003               	goto	l836
  2381  007972  4A05               	infsnz	delay@j,f,c
  2382  007974  2A06               	incf	delay@j+1,f,c
  2383  007976  D7F7               	goto	L8
  2384  007978                     l836:
  2385  007978  4A03               	infsnz	delay@i,f,c
  2386  00797A  2A04               	incf	delay@i+1,f,c
  2387  00797C                     l838:
  2388  00797C  5001               	movf	delay@time,w,c
  2389  00797E  5C03               	subwf	delay@i,w,c
  2390  007980  5002               	movf	delay@time+1,w,c
  2391  007982  5804               	subwfb	delay@i+1,w,c
  2392  007984  B0D8               	btfsc	status,0,c
  2393  007986  0012               	return	
  2394  007988  D7EA               	goto	l826
  2395  00798A                     __end_of_delay:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           postinc1	equ	0xFE6
  2406                           postdec1	equ	0xFE5
  2407                           fsr1l	equ	0xFE1
  2408                           indf2	equ	0xFDF
  2409                           postinc2	equ	0xFDE
  2410                           postdec2	equ	0xFDD
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           prodh	equ	0xFF4
  2419                           prodl	equ	0xFF3
  2420                           postinc0	equ	0xFEE
  2421                           wreg	equ	0xFE8
  2422                           postinc1	equ	0xFE6
  2423                           postdec1	equ	0xFE5
  2424                           fsr1l	equ	0xFE1
  2425                           indf2	equ	0xFDF
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432                           	psect	rparam
  2433  0000                     tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           postinc1	equ	0xFE6
  2442                           postdec1	equ	0xFE5
  2443                           fsr1l	equ	0xFE1
  2444                           indf2	equ	0xFDF
  2445                           postinc2	equ	0xFDE
  2446                           postdec2	equ	0xFDD
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    18
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     83      93
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[20]), STR_2(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@text(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S755$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    main@string1	PTR unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SendData->_delay
    _InitLCD->_SendInstruction
    _SendInstruction->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                44    44      0    4654
                                             39 COMRAM    44    44      0
                            _InitLCD
                            _InitSPI
                        _SPI_Receive
                       _SPI_Transmit
                           _SendData
                    _SendInstruction
                              _delay
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    2096
                                             14 COMRAM    25    17      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     191
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     191
                                              8 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     277
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SendData                                             1     1      0     462
                                              6 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _SPI_Transmit                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Receive                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSPI                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     462
                    _SendInstruction
 ---------------------------------------------------------------------------------
 (1) _SendInstruction                                      1     1      0     462
                                              6 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     447
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _SendInstruction
       _delay
   _InitSPI
   _SPI_Receive
   _SPI_Transmit
   _SendData
     _delay
   _SendInstruction
     _delay
   _delay
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     53      5D       1       97.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      20        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Wed Jun 15 14:23:02 2016

             _SPI_Receive 7836               _SSPSTATbits 000FC7                        l46 7B18  
                      l55 7C7A                        l48 7B6A                        l94 7852  
     ___wmul@multiplicand 0003                       l100 783A                       l133 7D7C  
                     l920 7A24                       l826 795E                       l922 7A2C  
                     l682 7A56                       l836 7978                       l932 7A4C  
                     l924 7A30                       l692 7A00                       l838 797C  
                     l970 79D6                       l972 79DE                       l974 79E2  
                     l978 79F6                       u771 7A72              _SPI_Transmit 7848  
                     wreg 000FE8                      l1400 7F08                      l1312 7D44  
                    l1304 7CE6                      l1410 7F6E                      l1332 7DD4  
                    l1316 7D48                      l1422 7FD4                      l1406 7F24  
                    l1408 7F2A                      l1416 7FB4                      l1328 7DBA  
                    l1424 7FDC                      l1418 7FC4                      l1370 7E76  
                    l1346 7E10                      l1362 7E4C                      l1426 7FF2  
                    l1290 7CA0                      l1442 7A9C                      l1364 7E5C  
                    l1284 7C86                      l1540 7C68                      l1524 7C00  
                    l1278 78F6                      l1374 7E9A                      l1294 7CB2  
                    l1438 7A88                      l1384 7EC2                      l1392 7EE2  
                    l1376 7EA2                      l1394 7EEA                      l1298 7CB8  
                    STR_1 0850                      STR_2 082B                      STR_3 0817  
                    STR_4 083F                      _LATB 000F8A                      _main 7A60  
                    fsr2h 000FDA                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0800               main@string1 004D           __end_of_InitLCD 7954  
         __end_of_InitSPI 7884                     ?_main 0001           __end_of___lwdiv 7A60  
         __end_of___lwmod 7A0A                     _TRISB 000F93                     _SSPEN 007E35  
      SPI_Receive@RecData 0001                     _delay 7954           __end_of_dpowers 080F  
         __end_of_isdigit 78FE                     main@i 0052                     main@j 0050  
                   tablat 000FF5                     status 000FD8           __end_of_sprintf 8000  
         __initialization 78FE              __end_of_main 7C7C          __end_of_SendData 78D4  
                  ??_main 0028             __activetblptr 000002                    ?_delay 0001  
                  _ADCON1 000FC1                    _SSPBUF 000FC9                 ??_InitLCD 0008  
               ??_InitSPI 0001             main@read_data 0033  __size_of_SendInstruction 0028  
                  ___wmul 798A                 ??___lwdiv 0005                 ??___lwmod 000D  
                  delay@i 0003                    delay@j 0005              __pdataCOMRAM 0054  
               ??_isdigit 0001              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ??_sprintf 0017  
              __accesstop 0060   __end_of__initialization 791E              ?_SPI_Receive 0001  
          __pcstackCOMRAM 0001             __end_of_delay 798A                   ??_delay 0003  
            sprintf@width 0025                 ?_SendData 0001                   ?___wmul 0001  
       ??_SendInstruction 0007                   _InitLCD 7928                   _InitSPI 785E  
              ??_SendData 0007                   __Hparam 0000                   __Lparam 0000  
         __size_of___wmul 003A                   ___lwdiv 7A0A                   ___lwmod 79C4  
            __psmallconst 0804                   __pcinit 78FE                   __ramtop 0800  
                 __ptext0 7A60                   __ptext1 7C7C                   __ptext2 78D4  
                 __ptext3 798A                   __ptext4 79C4                   __ptext5 7A0A  
                 __ptext6 78AC                   __ptext7 7848                   __ptext8 7836  
                 __ptext9 785E         __end_of_hexpowers 0817                   _dpowers 0805  
                 _isdigit 78D4                   _sprintf 7C7C      end_of_initialization 791E  
           __Lmediumconst 0000                   postdec1 000FE5                   postdec2 000FDD  
                 postinc0 000FEE                   postinc1 000FE6                   postinc2 000FDE  
    __size_of_SPI_Receive 0012                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94                 _TRISEbits 000F96            main@write_data 0029  
          __end_of___wmul 79C4             __pidataCOMRAM 782C             ?_SPI_Transmit 0001  
     start_initialization 78FE           _SendInstruction 7884         __size_of_SendData 0028  
                ??___wmul 0005            ??_SPI_Transmit 0001       __end_of__stringdata 085E  
            _isdigit$1028 0002               sprintf@_val 001F               sprintf@flag 0024  
             sprintf@prec 001E                  ?_InitLCD 0001                  ?_InitSPI 0001  
        ___lwdiv@dividend 0001           SendData@lcddata 0007                  ?___lwdiv 0001  
                ?___lwmod 0009    SendInstruction@command 0007               __smallconst 0804  
                ?_isdigit 0001                 _hexpowers 080F   __end_of_SendInstruction 78AC  
        ___lwdiv@quotient 0006            __size_of_delay 0036                  ?_sprintf 000F  
               delay@time 0001            ___wmul@product 0005                  _LATAbits 000F89  
                _LATEbits 000F8D                  _PIR1bits 000F9E                 main@F5333 0054  
             __stringdata 0817         ___wmul@multiplier 0001                 copy_data0 7912  
    __end_of_SPI_Transmit 785E                  _SendData 78AC          __size_of_InitLCD 002C  
        __size_of_InitSPI 0026                  __Hrparam 0000             ??_SPI_Receive 0001  
                __Lrparam 0000          __size_of___lwdiv 0056          __size_of___lwmod 0046  
              sprintf@idx 001B          __size_of_isdigit 002A           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0008                  __ptext10 7928                  __ptext11 7884  
                __ptext12 7954          ?_SendInstruction 0001          __size_of_sprintf 0384  
           __size_of_main 021C                  main@text 003D       __end_of_SPI_Receive 7848  
                isdigit@c 0003                 sprintf@ap 001C                 sprintf@sp 000F  
        ___lwmod@dividend 0009          SPI_Transmit@Data 0001                  sprintf@c 0027  
                sprintf@f 0011           ___lwmod@divisor 000B           ___lwmod@counter 000E  
             main@ADDRESS 004F               _SSPCON1bits 000FC6     __size_of_SPI_Transmit 0016  
