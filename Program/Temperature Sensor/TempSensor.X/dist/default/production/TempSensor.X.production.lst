

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Mon Feb 13 19:22:58 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           	psect	smallconst
    25  000804                     __psmallconst:
    26                           	opt stack 0
    27  000804  00                 	db	0
    28  000805                     _dpowers:
    29                           	opt stack 0
    30  000805  0001               	dw	1
    31  000807  000A               	dw	10
    32  000809  0064               	dw	100
    33  00080B  03E8               	dw	1000
    34  00080D  2710               	dw	10000
    35  00080F                     __end_of_dpowers:
    36                           	opt stack 0
    37  0000                     _ADRES	set	4035
    38  0000                     _ADCON0	set	4034
    39  0000                     _ADCON1	set	4033
    40  0000                     _ADCON2	set	4032
    41  0000                     _LATAbits	set	3977
    42  0000                     _LATB	set	3978
    43  0000                     _TRISAbits	set	3986
    44  0000                     _TRISB	set	3987
    45  0000                     _TRISEbits	set	3990
    46  0000                     _GODONE	set	32273
    47  0000                     _GO_DONE	set	32273
    48  00080F                     __stringdata:
    49                           	opt stack 0
    50  00080F                     STR_1:
    51  00080F  54                 	db	84	;'T'
    52  000810  65                 	db	101	;'e'
    53  000811  6D                 	db	109	;'m'
    54  000812  70                 	db	112	;'p'
    55  000813  65                 	db	101	;'e'
    56  000814  72                 	db	114	;'r'
    57  000815  61                 	db	97	;'a'
    58  000816  74                 	db	116	;'t'
    59  000817  75                 	db	117	;'u'
    60  000818  72                 	db	114	;'r'
    61  000819  65                 	db	101	;'e'
    62  00081A  3A                 	db	58	;':'
    63  00081B  00                 	db	0
    64  00081C                     STR_2:
    65  00081C  25                 	db	37
    66  00081D  64                 	db	100	;'d'
    67  00081E  27                 	db	39
    68  00081F  43                 	db	67	;'C'
    69  000820  20                 	db	32
    70  000821  20                 	db	32
    71  000822  00                 	db	0
    72  000823                     __end_of__stringdata:
    73                           	opt stack 0
    74  000823  00                 	db	0	; dummy byte at the end
    75  0000                     
    76                           ; #config settings
    77                           
    78                           	psect	cinit
    79  007BCA                     __pcinit:
    80                           	opt stack 0
    81  007BCA                     start_initialization:
    82                           	opt stack 0
    83  007BCA                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to COMRAM (16 bytes)
    87  007BCA  EE00  F029         	lfsr	0,__pbssCOMRAM
    88  007BCE  0E10               	movlw	16
    89  007BD0                     clear_0:
    90  007BD0  6AEE               	clrf	postinc0,c
    91  007BD2  06E8               	decf	wreg,f,c
    92  007BD4  E1FD               	bnz	clear_0
    93  007BD6                     end_of_initialization:
    94                           	opt stack 0
    95  007BD6                     __end_of__initialization:
    96                           	opt stack 0
    97  007BD6  0E00               	movlw	low (__Lmediumconst shr (0+16))
    98  007BD8  6EF8               	movwf	tblptru,c
    99  007BDA  0100               	movlb	0
   100  007BDC  EFF9  F03E         	goto	_main	;jump to C main() function
   101                           tblptru	equ	0xFF8
   102                           postinc0	equ	0xFEE
   103                           wreg	equ	0xFE8
   104                           
   105                           	psect	bssCOMRAM
   106  000029                     __pbssCOMRAM:
   107                           	opt stack 0
   108  000029                     _str:
   109                           	opt stack 0
   110  000029                     	ds	16
   111                           tblptru	equ	0xFF8
   112                           postinc0	equ	0xFEE
   113                           wreg	equ	0xFE8
   114                           
   115                           	psect	cstackCOMRAM
   116  000001                     __pcstackCOMRAM:
   117                           	opt stack 0
   118  000001                     ?_Read_ADC:
   119                           	opt stack 0
   120  000001                     ?___wmul:
   121                           	opt stack 0
   122  000001                     lcd_delay@time:
   123                           	opt stack 0
   124  000001                     ___wmul@multiplier:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x0
   128  000001                     	ds	2
   129  000003                     Read_ADC@Ch:
   130                           	opt stack 0
   131  000003                     lcd_delay@i:
   132                           	opt stack 0
   133  000003                     ___wmul@multiplicand:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x2
   137  000003                     	ds	2
   138  000005                     lcd_delay@j:
   139                           	opt stack 0
   140  000005                     ___wmul@product:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x4
   144  000005                     	ds	2
   145  000007                     ?___lwdiv:
   146                           	opt stack 0
   147  000007                     SendInstruction@command:
   148                           	opt stack 0
   149  000007                     SendData@lcddata:
   150                           	opt stack 0
   151  000007                     ___lwdiv@dividend:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x6
   155  000007                     	ds	1
   156  000008                     LCD_display@row:
   157                           	opt stack 0
   158                           
   159                           ; 2 bytes @ 0x7
   160  000008                     	ds	1
   161  000009                     ___lwdiv@divisor:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x8
   165  000009                     	ds	1
   166  00000A                     LCD_display@pos:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0x9
   170  00000A                     	ds	1
   171  00000B                     ??___lwdiv:
   172                           
   173                           ; 0 bytes @ 0xA
   174  00000B                     	ds	1
   175  00000C                     LCD_display@ch:
   176                           	opt stack 0
   177  00000C                     ___lwdiv@quotient:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0xB
   181  00000C                     	ds	2
   182  00000E                     ___lwdiv@counter:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0xD
   186  00000E                     	ds	1
   187  00000F                     ?___lwmod:
   188                           	opt stack 0
   189  00000F                     ___lwmod@dividend:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0xE
   193  00000F                     	ds	2
   194  000011                     ___lwmod@divisor:
   195                           	opt stack 0
   196                           
   197                           ; 2 bytes @ 0x10
   198  000011                     	ds	2
   199  000013                     ??___lwmod:
   200                           
   201                           ; 0 bytes @ 0x12
   202  000013                     	ds	1
   203  000014                     ___lwmod@counter:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x13
   207  000014                     	ds	1
   208  000015                     ?_sprintf:
   209                           	opt stack 0
   210  000015                     sprintf@sp:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x14
   214  000015                     	ds	2
   215  000017                     sprintf@f:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x16
   219  000017                     	ds	4
   220  00001B                     ??_sprintf:
   221                           
   222                           ; 0 bytes @ 0x1A
   223  00001B                     	ds	2
   224  00001D                     sprintf@ap:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x1C
   228  00001D                     	ds	2
   229  00001F                     sprintf@flag:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x1E
   233  00001F                     	ds	1
   234  000020                     sprintf@prec:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x1F
   238  000020                     	ds	1
   239  000021                     sprintf@_val:
   240                           	opt stack 0
   241                           
   242                           ; 5 bytes @ 0x20
   243  000021                     	ds	5
   244  000026                     sprintf@c:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x25
   248  000026                     	ds	1
   249  000027                     main@temp:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x26
   253  000027                     	ds	2
   254                           tblptru	equ	0xFF8
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           
   258 ;;
   259 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   260 ;;
   261 ;; *************** function _main *****************
   262 ;; Defined at:
   263 ;;		line 91 in file "main.c"
   264 ;; Parameters:    Size  Location     Type
   265 ;;		None
   266 ;; Auto vars:     Size  Location     Type
   267 ;;  temp            2   38[COMRAM] unsigned int 
   268 ;; Return value:  Size  Location     Type
   269 ;;                  2   62[COMRAM] int 
   270 ;; Registers used:
   271 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   272 ;; Tracked objects:
   273 ;;		On entry : 0/0
   274 ;;		On exit  : 0/0
   275 ;;		Unchanged: 0/0
   276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   277 ;;      Params:         0       0       0       0       0       0       0       0       0
   278 ;;      Locals:         2       0       0       0       0       0       0       0       0
   279 ;;      Temps:          0       0       0       0       0       0       0       0       0
   280 ;;      Totals:         2       0       0       0       0       0       0       0       0
   281 ;;Total ram usage:        2 bytes
   282 ;; Hardware stack levels required when called:    3
   283 ;; This function calls:
   284 ;;		_ADCInit
   285 ;;		_InitLCD
   286 ;;		_LCD_display
   287 ;;		_Read_ADC
   288 ;;		___lwdiv
   289 ;;		___wmul
   290 ;;		_lcd_delay
   291 ;;		_sprintf
   292 ;; This function is called by:
   293 ;;		Startup code after reset
   294 ;; This function uses a non-reentrant model
   295 ;;
   296                           
   297                           	psect	text0
   298  007DF2                     __ptext0:
   299                           	opt stack 0
   300  007DF2                     _main:
   301                           	opt stack 28
   302                           
   303                           ;main.c: 93: unsigned int temp;
   304                           ;main.c: 94: InitLCD();
   305                           
   306                           ;incstack = 0
   307  007DF2  EC27  F03E         	call	_InitLCD	;wreg free
   308                           
   309                           ;main.c: 95: ADCInit();
   310  007DF6  ECDE  F03D         	call	_ADCInit	;wreg free
   311                           
   312                           ;main.c: 96: LCD_display(1,1,"Temperature:");
   313  007DFA  0E00               	movlw	0
   314  007DFC  6E09               	movwf	LCD_display@row+1,c
   315  007DFE  0E01               	movlw	1
   316  007E00  6E08               	movwf	LCD_display@row,c
   317  007E02  0E00               	movlw	0
   318  007E04  6E0B               	movwf	LCD_display@pos+1,c
   319  007E06  0E01               	movlw	1
   320  007E08  6E0A               	movwf	LCD_display@pos,c
   321  007E0A  0E08               	movlw	high STR_1
   322  007E0C  6E0D               	movwf	LCD_display@ch+1,c
   323  007E0E  0E0F               	movlw	low STR_1
   324  007E10  6E0C               	movwf	LCD_display@ch,c
   325  007E12  ECC3  F03E         	call	_LCD_display	;wreg free
   326  007E16                     l928:
   327                           
   328                           ;main.c: 98: {
   329                           ;main.c: 99: temp = Read_ADC(7);
   330  007E16  0E07               	movlw	7
   331  007E18  ECF0  F03D         	call	_Read_ADC
   332  007E1C  C001  F027         	movff	?_Read_ADC,main@temp
   333  007E20  C002  F028         	movff	?_Read_ADC+1,main@temp+1
   334                           
   335                           ;main.c: 100: temp = ((temp * 500) / 1023);
   336  007E24  0E01               	movlw	1
   337  007E26  6E04               	movwf	___wmul@multiplicand+1,c
   338  007E28  0EF4               	movlw	244
   339  007E2A  6E03               	movwf	___wmul@multiplicand,c
   340  007E2C  C027  F001         	movff	main@temp,___wmul@multiplier
   341  007E30  C028  F002         	movff	main@temp+1,___wmul@multiplier+1
   342  007E34  EC58  F03E         	call	___wmul	;wreg free
   343  007E38  C001  F007         	movff	?___wmul,___lwdiv@dividend
   344  007E3C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   345  007E40  0E03               	movlw	3
   346  007E42  6E0A               	movwf	___lwdiv@divisor+1,c
   347  007E44  0EFF               	movlw	255
   348  007E46  6E09               	movwf	___lwdiv@divisor,c
   349  007E48  EC98  F03E         	call	___lwdiv	;wreg free
   350  007E4C  C007  F027         	movff	?___lwdiv,main@temp
   351  007E50  C008  F028         	movff	?___lwdiv+1,main@temp+1
   352                           
   353                           ;main.c: 101: sprintf(str,"%d'C  ",temp);
   354  007E54  0E00               	movlw	high _str
   355  007E56  6E16               	movwf	sprintf@sp+1,c
   356  007E58  0E29               	movlw	low _str
   357  007E5A  6E15               	movwf	sprintf@sp,c
   358  007E5C  0E08               	movlw	high STR_2
   359  007E5E  6E18               	movwf	sprintf@f+1,c
   360  007E60  0E1C               	movlw	low STR_2
   361  007E62  6E17               	movwf	sprintf@f,c
   362  007E64  C027  F019         	movff	main@temp,?_sprintf+4
   363  007E68  C028  F01A         	movff	main@temp+1,?_sprintf+5
   364  007E6C  EC4D  F03F         	call	_sprintf	;wreg free
   365                           
   366                           ;main.c: 102: LCD_display(2,1,str);
   367  007E70  0E00               	movlw	0
   368  007E72  6E09               	movwf	LCD_display@row+1,c
   369  007E74  0E02               	movlw	2
   370  007E76  6E08               	movwf	LCD_display@row,c
   371  007E78  0E00               	movlw	0
   372  007E7A  6E0B               	movwf	LCD_display@pos+1,c
   373  007E7C  0E01               	movlw	1
   374  007E7E  6E0A               	movwf	LCD_display@pos,c
   375  007E80  0E00               	movlw	high _str
   376  007E82  6E0D               	movwf	LCD_display@ch+1,c
   377  007E84  0E29               	movlw	low _str
   378  007E86  6E0C               	movwf	LCD_display@ch,c
   379  007E88  ECC3  F03E         	call	_LCD_display	;wreg free
   380                           
   381                           ;main.c: 103: lcd_delay(5000);
   382  007E8C  0E13               	movlw	19
   383  007E8E  6E02               	movwf	lcd_delay@time+1,c
   384  007E90  0E88               	movlw	136
   385  007E92  6E01               	movwf	lcd_delay@time,c
   386  007E94  EC3D  F03E         	call	_lcd_delay	;wreg free
   387  007E98  D7BE               	goto	l928
   388  007E9A                     __end_of_main:
   389                           	opt stack 0
   390                           tblptru	equ	0xFF8
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394 ;; *************** function _sprintf *****************
   395 ;; Defined at:
   396 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\doprnt.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  sp              2   20[COMRAM] PTR unsigned char 
   399 ;;		 -> str(16), 
   400 ;;  f               2   22[COMRAM] PTR const unsigned char 
   401 ;;		 -> STR_2(7), 
   402 ;; Auto vars:     Size  Location     Type
   403 ;;  _val            5   32[COMRAM] struct .
   404 ;;  ap              2   28[COMRAM] PTR void [1]
   405 ;;		 -> ?_sprintf(2), 
   406 ;;  c               1   37[COMRAM] char 
   407 ;;  prec            1   31[COMRAM] char 
   408 ;;  flag            1   30[COMRAM] unsigned char 
   409 ;; Return value:  Size  Location     Type
   410 ;;                  2   20[COMRAM] int 
   411 ;; Registers used:
   412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   418 ;;      Params:         6       0       0       0       0       0       0       0       0
   419 ;;      Locals:        10       0       0       0       0       0       0       0       0
   420 ;;      Temps:          2       0       0       0       0       0       0       0       0
   421 ;;      Totals:        18       0       0       0       0       0       0       0       0
   422 ;;Total ram usage:       18 bytes
   423 ;; Hardware stack levels used:    1
   424 ;; Hardware stack levels required when called:    1
   425 ;; This function calls:
   426 ;;		___lwdiv
   427 ;;		___lwmod
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text1
   434  007E9A                     __ptext1:
   435                           	opt stack 0
   436  007E9A                     _sprintf:
   437                           	opt stack 29
   438                           
   439                           ;doprnt.c: 494: va_list ap;
   440                           ;doprnt.c: 499: signed char c;
   441                           ;doprnt.c: 506: signed char prec;
   442                           ;doprnt.c: 508: unsigned char flag;
   443                           ;doprnt.c: 527: union {
   444                           ;doprnt.c: 528: unsigned int _val;
   445                           ;doprnt.c: 529: struct {
   446                           ;doprnt.c: 530: const char * _cp;
   447                           ;doprnt.c: 531: unsigned _len;
   448                           ;doprnt.c: 532: } _str;
   449                           ;doprnt.c: 533: } _val;
   450                           ;doprnt.c: 542: *ap = __va_start();
   451                           
   452                           ;incstack = 0
   453  007E9A  0E00               	movlw	high (?_sprintf+4)
   454  007E9C  6E1E               	movwf	sprintf@ap+1,c
   455  007E9E  0E19               	movlw	low (?_sprintf+4)
   456  007EA0  6E1D               	movwf	sprintf@ap,c
   457                           
   458                           ;doprnt.c: 545: while(c = *f++) {
   459  007EA2  D09C               	goto	l916
   460  007EA4                     l864:
   461                           
   462                           ;doprnt.c: 547: if(c != '%')
   463  007EA4  5026               	movf	sprintf@c,w,c
   464  007EA6  0A25               	xorlw	37
   465  007EA8  B4D8               	btfsc	status,2,c
   466  007EAA  D009               	goto	l870
   467                           
   468                           ;doprnt.c: 549: {
   469                           ;doprnt.c: 550: ((*sp++ = (c)));
   470  007EAC  C015  FFD9         	movff	sprintf@sp,fsr2l
   471  007EB0  C016  FFDA         	movff	sprintf@sp+1,fsr2h
   472  007EB4  C026  FFDF         	movff	sprintf@c,indf2
   473  007EB8  4A15               	infsnz	sprintf@sp,f,c
   474  007EBA  2A16               	incf	sprintf@sp+1,f,c
   475                           
   476                           ;doprnt.c: 551: continue;
   477  007EBC  D08F               	goto	l916
   478  007EBE                     l870:
   479                           
   480                           ;doprnt.c: 552: }
   481                           ;doprnt.c: 557: flag = 0;
   482  007EBE  6E1B               	movwf	??_sprintf& (0+255),c
   483  007EC0  0E00               	movlw	0
   484  007EC2  6E1F               	movwf	sprintf@flag,c
   485  007EC4  501B               	movf	??_sprintf& (0+255),w,c
   486                           
   487                           ;doprnt.c: 831: }
   488                           
   489                           ;doprnt.c: 822: continue;
   490                           
   491                           ;doprnt.c: 811: default:
   492                           
   493                           ;doprnt.c: 707: case 'i':
   494                           ;doprnt.c: 708: break;
   495                           
   496                           ;doprnt.c: 706: case 'd':
   497                           
   498                           ;doprnt.c: 647: goto alldone;
   499                           
   500                           ;doprnt.c: 646: case 0:
   501                           
   502                           ;doprnt.c: 644: switch(c = *f++) {
   503  007EC6  C017  FFF6         	movff	sprintf@f,tblptrl
   504  007ECA  C018  FFF7         	movff	sprintf@f+1,tblptrh
   505  007ECE  4A17               	infsnz	sprintf@f,f,c
   506  007ED0  2A18               	incf	sprintf@f+1,f,c
   507  007ED2  0008               	tblrd		*
   508  007ED4  CFF5 F026          	movff	tablat,sprintf@c
   509  007ED8  5026               	movf	sprintf@c& (0+255),w,c
   510                           
   511                           ; Switch size 1, requested type "space"
   512                           ; Number of cases is 3, Range of values is 0 to 105
   513                           ; switch strategies available:
   514                           ; Name         Instructions Cycles
   515                           ; simple_byte           10     6 (average)
   516                           ;	Chosen strategy is simple_byte
   517  007EDA  0A00               	xorlw	0	; case 0
   518  007EDC  B4D8               	btfsc	status,2,c
   519  007EDE  D089               	goto	l918
   520  007EE0  0A64               	xorlw	100	; case 100
   521  007EE2  B4D8               	btfsc	status,2,c
   522  007EE4  D003               	goto	l876
   523  007EE6  0A0D               	xorlw	13	; case 105
   524  007EE8  A4D8               	btfss	status,2,c
   525  007EEA  D078               	goto	l916
   526  007EEC                     l876:
   527                           
   528                           ;doprnt.c: 1262: {
   529                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   530  007EEC  C01D  FFD9         	movff	sprintf@ap,fsr2l
   531  007EF0  C01E  FFDA         	movff	sprintf@ap+1,fsr2h
   532  007EF4  CFDE F021          	movff	postinc2,sprintf@_val
   533  007EF8  CFDD F022          	movff	postdec2,sprintf@_val+1
   534  007EFC  0E02               	movlw	2
   535  007EFE  261D               	addwf	sprintf@ap,f,c
   536  007F00  0E00               	movlw	0
   537  007F02  221E               	addwfc	sprintf@ap+1,f,c
   538                           
   539                           ;doprnt.c: 1270: if((int)_val._val < 0) {
   540  007F04  5022               	movf	sprintf@_val+1,w,c
   541  007F06  0A80               	xorlw	128
   542  007F08  6EF3               	movwf	prodl,c
   543  007F0A  0E80               	movlw	128
   544  007F0C  5CF3               	subwf	prodl,w,c
   545  007F0E  0E00               	movlw	0
   546  007F10  B4D8               	btfsc	status,2,c
   547  007F12  5C21               	subwf	sprintf@_val,w,c
   548  007F14  B0D8               	btfsc	status,0,c
   549  007F16  D006               	goto	l886
   550                           
   551                           ;doprnt.c: 1271: flag |= 0x03;
   552  007F18  0E03               	movlw	3
   553  007F1A  121F               	iorwf	sprintf@flag,f,c
   554                           
   555                           ;doprnt.c: 1272: _val._val = -_val._val;
   556  007F1C  6C21               	negf	sprintf@_val,c
   557  007F1E  1E22               	comf	sprintf@_val+1,f,c
   558  007F20  B0D8               	btfsc	status,0,c
   559  007F22  2A22               	incf	sprintf@_val+1,f,c
   560  007F24                     l886:
   561                           
   562                           ;doprnt.c: 1273: }
   563                           ;doprnt.c: 1275: }
   564                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   565  007F24  6E1B               	movwf	??_sprintf& (0+255),c
   566  007F26  0E01               	movlw	1
   567  007F28  6E26               	movwf	sprintf@c,c
   568  007F2A  501B               	movf	??_sprintf& (0+255),w,c
   569  007F2C  5026               	movf	sprintf@c,w,c
   570  007F2E  0A05               	xorlw	5
   571  007F30  B4D8               	btfsc	status,2,c
   572  007F32  D016               	goto	l900
   573                           
   574                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
   575  007F34  5026               	movf	sprintf@c,w,c
   576  007F36  0D02               	mullw	2
   577  007F38  0E05               	movlw	low _dpowers
   578  007F3A  24F3               	addwf	prodl,w,c
   579  007F3C  6EF6               	movwf	tblptrl,c
   580  007F3E  0E08               	movlw	high _dpowers
   581  007F40  20F4               	addwfc	prodh,w,c
   582  007F42  6EF7               	movwf	tblptrh,c
   583  007F44  0009               	tblrd		*+
   584  007F46  CFF5 F01B          	movff	tablat,??_sprintf
   585  007F4A  0009               	tblrd		*+
   586  007F4C  CFF5 F01C          	movff	tablat,??_sprintf+1
   587  007F50  501B               	movf	??_sprintf,w,c
   588  007F52  5C21               	subwf	sprintf@_val,w,c
   589  007F54  501C               	movf	??_sprintf+1,w,c
   590  007F56  5822               	subwfb	sprintf@_val+1,w,c
   591  007F58  A0D8               	btfss	status,0,c
   592  007F5A  D002               	goto	l900
   593                           
   594                           ;doprnt.c: 1316: break;
   595  007F5C  2A26               	incf	sprintf@c,f,c
   596  007F5E  D7E6               	goto	L1
   597  007F60                     l900:
   598                           
   599                           ;doprnt.c: 1431: {
   600                           ;doprnt.c: 1447: if(flag & 0x03)
   601  007F60  C01F  F01B         	movff	sprintf@flag,??_sprintf
   602  007F64  0E03               	movlw	3
   603  007F66  161B               	andwf	??_sprintf,f,c
   604  007F68  B4D8               	btfsc	status,2,c
   605  007F6A  D008               	goto	l906
   606                           
   607                           ;doprnt.c: 1448: ((*sp++ = ('-')));
   608  007F6C  C015  FFD9         	movff	sprintf@sp,fsr2l
   609  007F70  C016  FFDA         	movff	sprintf@sp+1,fsr2h
   610  007F74  0E2D               	movlw	45
   611  007F76  6EDF               	movwf	indf2,c
   612  007F78  4A15               	infsnz	sprintf@sp,f,c
   613  007F7A  2A16               	incf	sprintf@sp+1,f,c
   614  007F7C                     l906:
   615                           
   616                           ;doprnt.c: 1478: }
   617                           ;doprnt.c: 1481: prec = c;
   618  007F7C  C026  F020         	movff	sprintf@c,sprintf@prec
   619                           
   620                           ;doprnt.c: 1483: while(prec--) {
   621  007F80  D029               	goto	l914
   622  007F82                     l908:
   623                           
   624                           ;doprnt.c: 1487: {
   625                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
   626  007F82  5020               	movf	sprintf@prec,w,c
   627  007F84  0D02               	mullw	2
   628  007F86  0E05               	movlw	low _dpowers
   629  007F88  24F3               	addwf	prodl,w,c
   630  007F8A  6EF6               	movwf	tblptrl,c
   631  007F8C  0E08               	movlw	high _dpowers
   632  007F8E  20F4               	addwfc	prodh,w,c
   633  007F90  6EF7               	movwf	tblptrh,c
   634  007F92  0009               	tblrd		*+
   635  007F94  CFF5 F009          	movff	tablat,___lwdiv@divisor
   636  007F98  000A               	tblrd		*-
   637  007F9A  CFF5 F00A          	movff	tablat,___lwdiv@divisor+1
   638  007F9E  C021  F007         	movff	sprintf@_val,___lwdiv@dividend
   639  007FA2  C022  F008         	movff	sprintf@_val+1,___lwdiv@dividend+1
   640  007FA6  EC98  F03E         	call	___lwdiv	;wreg free
   641  007FAA  C007  F00F         	movff	?___lwdiv,___lwmod@dividend
   642  007FAE  C008  F010         	movff	?___lwdiv+1,___lwmod@dividend+1
   643  007FB2  0E00               	movlw	0
   644  007FB4  6E12               	movwf	___lwmod@divisor+1,c
   645  007FB6  0E0A               	movlw	10
   646  007FB8  6E11               	movwf	___lwmod@divisor,c
   647  007FBA  EC75  F03E         	call	___lwmod	;wreg free
   648  007FBE  500F               	movf	?___lwmod,w,c
   649  007FC0  0F30               	addlw	48
   650  007FC2  6E26               	movwf	sprintf@c,c
   651                           
   652                           ;doprnt.c: 1532: }
   653                           ;doprnt.c: 1533: ((*sp++ = (c)));
   654  007FC4  C015  FFD9         	movff	sprintf@sp,fsr2l
   655  007FC8  C016  FFDA         	movff	sprintf@sp+1,fsr2h
   656  007FCC  C026  FFDF         	movff	sprintf@c,indf2
   657  007FD0  4A15               	infsnz	sprintf@sp,f,c
   658  007FD2  2A16               	incf	sprintf@sp+1,f,c
   659  007FD4                     l914:
   660  007FD4  0620               	decf	sprintf@prec,f,c
   661  007FD6  2820               	incf	sprintf@prec& (0+255),w,c
   662  007FD8  A4D8               	btfss	status,2,c
   663  007FDA  D7D3               	goto	l908
   664  007FDC                     l916:
   665  007FDC  C017  FFF6         	movff	sprintf@f,tblptrl
   666  007FE0  C018  FFF7         	movff	sprintf@f+1,tblptrh
   667  007FE4  4A17               	infsnz	sprintf@f,f,c
   668  007FE6  2A18               	incf	sprintf@f+1,f,c
   669  007FE8  0008               	tblrd		*
   670  007FEA  CFF5 F026          	movff	tablat,sprintf@c
   671  007FEE  6626               	tstfsz	sprintf@c& (0+255),c
   672  007FF0  D759               	goto	l864
   673  007FF2                     l918:
   674                           
   675                           ;doprnt.c: 1547: *sp = 0;
   676  007FF2  C015  FFD9         	movff	sprintf@sp,fsr2l
   677  007FF6  C016  FFDA         	movff	sprintf@sp+1,fsr2h
   678  007FFA  0E00               	movlw	0
   679  007FFC  6EDF               	movwf	indf2,c
   680                           
   681                           ;doprnt.c: 1549: return 0;
   682                           ;	Return value of _sprintf is never used
   683  007FFE  0012               	return	
   684  008000                     __end_of_sprintf:
   685                           	opt stack 0
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           indf2	equ	0xFDF
   695                           postinc2	equ	0xFDE
   696                           postdec2	equ	0xFDD
   697                           fsr2h	equ	0xFDA
   698                           fsr2l	equ	0xFD9
   699                           status	equ	0xFD8
   700                           
   701 ;; *************** function ___lwmod *****************
   702 ;; Defined at:
   703 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\lwmod.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;  dividend        2   14[COMRAM] unsigned int 
   706 ;;  divisor         2   16[COMRAM] unsigned int 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  counter         1   19[COMRAM] unsigned char 
   709 ;; Return value:  Size  Location     Type
   710 ;;                  2   14[COMRAM] unsigned int 
   711 ;; Registers used:
   712 ;;		wreg, status,2, status,0
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   718 ;;      Params:         4       0       0       0       0       0       0       0       0
   719 ;;      Locals:         1       0       0       0       0       0       0       0       0
   720 ;;      Temps:          1       0       0       0       0       0       0       0       0
   721 ;;      Totals:         6       0       0       0       0       0       0       0       0
   722 ;;Total ram usage:        6 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_sprintf
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text2
   732  007CEA                     __ptext2:
   733                           	opt stack 0
   734  007CEA                     ___lwmod:
   735                           	opt stack 29
   736                           
   737                           ;incstack = 0
   738  007CEA  5012               	movf	___lwmod@divisor+1,w,c
   739  007CEC  1011               	iorwf	___lwmod@divisor,w,c
   740  007CEE  B4D8               	btfsc	status,2,c
   741  007CF0  D01A               	goto	l610
   742  007CF2  6E13               	movwf	??___lwmod& (0+255),c
   743  007CF4  0E01               	movlw	1
   744  007CF6  6E14               	movwf	___lwmod@counter,c
   745  007CF8  5013               	movf	??___lwmod& (0+255),w,c
   746  007CFA  D004               	goto	l852
   747  007CFC                     l850:
   748  007CFC  90D8               	bcf	status,0,c
   749  007CFE  3611               	rlcf	___lwmod@divisor,f,c
   750  007D00  3612               	rlcf	___lwmod@divisor+1,f,c
   751  007D02  2A14               	incf	___lwmod@counter,f,c
   752  007D04                     l852:
   753  007D04  AE12               	btfss	___lwmod@divisor+1,7,c
   754  007D06  D7FA               	goto	l850
   755  007D08                     l854:
   756  007D08  5011               	movf	___lwmod@divisor,w,c
   757  007D0A  5C0F               	subwf	___lwmod@dividend,w,c
   758  007D0C  5012               	movf	___lwmod@divisor+1,w,c
   759  007D0E  5810               	subwfb	___lwmod@dividend+1,w,c
   760  007D10  A0D8               	btfss	status,0,c
   761  007D12  D004               	goto	l858
   762  007D14  5011               	movf	___lwmod@divisor,w,c
   763  007D16  5E0F               	subwf	___lwmod@dividend,f,c
   764  007D18  5012               	movf	___lwmod@divisor+1,w,c
   765  007D1A  5A10               	subwfb	___lwmod@dividend+1,f,c
   766  007D1C                     l858:
   767  007D1C  90D8               	bcf	status,0,c
   768  007D1E  3212               	rrcf	___lwmod@divisor+1,f,c
   769  007D20  3211               	rrcf	___lwmod@divisor,f,c
   770  007D22  2E14               	decfsz	___lwmod@counter,f,c
   771  007D24  D7F1               	goto	l854
   772  007D26                     l610:
   773  007D26  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
   774  007D2A  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
   775  007D2E  0012               	return	
   776  007D30                     __end_of___lwmod:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           prodh	equ	0xFF4
   783                           prodl	equ	0xFF3
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           indf2	equ	0xFDF
   787                           postinc2	equ	0xFDE
   788                           postdec2	equ	0xFDD
   789                           fsr2h	equ	0xFDA
   790                           fsr2l	equ	0xFD9
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function ___lwdiv *****************
   794 ;; Defined at:
   795 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\lwdiv.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  dividend        2    6[COMRAM] unsigned int 
   798 ;;  divisor         2    8[COMRAM] unsigned int 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  quotient        2   11[COMRAM] unsigned int 
   801 ;;  counter         1   13[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  2    6[COMRAM] unsigned int 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         4       0       0       0       0       0       0       0       0
   812 ;;      Locals:         3       0       0       0       0       0       0       0       0
   813 ;;      Temps:          1       0       0       0       0       0       0       0       0
   814 ;;      Totals:         8       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        8 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_main
   821 ;;		_sprintf
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text3
   826  007D30                     __ptext3:
   827                           	opt stack 0
   828  007D30                     ___lwdiv:
   829                           	opt stack 29
   830                           
   831                           ;incstack = 0
   832  007D30  0E00               	movlw	0
   833  007D32  6E0D               	movwf	___lwdiv@quotient+1,c
   834  007D34  0E00               	movlw	0
   835  007D36  6E0C               	movwf	___lwdiv@quotient,c
   836  007D38  500A               	movf	___lwdiv@divisor+1,w,c
   837  007D3A  1009               	iorwf	___lwdiv@divisor,w,c
   838  007D3C  B4D8               	btfsc	status,2,c
   839  007D3E  D01E               	goto	l600
   840  007D40  6E0B               	movwf	??___lwdiv& (0+255),c
   841  007D42  0E01               	movlw	1
   842  007D44  6E0E               	movwf	___lwdiv@counter,c
   843  007D46  500B               	movf	??___lwdiv& (0+255),w,c
   844  007D48  D004               	goto	l804
   845  007D4A                     l802:
   846  007D4A  90D8               	bcf	status,0,c
   847  007D4C  3609               	rlcf	___lwdiv@divisor,f,c
   848  007D4E  360A               	rlcf	___lwdiv@divisor+1,f,c
   849  007D50  2A0E               	incf	___lwdiv@counter,f,c
   850  007D52                     l804:
   851  007D52  AE0A               	btfss	___lwdiv@divisor+1,7,c
   852  007D54  D7FA               	goto	l802
   853  007D56                     l806:
   854  007D56  90D8               	bcf	status,0,c
   855  007D58  360C               	rlcf	___lwdiv@quotient,f,c
   856  007D5A  360D               	rlcf	___lwdiv@quotient+1,f,c
   857  007D5C  5009               	movf	___lwdiv@divisor,w,c
   858  007D5E  5C07               	subwf	___lwdiv@dividend,w,c
   859  007D60  500A               	movf	___lwdiv@divisor+1,w,c
   860  007D62  5808               	subwfb	___lwdiv@dividend+1,w,c
   861  007D64  A0D8               	btfss	status,0,c
   862  007D66  D005               	goto	l814
   863  007D68  5009               	movf	___lwdiv@divisor,w,c
   864  007D6A  5E07               	subwf	___lwdiv@dividend,f,c
   865  007D6C  500A               	movf	___lwdiv@divisor+1,w,c
   866  007D6E  5A08               	subwfb	___lwdiv@dividend+1,f,c
   867  007D70  800C               	bsf	___lwdiv@quotient,0,c
   868  007D72                     l814:
   869  007D72  90D8               	bcf	status,0,c
   870  007D74  320A               	rrcf	___lwdiv@divisor+1,f,c
   871  007D76  3209               	rrcf	___lwdiv@divisor,f,c
   872  007D78  2E0E               	decfsz	___lwdiv@counter,f,c
   873  007D7A  D7ED               	goto	l806
   874  007D7C                     l600:
   875  007D7C  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
   876  007D80  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
   877  007D84  0012               	return	
   878  007D86                     __end_of___lwdiv:
   879                           	opt stack 0
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           prodh	equ	0xFF4
   885                           prodl	equ	0xFF3
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           indf2	equ	0xFDF
   889                           postinc2	equ	0xFDE
   890                           postdec2	equ	0xFDD
   891                           fsr2h	equ	0xFDA
   892                           fsr2l	equ	0xFD9
   893                           status	equ	0xFD8
   894                           
   895 ;; *************** function ___wmul *****************
   896 ;; Defined at:
   897 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\wmul.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  multiplier      2    0[COMRAM] unsigned int 
   900 ;;  multiplicand    2    2[COMRAM] unsigned int 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  product         2    4[COMRAM] unsigned int 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2    0[COMRAM] unsigned int 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, prodl, prodh
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   912 ;;      Params:         4       0       0       0       0       0       0       0       0
   913 ;;      Locals:         2       0       0       0       0       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0       0       0       0       0
   915 ;;      Totals:         6       0       0       0       0       0       0       0       0
   916 ;;Total ram usage:        6 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text4
   926  007CB0                     __ptext4:
   927                           	opt stack 0
   928  007CB0                     ___wmul:
   929                           	opt stack 30
   930                           
   931                           ;incstack = 0
   932  007CB0  5001               	movf	___wmul@multiplier,w,c
   933  007CB2  0203               	mulwf	___wmul@multiplicand,c
   934  007CB4  CFF3 F005          	movff	prodl,___wmul@product
   935  007CB8  CFF4 F006          	movff	prodh,___wmul@product+1
   936  007CBC  5001               	movf	___wmul@multiplier,w,c
   937  007CBE  0204               	mulwf	___wmul@multiplicand+1,c
   938  007CC0  CFF3 FFF4          	movff	prodl,prodh
   939  007CC4  6AF3               	clrf	prodl,c
   940  007CC6  50F3               	movf	prodl,w,c
   941  007CC8  2605               	addwf	___wmul@product,f,c
   942  007CCA  50F4               	movf	prodh,w,c
   943  007CCC  2206               	addwfc	___wmul@product+1,f,c
   944  007CCE  5002               	movf	___wmul@multiplier+1,w,c
   945  007CD0  0203               	mulwf	___wmul@multiplicand,c
   946  007CD2  CFF3 FFF4          	movff	prodl,prodh
   947  007CD6  6AF3               	clrf	prodl,c
   948  007CD8  50F3               	movf	prodl,w,c
   949  007CDA  2605               	addwf	___wmul@product,f,c
   950  007CDC  50F4               	movf	prodh,w,c
   951  007CDE  2206               	addwfc	___wmul@product+1,f,c
   952  007CE0  C005  F001         	movff	___wmul@product,?___wmul
   953  007CE4  C006  F002         	movff	___wmul@product+1,?___wmul+1
   954  007CE8  0012               	return	
   955  007CEA                     __end_of___wmul:
   956                           	opt stack 0
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           prodh	equ	0xFF4
   962                           prodl	equ	0xFF3
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           indf2	equ	0xFDF
   966                           postinc2	equ	0xFDE
   967                           postdec2	equ	0xFDD
   968                           fsr2h	equ	0xFDA
   969                           fsr2l	equ	0xFD9
   970                           status	equ	0xFD8
   971                           
   972 ;; *************** function _Read_ADC *****************
   973 ;; Defined at:
   974 ;;		line 82 in file "main.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  Ch              1    wreg     unsigned char 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  Ch              1    2[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2    0[COMRAM] unsigned short 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         2       0       0       0       0       0       0       0       0
   989 ;;      Locals:         1       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0
   991 ;;      Totals:         3       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        3 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; This function calls:
   995 ;;		Nothing
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text5
  1002  007BE0                     __ptext5:
  1003                           	opt stack 0
  1004  007BE0                     _Read_ADC:
  1005                           	opt stack 30
  1006                           
  1007                           ;incstack = 0
  1008                           ;Read_ADC@Ch stored from wreg
  1009  007BE0  CFE8 F003          	movff	wreg,Read_ADC@Ch
  1010                           
  1011                           ;main.c: 84: ADCON0 = 0b00000001 | (Ch<<2);
  1012  007BE4  4403               	rlncf	Read_ADC@Ch,w,c
  1013  007BE6  46E8               	rlncf	wreg,f,c
  1014  007BE8  0BFC               	andlw	252
  1015  007BEA  0901               	iorlw	1
  1016  007BEC  6EC2               	movwf	4034,c	;volatile
  1017                           
  1018                           ;main.c: 85: GODONE = 1;
  1019  007BEE  82C2               	bsf	4034,1,c	;volatile
  1020  007BF0                     l57:
  1021  007BF0  B2C2               	btfsc	4034,1,c	;volatile
  1022  007BF2  D7FE               	goto	l57
  1023                           
  1024                           ;main.c: 88: return ADRES;
  1025  007BF4  CFC3 F001          	movff	4035,?_Read_ADC	;volatile
  1026  007BF8  CFC4 F002          	movff	4036,?_Read_ADC+1	;volatile
  1027  007BFC  0012               	return	
  1028  007BFE                     __end_of_Read_ADC:
  1029                           	opt stack 0
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           prodh	equ	0xFF4
  1035                           prodl	equ	0xFF3
  1036                           postinc0	equ	0xFEE
  1037                           wreg	equ	0xFE8
  1038                           indf2	equ	0xFDF
  1039                           postinc2	equ	0xFDE
  1040                           postdec2	equ	0xFDD
  1041                           fsr2h	equ	0xFDA
  1042                           fsr2l	equ	0xFD9
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _LCD_display *****************
  1046 ;; Defined at:
  1047 ;;		line 62 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  row             2    7[COMRAM] unsigned int 
  1050 ;;  pos             2    9[COMRAM] unsigned int 
  1051 ;;  ch              2   11[COMRAM] PTR unsigned char 
  1052 ;;		 -> str(16), STR_1(13), 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;		None               void
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1064 ;;      Params:         6       0       0       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1067 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1068 ;;Total ram usage:        6 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    2
  1071 ;; This function calls:
  1072 ;;		_SendData
  1073 ;;		_SendInstruction
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text6
  1080  007D86                     __ptext6:
  1081                           	opt stack 0
  1082  007D86                     _LCD_display:
  1083                           	opt stack 28
  1084                           
  1085                           ;main.c: 64: if(row==1)
  1086                           
  1087                           ;incstack = 0
  1088  007D86  0408               	decf	LCD_display@row,w,c
  1089  007D88  1009               	iorwf	LCD_display@row+1,w,c
  1090  007D8A  A4D8               	btfss	status,2,c
  1091  007D8C  D005               	goto	l838
  1092                           
  1093                           ;main.c: 65: SendInstruction(0x80 | (pos-1));
  1094  007D8E  040A               	decf	LCD_display@pos,w,c
  1095  007D90  0980               	iorlw	128
  1096  007D92  ECFF  F03D         	call	_SendInstruction
  1097  007D96  D019               	goto	l844
  1098  007D98                     l838:
  1099                           
  1100                           ;main.c: 66: else
  1101                           ;main.c: 67: SendInstruction(0xC0 | (pos-1));
  1102  007D98  040A               	decf	LCD_display@pos,w,c
  1103  007D9A  09C0               	iorlw	192
  1104  007D9C  ECFF  F03D         	call	_SendInstruction
  1105  007DA0  D014               	goto	l844
  1106  007DA2                     l840:
  1107                           
  1108                           ;main.c: 70: SendData(*ch++);
  1109  007DA2  C00C  FFF6         	movff	LCD_display@ch,tblptrl
  1110  007DA6  C00D  FFF7         	movff	LCD_display@ch+1,tblptrh
  1111  007DAA  6AF8               	clrf	tblptru,c
  1112  007DAC  0E07               	movlw	(high __ramtop+-1)
  1113  007DAE  64F7               	cpfsgt	tblptrh,c
  1114  007DB0  D003               	bra	u97
  1115  007DB2  0008               	tblrd		*
  1116  007DB4  50F5               	movf	tablat,w,c
  1117  007DB6  D005               	bra	u90
  1118  007DB8                     u97:
  1119  007DB8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1120  007DBC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1121  007DC0  50EF               	movf	indf0,w,c
  1122  007DC2                     u90:
  1123  007DC2  EC13  F03E         	call	_SendData
  1124  007DC6  4A0C               	infsnz	LCD_display@ch,f,c
  1125  007DC8  2A0D               	incf	LCD_display@ch+1,f,c
  1126  007DCA                     l844:
  1127  007DCA  C00C  FFF6         	movff	LCD_display@ch,tblptrl
  1128  007DCE  C00D  FFF7         	movff	LCD_display@ch+1,tblptrh
  1129  007DD2  6AF8               	clrf	tblptru,c
  1130  007DD4  0E07               	movlw	(high __ramtop+-1)
  1131  007DD6  64F7               	cpfsgt	tblptrh,c
  1132  007DD8  D003               	bra	u107
  1133  007DDA  0008               	tblrd		*
  1134  007DDC  50F5               	movf	tablat,w,c
  1135  007DDE  D005               	bra	u100
  1136  007DE0                     u107:
  1137  007DE0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1138  007DE4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1139  007DE8  50EF               	movf	indf0,w,c
  1140  007DEA                     u100:
  1141  007DEA  0900               	iorlw	0
  1142  007DEC  B4D8               	btfsc	status,2,c
  1143  007DEE  0012               	return	
  1144  007DF0  D7D8               	goto	l840
  1145  007DF2                     __end_of_LCD_display:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           prodh	equ	0xFF4
  1152                           prodl	equ	0xFF3
  1153                           indf0	equ	0xFEF
  1154                           postinc0	equ	0xFEE
  1155                           fsr0h	equ	0xFEA
  1156                           fsr0l	equ	0xFE9
  1157                           wreg	equ	0xFE8
  1158                           indf2	equ	0xFDF
  1159                           postinc2	equ	0xFDE
  1160                           postdec2	equ	0xFDD
  1161                           fsr2h	equ	0xFDA
  1162                           fsr2l	equ	0xFD9
  1163                           status	equ	0xFD8
  1164                           
  1165 ;; *************** function _SendData *****************
  1166 ;; Defined at:
  1167 ;;		line 38 in file "main.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;  lcddata         1    wreg     unsigned char 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  lcddata         1    6[COMRAM] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;		None               void
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1181 ;;      Params:         0       0       0       0       0       0       0       0       0
  1182 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1184 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1185 ;;Total ram usage:        1 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    1
  1188 ;; This function calls:
  1189 ;;		_lcd_delay
  1190 ;; This function is called by:
  1191 ;;		_LCD_display
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text7
  1196  007C26                     __ptext7:
  1197                           	opt stack 0
  1198  007C26                     _SendData:
  1199                           	opt stack 28
  1200                           
  1201                           ;incstack = 0
  1202                           ;SendData@lcddata stored from wreg
  1203  007C26  CFE8 F007          	movff	wreg,SendData@lcddata
  1204                           
  1205                           ;main.c: 40: LATAbits.LA0 = 1;
  1206  007C2A  8089               	bsf	3977,0,c	;volatile
  1207                           
  1208                           ;main.c: 41: LATB = lcddata;
  1209  007C2C  C007  FF8A         	movff	SendData@lcddata,3978	;volatile
  1210                           
  1211                           ;main.c: 42: LATAbits.LA1 = 1;
  1212  007C30  8289               	bsf	3977,1,c	;volatile
  1213                           
  1214                           ;main.c: 43: lcd_delay(10);
  1215  007C32  0E00               	movlw	0
  1216  007C34  6E02               	movwf	lcd_delay@time+1,c
  1217  007C36  0E0A               	movlw	10
  1218  007C38  6E01               	movwf	lcd_delay@time,c
  1219  007C3A  EC3D  F03E         	call	_lcd_delay	;wreg free
  1220                           
  1221                           ;main.c: 44: LATAbits.LA1 = 0;
  1222  007C3E  9289               	bcf	3977,1,c	;volatile
  1223                           
  1224                           ;main.c: 45: lcd_delay(10);
  1225  007C40  0E00               	movlw	0
  1226  007C42  6E02               	movwf	lcd_delay@time+1,c
  1227  007C44  0E0A               	movlw	10
  1228  007C46  6E01               	movwf	lcd_delay@time,c
  1229  007C48  EC3D  F03E         	call	_lcd_delay	;wreg free
  1230  007C4C  0012               	return	
  1231  007C4E                     __end_of_SendData:
  1232                           	opt stack 0
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           prodh	equ	0xFF4
  1238                           prodl	equ	0xFF3
  1239                           indf0	equ	0xFEF
  1240                           postinc0	equ	0xFEE
  1241                           fsr0h	equ	0xFEA
  1242                           fsr0l	equ	0xFE9
  1243                           wreg	equ	0xFE8
  1244                           indf2	equ	0xFDF
  1245                           postinc2	equ	0xFDE
  1246                           postdec2	equ	0xFDD
  1247                           fsr2h	equ	0xFDA
  1248                           fsr2l	equ	0xFD9
  1249                           status	equ	0xFD8
  1250                           
  1251 ;; *************** function _InitLCD *****************
  1252 ;; Defined at:
  1253 ;;		line 48 in file "main.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;		None               void
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1270 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    2
  1274 ;; This function calls:
  1275 ;;		_SendInstruction
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text8
  1282  007C4E                     __ptext8:
  1283                           	opt stack 0
  1284  007C4E                     _InitLCD:
  1285                           	opt stack 28
  1286                           
  1287                           ;main.c: 50: ADCON1 = 0x0F;
  1288                           
  1289                           ;incstack = 0
  1290  007C4E  0E0F               	movlw	15
  1291  007C50  6EC1               	movwf	4033,c	;volatile
  1292                           
  1293                           ;main.c: 51: TRISB = 0x00;
  1294  007C52  0E00               	movlw	0
  1295  007C54  6E93               	movwf	3987,c	;volatile
  1296                           
  1297                           ;main.c: 52: TRISAbits.RA0 = 0;
  1298  007C56  9092               	bcf	3986,0,c	;volatile
  1299                           
  1300                           ;main.c: 53: TRISAbits.RA1 = 0;
  1301  007C58  9292               	bcf	3986,1,c	;volatile
  1302                           
  1303                           ;main.c: 55: SendInstruction(0x38);
  1304  007C5A  0E38               	movlw	56
  1305  007C5C  ECFF  F03D         	call	_SendInstruction
  1306                           
  1307                           ;main.c: 56: SendInstruction(0x06);
  1308  007C60  0E06               	movlw	6
  1309  007C62  ECFF  F03D         	call	_SendInstruction
  1310                           
  1311                           ;main.c: 57: SendInstruction(0x0C);
  1312  007C66  0E0C               	movlw	12
  1313  007C68  ECFF  F03D         	call	_SendInstruction
  1314                           
  1315                           ;main.c: 58: SendInstruction(0x01);
  1316  007C6C  0E01               	movlw	1
  1317  007C6E  ECFF  F03D         	call	_SendInstruction
  1318                           
  1319                           ;main.c: 59: SendInstruction(0x80);
  1320  007C72  0E80               	movlw	128
  1321  007C74  ECFF  F03D         	call	_SendInstruction
  1322  007C78  0012               	return	
  1323  007C7A                     __end_of_InitLCD:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodh	equ	0xFF4
  1330                           prodl	equ	0xFF3
  1331                           indf0	equ	0xFEF
  1332                           postinc0	equ	0xFEE
  1333                           fsr0h	equ	0xFEA
  1334                           fsr0l	equ	0xFE9
  1335                           wreg	equ	0xFE8
  1336                           indf2	equ	0xFDF
  1337                           postinc2	equ	0xFDE
  1338                           postdec2	equ	0xFDD
  1339                           fsr2h	equ	0xFDA
  1340                           fsr2l	equ	0xFD9
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _SendInstruction *****************
  1344 ;; Defined at:
  1345 ;;		line 28 in file "main.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  command         1    wreg     unsigned char 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  command         1    6[COMRAM] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;		None               void
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1359 ;;      Params:         0       0       0       0       0       0       0       0       0
  1360 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1362 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1363 ;;Total ram usage:        1 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    1
  1366 ;; This function calls:
  1367 ;;		_lcd_delay
  1368 ;; This function is called by:
  1369 ;;		_InitLCD
  1370 ;;		_LCD_display
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text9
  1375  007BFE                     __ptext9:
  1376                           	opt stack 0
  1377  007BFE                     _SendInstruction:
  1378                           	opt stack 28
  1379                           
  1380                           ;incstack = 0
  1381                           ;SendInstruction@command stored from wreg
  1382  007BFE  CFE8 F007          	movff	wreg,SendInstruction@command
  1383                           
  1384                           ;main.c: 30: LATAbits.LA0 = 0;
  1385  007C02  9089               	bcf	3977,0,c	;volatile
  1386                           
  1387                           ;main.c: 31: LATB = command;
  1388  007C04  C007  FF8A         	movff	SendInstruction@command,3978	;volatile
  1389                           
  1390                           ;main.c: 32: LATAbits.LA1 = 1;
  1391  007C08  8289               	bsf	3977,1,c	;volatile
  1392                           
  1393                           ;main.c: 33: lcd_delay(10);
  1394  007C0A  0E00               	movlw	0
  1395  007C0C  6E02               	movwf	lcd_delay@time+1,c
  1396  007C0E  0E0A               	movlw	10
  1397  007C10  6E01               	movwf	lcd_delay@time,c
  1398  007C12  EC3D  F03E         	call	_lcd_delay	;wreg free
  1399                           
  1400                           ;main.c: 34: LATAbits.LA1 = 0;
  1401  007C16  9289               	bcf	3977,1,c	;volatile
  1402                           
  1403                           ;main.c: 35: lcd_delay(10);
  1404  007C18  0E00               	movlw	0
  1405  007C1A  6E02               	movwf	lcd_delay@time+1,c
  1406  007C1C  0E0A               	movlw	10
  1407  007C1E  6E01               	movwf	lcd_delay@time,c
  1408  007C20  EC3D  F03E         	call	_lcd_delay	;wreg free
  1409  007C24  0012               	return	
  1410  007C26                     __end_of_SendInstruction:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           prodh	equ	0xFF4
  1417                           prodl	equ	0xFF3
  1418                           indf0	equ	0xFEF
  1419                           postinc0	equ	0xFEE
  1420                           fsr0h	equ	0xFEA
  1421                           fsr0l	equ	0xFE9
  1422                           wreg	equ	0xFE8
  1423                           indf2	equ	0xFDF
  1424                           postinc2	equ	0xFDE
  1425                           postdec2	equ	0xFDD
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function _lcd_delay *****************
  1431 ;; Defined at:
  1432 ;;		line 17 in file "main.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  time            2    0[COMRAM] unsigned int 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  j               2    4[COMRAM] unsigned int 
  1437 ;;  i               2    2[COMRAM] unsigned int 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;		None               void
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1447 ;;      Params:         2       0       0       0       0       0       0       0       0
  1448 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1450 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1451 ;;Total ram usage:        6 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_SendInstruction
  1457 ;;		_SendData
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text10
  1463  007C7A                     __ptext10:
  1464                           	opt stack 0
  1465  007C7A                     _lcd_delay:
  1466                           	opt stack 30
  1467                           
  1468                           ;main.c: 19: unsigned int i , j ;
  1469                           ;main.c: 21: for(i = 0; i < time; i++)
  1470                           
  1471                           ;incstack = 0
  1472  007C7A  0E00               	movlw	0
  1473  007C7C  6E04               	movwf	lcd_delay@i+1,c
  1474  007C7E  0E00               	movlw	0
  1475  007C80  6E03               	movwf	lcd_delay@i,c
  1476  007C82  D00F               	goto	l756
  1477  007C84                     l744:
  1478                           
  1479                           ;main.c: 22: {
  1480                           ;main.c: 23: for(j=0;j<100;j++);
  1481  007C84  0E00               	movlw	0
  1482  007C86  6E06               	movwf	lcd_delay@j+1,c
  1483  007C88  0E00               	movlw	0
  1484  007C8A  6E05               	movwf	lcd_delay@j,c
  1485  007C8C  0E64               	movlw	100
  1486  007C8E  5C05               	subwf	lcd_delay@j,w,c
  1487  007C90  0E00               	movlw	0
  1488  007C92  5806               	subwfb	lcd_delay@j+1,w,c
  1489  007C94  B0D8               	btfsc	status,0,c
  1490  007C96  D003               	goto	l754
  1491  007C98  4A05               	infsnz	lcd_delay@j,f,c
  1492  007C9A  2A06               	incf	lcd_delay@j+1,f,c
  1493  007C9C  D7F7               	goto	L2
  1494  007C9E                     l754:
  1495  007C9E  4A03               	infsnz	lcd_delay@i,f,c
  1496  007CA0  2A04               	incf	lcd_delay@i+1,f,c
  1497  007CA2                     l756:
  1498  007CA2  5001               	movf	lcd_delay@time,w,c
  1499  007CA4  5C03               	subwf	lcd_delay@i,w,c
  1500  007CA6  5002               	movf	lcd_delay@time+1,w,c
  1501  007CA8  5804               	subwfb	lcd_delay@i+1,w,c
  1502  007CAA  B0D8               	btfsc	status,0,c
  1503  007CAC  0012               	return	
  1504  007CAE  D7EA               	goto	l744
  1505  007CB0                     __end_of_lcd_delay:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           prodh	equ	0xFF4
  1512                           prodl	equ	0xFF3
  1513                           indf0	equ	0xFEF
  1514                           postinc0	equ	0xFEE
  1515                           fsr0h	equ	0xFEA
  1516                           fsr0l	equ	0xFE9
  1517                           wreg	equ	0xFE8
  1518                           indf2	equ	0xFDF
  1519                           postinc2	equ	0xFDE
  1520                           postdec2	equ	0xFDD
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function _ADCInit *****************
  1526 ;; Defined at:
  1527 ;;		line 73 in file "main.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;		None               void
  1534 ;; Registers used:
  1535 ;;		wreg, status,2
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1544 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; This function calls:
  1548 ;;		Nothing
  1549 ;; This function is called by:
  1550 ;;		_main
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text11
  1555  007BBC                     __ptext11:
  1556                           	opt stack 0
  1557  007BBC                     _ADCInit:
  1558                           	opt stack 30
  1559                           
  1560                           ;main.c: 75: TRISEbits.RE1 = 1;
  1561                           
  1562                           ;incstack = 0
  1563  007BBC  8296               	bsf	3990,1,c	;volatile
  1564                           
  1565                           ;main.c: 76: TRISEbits.RE2 = 1;
  1566  007BBE  8496               	bsf	3990,2,c	;volatile
  1567                           
  1568                           ;main.c: 78: ADCON1 = 0b00000111;
  1569  007BC0  0E07               	movlw	7
  1570  007BC2  6EC1               	movwf	4033,c	;volatile
  1571                           
  1572                           ;main.c: 79: ADCON2 = 0b10101110;
  1573  007BC4  0EAE               	movlw	174
  1574  007BC6  6EC0               	movwf	4032,c	;volatile
  1575  007BC8  0012               	return	
  1576  007BCA                     __end_of_ADCInit:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           prodh	equ	0xFF4
  1583                           prodl	equ	0xFF3
  1584                           indf0	equ	0xFEF
  1585                           postinc0	equ	0xFEE
  1586                           fsr0h	equ	0xFEA
  1587                           fsr0l	equ	0xFE9
  1588                           wreg	equ	0xFE8
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           postdec2	equ	0xFDD
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           prodh	equ	0xFF4
  1600                           prodl	equ	0xFF3
  1601                           indf0	equ	0xFEF
  1602                           postinc0	equ	0xFEE
  1603                           fsr0h	equ	0xFEA
  1604                           fsr0l	equ	0xFE9
  1605                           wreg	equ	0xFE8
  1606                           indf2	equ	0xFDF
  1607                           postinc2	equ	0xFDE
  1608                           postdec2	equ	0xFDD
  1609                           fsr2h	equ	0xFDA
  1610                           fsr2l	equ	0xFD9
  1611                           status	equ	0xFD8
  1612                           
  1613                           	psect	rparam
  1614  0000                     tblptru	equ	0xFF8
  1615                           tblptrh	equ	0xFF7
  1616                           tblptrl	equ	0xFF6
  1617                           tablat	equ	0xFF5
  1618                           prodh	equ	0xFF4
  1619                           prodl	equ	0xFF3
  1620                           indf0	equ	0xFEF
  1621                           postinc0	equ	0xFEE
  1622                           fsr0h	equ	0xFEA
  1623                           fsr0l	equ	0xFE9
  1624                           wreg	equ	0xFE8
  1625                           indf2	equ	0xFDF
  1626                           postinc2	equ	0xFDE
  1627                           postdec2	equ	0xFDD
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    10
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      56
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> str(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S222$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LCD_display@ch	PTR unsigned char  size(2) Largest target is 16
		 -> str(COMRAM[16]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _LCD_display->_SendData
    _LCD_display->_SendInstruction
    _SendData->_lcd_delay
    _InitLCD->_SendInstruction
    _SendInstruction->_lcd_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2860
                                             38 COMRAM     2     2      0
                            _ADCInit
                            _InitLCD
                        _LCD_display
                           _Read_ADC
                            ___lwdiv
                             ___wmul
                          _lcd_delay
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    12      6     869
                                             20 COMRAM    18    12      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     191
                                             14 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     277
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     191
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Read_ADC                                             3     1      2      15
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _LCD_display                                          6     0      6     913
                                              7 COMRAM     6     0      6
                           _SendData
                    _SendInstruction
 ---------------------------------------------------------------------------------
 (2) _SendData                                             1     1      0     290
                                              6 COMRAM     1     1      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     290
                    _SendInstruction
 ---------------------------------------------------------------------------------
 (2) _SendInstruction                                      1     1      0     290
                                              6 COMRAM     1     1      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _lcd_delay                                            6     4      2     275
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _InitLCD
     _SendInstruction
       _lcd_delay
   _LCD_display
     _SendData
       _lcd_delay
     _SendInstruction
       _lcd_delay
   _Read_ADC
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _lcd_delay
   _sprintf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      38       1       58.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      38      20        0.0%
DATA                 0      0      38       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Feb 13 19:22:58 2017

          LCD_display@pos 000A            LCD_display@row 0008                        l57 7BF0  
                      u90 7DC2                        u97 7DB8       ___wmul@multiplicand 0003  
                     l600 7D7C                       l610 7D26                       l802 7D4A  
                     l804 7D52                       l900 7F60                       l814 7D72  
                     l806 7D56                       l744 7C84                       l840 7DA2  
                     l754 7C9E                       l850 7CFC                       l914 7FD4  
                     l906 7F7C                       l756 7CA2                       l844 7DCA  
                     l852 7D04                       l908 7F82                       l916 7FDC  
                     l838 7D98                       l854 7D08                       l918 7FF2  
                     l870 7EBE                       l864 7EA4                       l928 7E16  
                     l858 7D1C                       l876 7EEC                       l886 7F24  
                     u100 7DEA                       u107 7DE0                       _str 0029  
         __end_of_ADCInit 7BCA                       wreg 000FE8                Read_ADC@Ch 0003  
           lcd_delay@time 0001                      STR_1 080F                      STR_2 081C  
            ?_LCD_display 0008                      _LATB 000F8A                      _main 7DF2  
                    fsr0h 000FEA                      indf0 000FEF                      fsr0l 000FE9  
                    fsr2h 000FDA                      indf2 000FDF                      fsr2l 000FD9  
                    prodh 000FF4                      prodl 000FF3                      start 0800  
         __end_of_InitLCD 7C7A                     ?_main 0001                     _ADRES 000FC3  
         __end_of___lwdiv 7D86           __end_of___lwmod 7D30                     _TRISB 000F93  
         __end_of_dpowers 080F                     tablat 000FF5                     status 000FD8  
         __end_of_sprintf 8000           __initialization 7BCA              __end_of_main 7E9A  
        __end_of_Read_ADC 7BFE                 ??_ADCInit 0001          __end_of_SendData 7C4E  
                  ??_main 0027             __activetblptr 000002                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _GODONE 007E11  
               ??_InitLCD 0008  __size_of_SendInstruction 0028                    ___wmul 7CB0  
               ??___lwdiv 000B                 ??___lwmod 0013                    clear_0 7BD0  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ??_sprintf 001B                __accesstop 0060  
 __end_of__initialization 7BD6      __size_of_LCD_display 006C            __pcstackCOMRAM 0001  
      __size_of_lcd_delay 0036                 ?_Read_ADC 0001                 ?_SendData 0001  
                 ?___wmul 0001         ??_SendInstruction 0007                   _ADCInit 7BBC  
                 _GO_DONE 007E11                ??_Read_ADC 0003                   _InitLCD 7C4E  
              ??_SendData 0007                   __Hparam 0000                   __Lparam 0000  
       __end_of_lcd_delay 7CB0           __size_of___wmul 003A                   ___lwdiv 7D30  
                 ___lwmod 7CEA              __psmallconst 0804                   __pcinit 7BCA  
                 __ramtop 0800                   __ptext0 7DF2                   __ptext1 7E9A  
                 __ptext2 7CEA                   __ptext3 7D30                   __ptext4 7CB0  
                 __ptext5 7BE0                   __ptext6 7D86                   __ptext7 7C26  
                 __ptext8 7C4E                   __ptext9 7BFE                   _dpowers 0805  
                 _sprintf 7E9A      end_of_initialization 7BD6             __Lmediumconst 0000  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
               _TRISAbits 000F92                 _TRISEbits 000F96             LCD_display@ch 000C  
              lcd_delay@i 0003                lcd_delay@j 0005            __end_of___wmul 7CEA  
     start_initialization 7BCA             ??_LCD_display 000E           _SendInstruction 7BFE  
       __size_of_Read_ADC 001E         __size_of_SendData 0028                  ??___wmul 0005  
                ?_ADCInit 0001               __pbssCOMRAM 0029       __end_of__stringdata 0823  
             sprintf@_val 0021               sprintf@flag 001F               sprintf@prec 0020  
                ?_InitLCD 0001       __end_of_LCD_display 7DF2          ___lwdiv@dividend 0007  
         SendData@lcddata 0007                  ?___lwdiv 0007                  ?___lwmod 000F  
  SendInstruction@command 0007                 _lcd_delay 7C7A               __smallconst 0804  
 __end_of_SendInstruction 7C26          ___lwdiv@quotient 000C                  ?_sprintf 0015  
          ___wmul@product 0005                  _LATAbits 000F89                ?_lcd_delay 0001  
        __size_of_ADCInit 000E               __stringdata 080F         ___wmul@multiplier 0001  
             _LCD_display 7D86                  _Read_ADC 7BE0                  _SendData 7C26  
        __size_of_InitLCD 002C                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___lwdiv 0056          __size_of___lwmod 0046           ___lwdiv@divisor 0009  
         ___lwdiv@counter 000E                  __ptext10 7C7A                  __ptext11 7BBC  
        ?_SendInstruction 0001          __size_of_sprintf 0166             __size_of_main 00A8  
             ??_lcd_delay 0003                  main@temp 0027                 sprintf@ap 001D  
               sprintf@sp 0015          ___lwmod@dividend 000F                  sprintf@c 0026  
                sprintf@f 0017           ___lwmod@divisor 0011           ___lwmod@counter 0014  
