

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Mon Jun 13 16:13:36 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           	psect	smallconst
    30  000804                     __psmallconst:
    31                           	opt stack 0
    32  000804  00                 	db	0
    33  000805                     _hexpowers:
    34                           	opt stack 0
    35  000805  0001               	dw	1
    36  000807  0010               	dw	16
    37  000809  0100               	dw	256
    38  00080B  1000               	dw	4096
    39  00080D                     __end_of_hexpowers:
    40                           	opt stack 0
    41  0000                     _ADCON1	set	4033
    42  0000                     _LATAbits	set	3977
    43  0000                     _LATB	set	3978
    44  0000                     _PIR1bits	set	3998
    45  0000                     _SSPADD	set	4040
    46  0000                     _SSPBUF	set	4041
    47  0000                     _SSPCON1	set	4038
    48  0000                     _SSPCON1bits	set	4038
    49  0000                     _SSPCON2bits	set	4037
    50  0000                     _SSPSTATbits	set	4039
    51  0000                     _TRISAbits	set	3986
    52  0000                     _TRISB	set	3987
    53  0000                     _TRISBbits	set	3987
    54  00080D                     __stringdata:
    55                           	opt stack 0
    56  00080D                     STR_2:
    57  00080D  74                 	db	116	;'t'
    58  00080E  69                 	db	105	;'i'
    59  00080F  6D                 	db	109	;'m'
    60  000810  65                 	db	101	;'e'
    61  000811  3A                 	db	58	;':'
    62  000812  25                 	db	37
    63  000813  30                 	db	48	;'0'
    64  000814  32                 	db	50	;'2'
    65  000815  78                 	db	120	;'x'
    66  000816  3A                 	db	58	;':'
    67  000817  25                 	db	37
    68  000818  30                 	db	48	;'0'
    69  000819  32                 	db	50	;'2'
    70  00081A  78                 	db	120	;'x'
    71  00081B  3A                 	db	58	;':'
    72  00081C  25                 	db	37
    73  00081D  30                 	db	48	;'0'
    74  00081E  32                 	db	50	;'2'
    75  00081F  78                 	db	120	;'x'
    76  000820  00                 	db	0
    77  000821                     STR_1:
    78  000821  64                 	db	100	;'d'
    79  000822  61                 	db	97	;'a'
    80  000823  74                 	db	116	;'t'
    81  000824  65                 	db	101	;'e'
    82  000825  3A                 	db	58	;':'
    83  000826  25                 	db	37
    84  000827  30                 	db	48	;'0'
    85  000828  32                 	db	50	;'2'
    86  000829  78                 	db	120	;'x'
    87  00082A  3A                 	db	58	;':'
    88  00082B  25                 	db	37
    89  00082C  30                 	db	48	;'0'
    90  00082D  32                 	db	50	;'2'
    91  00082E  78                 	db	120	;'x'
    92  00082F  3A                 	db	58	;':'
    93  000830  25                 	db	37
    94  000831  30                 	db	48	;'0'
    95  000832  32                 	db	50	;'2'
    96  000833  78                 	db	120	;'x'
    97  000834  00                 	db	0
    98  000835                     STR_3:
    99  000835  30                 	db	48	;'0'
   100  000836  31                 	db	49	;'1'
   101  000837  32                 	db	50	;'2'
   102  000838  33                 	db	51	;'3'
   103  000839  34                 	db	52	;'4'
   104  00083A  35                 	db	53	;'5'
   105  00083B  36                 	db	54	;'6'
   106  00083C  37                 	db	55	;'7'
   107  00083D  38                 	db	56	;'8'
   108  00083E  39                 	db	57	;'9'
   109  00083F  61                 	db	97	;'a'
   110  000840  62                 	db	98	;'b'
   111  000841  63                 	db	99	;'c'
   112  000842  64                 	db	100	;'d'
   113  000843  65                 	db	101	;'e'
   114  000844  66                 	db	102	;'f'
   115  000845  00                 	db	0
   116  000846                     __end_of__stringdata:
   117                           	opt stack 0
   118  000846  00                 	db	0	; dummy byte at the end
   119  0000                     
   120                           ; #config settings
   121                           
   122                           	psect	cinit
   123  007A7A                     __pcinit:
   124                           	opt stack 0
   125  007A7A                     start_initialization:
   126                           	opt stack 0
   127  007A7A                     __initialization:
   128                           	opt stack 0
   129                           
   130                           ; Clear objects allocated to COMRAM (16 bytes)
   131  007A7A  EE00  F02C         	lfsr	0,__pbssCOMRAM
   132  007A7E  0E10               	movlw	16
   133  007A80                     clear_0:
   134  007A80  6AEE               	clrf	postinc0,c
   135  007A82  06E8               	decf	wreg,f,c
   136  007A84  E1FD               	bnz	clear_0
   137  007A86                     end_of_initialization:
   138                           	opt stack 0
   139  007A86                     __end_of__initialization:
   140                           	opt stack 0
   141  007A86  0E00               	movlw	low (__Lmediumconst shr (0+16))
   142  007A88  6EF8               	movwf	tblptru,c
   143  007A8A  0100               	movlb	0
   144  007A8C  EF40  F03E         	goto	_main	;jump to C main() function
   145                           tblptru	equ	0xFF8
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssCOMRAM
   150  00002C                     __pbssCOMRAM:
   151                           	opt stack 0
   152  00002C                     _str:
   153                           	opt stack 0
   154  00002C                     	ds	16
   155                           tblptru	equ	0xFF8
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           
   159                           	psect	cstackCOMRAM
   160  000001                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000001                     ??_isdigit:
   163  000001                     ?___lwdiv:
   164                           	opt stack 0
   165  000001                     ?___wmul:
   166                           	opt stack 0
   167  000001                     i2c_read@data:
   168                           	opt stack 0
   169  000001                     i2c_write@data:
   170                           	opt stack 0
   171  000001                     lcd_delay@time:
   172                           	opt stack 0
   173  000001                     ___lwdiv@dividend:
   174                           	opt stack 0
   175  000001                     ___wmul@multiplier:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0x0
   179  000001                     	ds	1
   180  000002                     _isdigit$861:
   181                           	opt stack 0
   182                           
   183                           ; 1 bytes @ 0x1
   184  000002                     	ds	1
   185  000003                     get_reg@address:
   186                           	opt stack 0
   187  000003                     set_reg@x:
   188                           	opt stack 0
   189  000003                     isdigit@c:
   190                           	opt stack 0
   191  000003                     lcd_delay@i:
   192                           	opt stack 0
   193  000003                     ___lwdiv@divisor:
   194                           	opt stack 0
   195  000003                     ___wmul@multiplicand:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x2
   199  000003                     	ds	1
   200  000004                     get_reg@data:
   201                           	opt stack 0
   202  000004                     set_reg@address:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x3
   206  000004                     	ds	1
   207  000005                     ??___lwdiv:
   208  000005                     lcd_delay@j:
   209                           	opt stack 0
   210  000005                     ___wmul@product:
   211                           	opt stack 0
   212                           
   213                           ; 2 bytes @ 0x4
   214  000005                     	ds	1
   215  000006                     ___lwdiv@quotient:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x5
   219  000006                     	ds	1
   220  000007                     SendInstruction@command:
   221                           	opt stack 0
   222  000007                     SendData@lcddata:
   223                           	opt stack 0
   224                           
   225                           ; 1 bytes @ 0x6
   226  000007                     	ds	1
   227  000008                     ___lwdiv@counter:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0x7
   231  000008                     	ds	1
   232  000009                     ?_sprintf:
   233                           	opt stack 0
   234  000009                     sprintf@sp:
   235                           	opt stack 0
   236                           
   237                           ; 2 bytes @ 0x8
   238  000009                     	ds	2
   239  00000B                     sprintf@f:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0xA
   243  00000B                     	ds	8
   244  000013                     ??_sprintf:
   245                           
   246                           ; 0 bytes @ 0x12
   247  000013                     	ds	4
   248  000017                     sprintf@ap:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x16
   252  000017                     	ds	2
   253  000019                     sprintf@idx:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x18
   257  000019                     	ds	1
   258  00001A                     sprintf@flag:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x19
   262  00001A                     	ds	1
   263  00001B                     sprintf@_val:
   264                           	opt stack 0
   265                           
   266                           ; 5 bytes @ 0x1A
   267  00001B                     	ds	5
   268  000020                     sprintf@prec:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x1F
   272  000020                     	ds	1
   273  000021                     sprintf@width:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x20
   277  000021                     	ds	2
   278  000023                     sprintf@c:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x22
   282  000023                     	ds	1
   283  000024                     ??_main:
   284                           
   285                           ; 0 bytes @ 0x23
   286  000024                     	ds	1
   287  000025                     main@date:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x24
   291  000025                     	ds	1
   292  000026                     main@mnt:
   293                           	opt stack 0
   294                           
   295                           ; 1 bytes @ 0x25
   296  000026                     	ds	1
   297  000027                     main@yr:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x26
   301  000027                     	ds	1
   302  000028                     main@sec:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x27
   306  000028                     	ds	1
   307  000029                     main@min:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x28
   311  000029                     	ds	1
   312  00002A                     main@hrs:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x29
   316  00002A                     	ds	1
   317  00002B                     main@i:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x2A
   321  00002B                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 81 in file "mainclock.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;  i               1   42[COMRAM] unsigned char 
   336 ;;  hrs             1   41[COMRAM] unsigned char 
   337 ;;  min             1   40[COMRAM] unsigned char 
   338 ;;  sec             1   39[COMRAM] unsigned char 
   339 ;;  yr              1   38[COMRAM] unsigned char 
   340 ;;  mnt             1   37[COMRAM] unsigned char 
   341 ;;  date            1   36[COMRAM] unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;		None               void
   344 ;; Registers used:
   345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   351 ;;      Params:         0       0       0       0       0       0       0       0       0
   352 ;;      Locals:         7       0       0       0       0       0       0       0       0
   353 ;;      Temps:          1       0       0       0       0       0       0       0       0
   354 ;;      Totals:         8       0       0       0       0       0       0       0       0
   355 ;;Total ram usage:        8 bytes
   356 ;; Hardware stack levels required when called:    3
   357 ;; This function calls:
   358 ;;		_InitLCD
   359 ;;		_SendData
   360 ;;		_SendInstruction
   361 ;;		_get_reg
   362 ;;		_i2c_init
   363 ;;		_lcd_delay
   364 ;;		_set_reg
   365 ;;		_sprintf
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370                           
   371                           	psect	text0
   372  007C80                     __ptext0:
   373                           	opt stack 0
   374  007C80                     _main:
   375                           	opt stack 28
   376                           
   377                           ;mainclock.c: 83: unsigned char date,mnt,yr,sec,min,hrs,i;
   378                           ;mainclock.c: 84: i2c_init();
   379                           
   380                           ;incstack = 0
   381  007C80  EC34  F03D         	call	_i2c_init	;wreg free
   382                           
   383                           ;mainclock.c: 85: set_reg(0x00,0x45);
   384  007C84  6E24               	movwf	??_main& (0+255),c
   385  007C86  0E45               	movlw	69
   386  007C88  6E03               	movwf	set_reg@x,c
   387  007C8A  5024               	movf	??_main& (0+255),w,c
   388  007C8C  0E00               	movlw	0
   389  007C8E  ECA7  F03D         	call	_set_reg
   390                           
   391                           ;mainclock.c: 86: set_reg(0x01,0x57);
   392  007C92  6E24               	movwf	??_main& (0+255),c
   393  007C94  0E57               	movlw	87
   394  007C96  6E03               	movwf	set_reg@x,c
   395  007C98  5024               	movf	??_main& (0+255),w,c
   396  007C9A  0E01               	movlw	1
   397  007C9C  ECA7  F03D         	call	_set_reg
   398                           
   399                           ;mainclock.c: 87: set_reg(0x02,0x66);
   400  007CA0  6E24               	movwf	??_main& (0+255),c
   401  007CA2  0E66               	movlw	102
   402  007CA4  6E03               	movwf	set_reg@x,c
   403  007CA6  5024               	movf	??_main& (0+255),w,c
   404  007CA8  0E02               	movlw	2
   405  007CAA  ECA7  F03D         	call	_set_reg
   406                           
   407                           ;mainclock.c: 88: set_reg(0x04,0x01);
   408  007CAE  6E24               	movwf	??_main& (0+255),c
   409  007CB0  0E01               	movlw	1
   410  007CB2  6E03               	movwf	set_reg@x,c
   411  007CB4  5024               	movf	??_main& (0+255),w,c
   412  007CB6  0E04               	movlw	4
   413  007CB8  ECA7  F03D         	call	_set_reg
   414                           
   415                           ;mainclock.c: 89: set_reg(0x05,0x08);
   416  007CBC  6E24               	movwf	??_main& (0+255),c
   417  007CBE  0E08               	movlw	8
   418  007CC0  6E03               	movwf	set_reg@x,c
   419  007CC2  5024               	movf	??_main& (0+255),w,c
   420  007CC4  0E05               	movlw	5
   421  007CC6  ECA7  F03D         	call	_set_reg
   422                           
   423                           ;mainclock.c: 90: set_reg(0x06,0x14);
   424  007CCA  6E24               	movwf	??_main& (0+255),c
   425  007CCC  0E14               	movlw	20
   426  007CCE  6E03               	movwf	set_reg@x,c
   427  007CD0  5024               	movf	??_main& (0+255),w,c
   428  007CD2  0E06               	movlw	6
   429  007CD4  ECA7  F03D         	call	_set_reg
   430  007CD8                     l108:
   431                           
   432                           ;mainclock.c: 93: {
   433                           ;mainclock.c: 94: i2c_init();
   434  007CD8  EC34  F03D         	call	_i2c_init	;wreg free
   435                           
   436                           ;mainclock.c: 95: sec = get_reg(0);
   437  007CDC  0E00               	movlw	0
   438  007CDE  ECF6  F03D         	call	_get_reg
   439  007CE2  6E28               	movwf	main@sec,c
   440                           
   441                           ;mainclock.c: 96: min = get_reg(1);
   442  007CE4  0E01               	movlw	1
   443  007CE6  ECF6  F03D         	call	_get_reg
   444  007CEA  6E29               	movwf	main@min,c
   445                           
   446                           ;mainclock.c: 97: hrs = get_reg(2)&0x1F;
   447  007CEC  0E02               	movlw	2
   448  007CEE  ECF6  F03D         	call	_get_reg
   449  007CF2  0B1F               	andlw	31
   450  007CF4  6E2A               	movwf	main@hrs,c
   451                           
   452                           ;mainclock.c: 98: date= get_reg(4);
   453  007CF6  0E04               	movlw	4
   454  007CF8  ECF6  F03D         	call	_get_reg
   455  007CFC  6E25               	movwf	main@date,c
   456                           
   457                           ;mainclock.c: 99: mnt = get_reg(5);
   458  007CFE  0E05               	movlw	5
   459  007D00  ECF6  F03D         	call	_get_reg
   460  007D04  6E26               	movwf	main@mnt,c
   461                           
   462                           ;mainclock.c: 100: yr = get_reg(6);
   463  007D06  0E06               	movlw	6
   464  007D08  ECF6  F03D         	call	_get_reg
   465  007D0C  6E27               	movwf	main@yr,c
   466                           
   467                           ;mainclock.c: 102: SSPCON1bits.SSPEN = 0;
   468  007D0E  9AC6               	bcf	4038,5,c	;volatile
   469                           
   470                           ;mainclock.c: 103: InitLCD();
   471  007D10  EC91  F03D         	call	_InitLCD	;wreg free
   472                           
   473                           ;mainclock.c: 104: sprintf(str,"date:%02x:%02x:%02x",date,mnt,yr);
   474  007D14  0E00               	movlw	high _str
   475  007D16  6E0A               	movwf	sprintf@sp+1,c
   476  007D18  0E2C               	movlw	low _str
   477  007D1A  6E09               	movwf	sprintf@sp,c
   478  007D1C  0E08               	movlw	high STR_1
   479  007D1E  6E0C               	movwf	sprintf@f+1,c
   480  007D20  0E21               	movlw	low STR_1
   481  007D22  6E0B               	movwf	sprintf@f,c
   482  007D24  C025  F00D         	movff	main@date,?_sprintf+4
   483  007D28  6A0E               	clrf	?_sprintf+5,c
   484  007D2A  C026  F00F         	movff	main@mnt,?_sprintf+6
   485  007D2E  6A10               	clrf	?_sprintf+7,c
   486  007D30  C027  F011         	movff	main@yr,?_sprintf+8
   487  007D34  6A12               	clrf	?_sprintf+9,c
   488  007D36  ECE5  F03E         	call	_sprintf	;wreg free
   489                           
   490                           ;mainclock.c: 105: SendInstruction(0x80);
   491  007D3A  0E80               	movlw	128
   492  007D3C  EC54  F03D         	call	_SendInstruction
   493                           
   494                           ;mainclock.c: 106: for(i=0;i<13;i++)
   495  007D40  6E24               	movwf	??_main& (0+255),c
   496  007D42  0E00               	movlw	0
   497  007D44  6E2B               	movwf	main@i,c
   498  007D46  5024               	movf	??_main& (0+255),w,c
   499  007D48  D00C               	goto	L1
   500  007D4A                     l1200:
   501                           
   502                           ;mainclock.c: 107: {
   503                           ;mainclock.c: 108: SendData(str[i]);
   504  007D4A  502B               	movf	main@i,w,c
   505  007D4C  0D01               	mullw	1
   506  007D4E  0E2C               	movlw	low _str
   507  007D50  24F3               	addwf	prodl,w,c
   508  007D52  6ED9               	movwf	fsr2l,c
   509  007D54  0E00               	movlw	high _str
   510  007D56  20F4               	addwfc	prodh,w,c
   511  007D58  6EDA               	movwf	fsr2h,c
   512  007D5A  50DF               	movf	indf2,w,c
   513  007D5C  EC68  F03D         	call	_SendData
   514  007D60  2A2B               	incf	main@i,f,c
   515  007D62                     L1:
   516  007D62  0E0C               	movlw	12
   517  007D64  642B               	cpfsgt	main@i,c
   518  007D66  D7F1               	goto	l1200
   519                           
   520                           ;mainclock.c: 109: }
   521                           ;mainclock.c: 111: sprintf(str,"time:%02x:%02x:%02x",hrs,min,sec);
   522  007D68  0E00               	movlw	high _str
   523  007D6A  6E0A               	movwf	sprintf@sp+1,c
   524  007D6C  0E2C               	movlw	low _str
   525  007D6E  6E09               	movwf	sprintf@sp,c
   526  007D70  0E08               	movlw	high STR_2
   527  007D72  6E0C               	movwf	sprintf@f+1,c
   528  007D74  0E0D               	movlw	low STR_2
   529  007D76  6E0B               	movwf	sprintf@f,c
   530  007D78  C02A  F00D         	movff	main@hrs,?_sprintf+4
   531  007D7C  6A0E               	clrf	?_sprintf+5,c
   532  007D7E  C029  F00F         	movff	main@min,?_sprintf+6
   533  007D82  6A10               	clrf	?_sprintf+7,c
   534  007D84  C028  F011         	movff	main@sec,?_sprintf+8
   535  007D88  6A12               	clrf	?_sprintf+9,c
   536  007D8A  ECE5  F03E         	call	_sprintf	;wreg free
   537                           
   538                           ;mainclock.c: 112: SendInstruction(0xC0);
   539  007D8E  0EC0               	movlw	192
   540  007D90  EC54  F03D         	call	_SendInstruction
   541                           
   542                           ;mainclock.c: 113: for(i=0;i<13;i++)
   543  007D94  6E24               	movwf	??_main& (0+255),c
   544  007D96  0E00               	movlw	0
   545  007D98  6E2B               	movwf	main@i,c
   546  007D9A  5024               	movf	??_main& (0+255),w,c
   547  007D9C  D00C               	goto	L2
   548  007D9E                     l1216:
   549                           
   550                           ;mainclock.c: 114: {
   551                           ;mainclock.c: 115: SendData(str[i]);
   552  007D9E  502B               	movf	main@i,w,c
   553  007DA0  0D01               	mullw	1
   554  007DA2  0E2C               	movlw	low _str
   555  007DA4  24F3               	addwf	prodl,w,c
   556  007DA6  6ED9               	movwf	fsr2l,c
   557  007DA8  0E00               	movlw	high _str
   558  007DAA  20F4               	addwfc	prodh,w,c
   559  007DAC  6EDA               	movwf	fsr2h,c
   560  007DAE  50DF               	movf	indf2,w,c
   561  007DB0  EC68  F03D         	call	_SendData
   562  007DB4  2A2B               	incf	main@i,f,c
   563  007DB6                     L2:
   564  007DB6  0E0C               	movlw	12
   565  007DB8  642B               	cpfsgt	main@i,c
   566  007DBA  D7F1               	goto	l1216
   567                           
   568                           ;mainclock.c: 116: }
   569                           ;mainclock.c: 117: lcd_delay(10000);
   570  007DBC  0E27               	movlw	39
   571  007DBE  6E02               	movwf	lcd_delay@time+1,c
   572  007DC0  0E10               	movlw	16
   573  007DC2  6E01               	movwf	lcd_delay@time,c
   574  007DC4  ECBE  F03D         	call	_lcd_delay	;wreg free
   575  007DC8  D787               	goto	l108
   576  007DCA                     __end_of_main:
   577                           	opt stack 0
   578                           tblptru	equ	0xFF8
   579                           prodh	equ	0xFF4
   580                           prodl	equ	0xFF3
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           indf2	equ	0xFDF
   584                           fsr2h	equ	0xFDA
   585                           fsr2l	equ	0xFD9
   586                           
   587 ;; *************** function _sprintf *****************
   588 ;; Defined at:
   589 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\doprnt.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;  sp              2    8[COMRAM] PTR unsigned char 
   592 ;;		 -> str(16), 
   593 ;;  f               2   10[COMRAM] PTR const unsigned char 
   594 ;;		 -> STR_2(20), STR_1(20), 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  idx             1   24[COMRAM] unsigned char 
   597 ;;  _val            5   26[COMRAM] struct .
   598 ;;  width           2   32[COMRAM] int 
   599 ;;  ap              2   22[COMRAM] PTR void [1]
   600 ;;		 -> ?_sprintf(2), 
   601 ;;  c               1   34[COMRAM] char 
   602 ;;  prec            1   31[COMRAM] char 
   603 ;;  flag            1   25[COMRAM] unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  2    8[COMRAM] int 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   613 ;;      Params:        10       0       0       0       0       0       0       0       0
   614 ;;      Locals:        13       0       0       0       0       0       0       0       0
   615 ;;      Temps:          4       0       0       0       0       0       0       0       0
   616 ;;      Totals:        27       0       0       0       0       0       0       0       0
   617 ;;Total ram usage:       27 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    1
   620 ;; This function calls:
   621 ;;		___lwdiv
   622 ;;		___wmul
   623 ;;		_isdigit
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text1
   630  007DCA                     __ptext1:
   631                           	opt stack 0
   632  007DCA                     _sprintf:
   633                           	opt stack 29
   634                           
   635                           ;doprnt.c: 494: va_list ap;
   636                           ;doprnt.c: 499: signed char c;
   637                           ;doprnt.c: 501: int width;
   638                           ;doprnt.c: 506: signed char prec;
   639                           ;doprnt.c: 508: unsigned char flag;
   640                           ;doprnt.c: 527: union {
   641                           ;doprnt.c: 528: unsigned int _val;
   642                           ;doprnt.c: 529: struct {
   643                           ;doprnt.c: 530: const char * _cp;
   644                           ;doprnt.c: 531: unsigned _len;
   645                           ;doprnt.c: 532: } _str;
   646                           ;doprnt.c: 533: } _val;
   647                           ;doprnt.c: 542: *ap = __va_start();
   648                           
   649                           ;incstack = 0
   650  007DCA  0E00               	movlw	high (?_sprintf+4)
   651  007DCC  6E18               	movwf	sprintf@ap+1,c
   652  007DCE  0E0D               	movlw	low (?_sprintf+4)
   653  007DD0  6E17               	movwf	sprintf@ap,c
   654                           
   655                           ;doprnt.c: 545: while(c = *f++) {
   656  007DD2  D104               	goto	l1172
   657  007DD4                     l1088:
   658                           
   659                           ;doprnt.c: 547: if(c != '%')
   660  007DD4  5023               	movf	sprintf@c,w,c
   661  007DD6  0A25               	xorlw	37
   662  007DD8  B4D8               	btfsc	status,2,c
   663  007DDA  D009               	goto	l1094
   664                           
   665                           ;doprnt.c: 549: {
   666                           ;doprnt.c: 550: ((*sp++ = (c)));
   667  007DDC  C009  FFD9         	movff	sprintf@sp,fsr2l
   668  007DE0  C00A  FFDA         	movff	sprintf@sp+1,fsr2h
   669  007DE4  C023  FFDF         	movff	sprintf@c,indf2
   670  007DE8  4A09               	infsnz	sprintf@sp,f,c
   671  007DEA  2A0A               	incf	sprintf@sp+1,f,c
   672                           
   673                           ;doprnt.c: 551: continue;
   674  007DEC  D0F7               	goto	l1172
   675  007DEE                     l1094:
   676                           
   677                           ;doprnt.c: 552: }
   678                           ;doprnt.c: 555: width = 0;
   679  007DEE  0E00               	movlw	0
   680  007DF0  6E22               	movwf	sprintf@width+1,c
   681  007DF2  0E00               	movlw	0
   682  007DF4  6E21               	movwf	sprintf@width,c
   683                           
   684                           ;doprnt.c: 557: flag = 0;
   685  007DF6  6E13               	movwf	??_sprintf& (0+255),c
   686  007DF8  0E00               	movlw	0
   687  007DFA  6E1A               	movwf	sprintf@flag,c
   688  007DFC  5013               	movf	??_sprintf& (0+255),w,c
   689  007DFE  D003               	goto	l1102
   690  007E00                     l1098:
   691                           
   692                           ;doprnt.c: 589: flag |= 0x04;
   693  007E00  841A               	bsf	sprintf@flag,2,c
   694                           
   695                           ;doprnt.c: 590: f++;
   696  007E02  4A0B               	infsnz	sprintf@f,f,c
   697  007E04  2A0C               	incf	sprintf@f+1,f,c
   698  007E06                     l1102:
   699  007E06  C00B  FFF6         	movff	sprintf@f,tblptrl
   700  007E0A  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   701  007E0E  0008               	tblrd		*
   702  007E10  50F5               	movf	tablat,w,c
   703                           
   704                           ; Switch size 1, requested type "space"
   705                           ; Number of cases is 1, Range of values is 48 to 48
   706                           ; switch strategies available:
   707                           ; Name         Instructions Cycles
   708                           ; simple_byte            4     3 (average)
   709                           ;	Chosen strategy is simple_byte
   710  007E12  0A30               	xorlw	48	; case 48
   711  007E14  B4D8               	btfsc	status,2,c
   712  007E16  D7F4               	goto	l1098
   713                           
   714                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
   715                           
   716                           ;doprnt.c: 595: }
   717                           
   718                           ;doprnt.c: 594: break;
   719  007E18  C00B  FFF6         	movff	sprintf@f,tblptrl
   720  007E1C  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   721  007E20  0008               	tblrd		*
   722  007E22  50F5               	movf	tablat,w,c
   723  007E24  EC7C  F03D         	call	_isdigit
   724  007E28  A0D8               	btfss	status,0,c
   725  007E2A  D032               	goto	l1118
   726                           
   727                           ;doprnt.c: 607: width = 0;
   728  007E2C  0E00               	movlw	0
   729  007E2E  6E22               	movwf	sprintf@width+1,c
   730  007E30  0E00               	movlw	0
   731  007E32  6E21               	movwf	sprintf@width,c
   732  007E34                     l1108:
   733                           
   734                           ;doprnt.c: 609: width *= 10;
   735  007E34  C021  F001         	movff	sprintf@width,___wmul@multiplier
   736  007E38  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
   737  007E3C  0E00               	movlw	0
   738  007E3E  6E04               	movwf	___wmul@multiplicand+1,c
   739  007E40  0E0A               	movlw	10
   740  007E42  6E03               	movwf	___wmul@multiplicand,c
   741  007E44  ECD9  F03D         	call	___wmul	;wreg free
   742  007E48  C001  F021         	movff	?___wmul,sprintf@width
   743  007E4C  C002  F022         	movff	?___wmul+1,sprintf@width+1
   744                           
   745                           ;doprnt.c: 610: width += *f++ - '0';
   746  007E50  0ED0               	movlw	208
   747  007E52  6E13               	movwf	??_sprintf& (0+255),c
   748  007E54  0EFF               	movlw	255
   749  007E56  6E14               	movwf	(??_sprintf+1)& (0+255),c
   750  007E58  C00B  FFF6         	movff	sprintf@f,tblptrl
   751  007E5C  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   752  007E60  0008               	tblrd		*
   753  007E62  50F5               	movf	tablat,w,c
   754  007E64  6E15               	movwf	(??_sprintf+2)& (0+255),c
   755  007E66  6A16               	clrf	(??_sprintf+3)& (0+255),c
   756  007E68  5013               	movf	??_sprintf,w,c
   757  007E6A  2615               	addwf	??_sprintf+2,f,c
   758  007E6C  5014               	movf	??_sprintf+1,w,c
   759  007E6E  2216               	addwfc	??_sprintf+3,f,c
   760  007E70  5015               	movf	??_sprintf+2,w,c
   761  007E72  2621               	addwf	sprintf@width,f,c
   762  007E74  5016               	movf	??_sprintf+3,w,c
   763  007E76  2222               	addwfc	sprintf@width+1,f,c
   764  007E78  4A0B               	infsnz	sprintf@f,f,c
   765  007E7A  2A0C               	incf	sprintf@f+1,f,c
   766                           
   767                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
   768  007E7C  C00B  FFF6         	movff	sprintf@f,tblptrl
   769  007E80  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   770  007E84  0008               	tblrd		*
   771  007E86  50F5               	movf	tablat,w,c
   772  007E88  EC7C  F03D         	call	_isdigit
   773  007E8C  B0D8               	btfsc	status,0,c
   774  007E8E  D7D2               	goto	l1108
   775  007E90                     l1118:
   776  007E90  C00B  FFF6         	movff	sprintf@f,tblptrl
   777  007E94  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   778  007E98  4A0B               	infsnz	sprintf@f,f,c
   779  007E9A  2A0C               	incf	sprintf@f+1,f,c
   780  007E9C  0008               	tblrd		*
   781  007E9E  CFF5 F023          	movff	tablat,sprintf@c
   782  007EA2  5023               	movf	sprintf@c& (0+255),w,c
   783                           
   784                           ; Switch size 1, requested type "space"
   785                           ; Number of cases is 2, Range of values is 0 to 120
   786                           ; switch strategies available:
   787                           ; Name         Instructions Cycles
   788                           ; simple_byte            7     4 (average)
   789                           ;	Chosen strategy is simple_byte
   790  007EA4  0A00               	xorlw	0	; case 0
   791  007EA6  B4D8               	btfsc	status,2,c
   792  007EA8  D0A4               	goto	l1174
   793  007EAA  0A78               	xorlw	120	; case 120
   794  007EAC  A4D8               	btfss	status,2,c
   795  007EAE  D096               	goto	l1172
   796                           
   797                           ;doprnt.c: 1282: {
   798                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   799  007EB0  C017  FFD9         	movff	sprintf@ap,fsr2l
   800  007EB4  C018  FFDA         	movff	sprintf@ap+1,fsr2h
   801  007EB8  CFDE F01B          	movff	postinc2,sprintf@_val
   802  007EBC  CFDD F01C          	movff	postdec2,sprintf@_val+1
   803  007EC0  0E02               	movlw	2
   804  007EC2  2617               	addwf	sprintf@ap,f,c
   805  007EC4  0E00               	movlw	0
   806  007EC6  2218               	addwfc	sprintf@ap+1,f,c
   807                           
   808                           ;doprnt.c: 1296: }
   809                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   810  007EC8  6E13               	movwf	??_sprintf& (0+255),c
   811  007ECA  0E01               	movlw	1
   812  007ECC  6E23               	movwf	sprintf@c,c
   813  007ECE  5013               	movf	??_sprintf& (0+255),w,c
   814  007ED0  5023               	movf	sprintf@c,w,c
   815  007ED2  0A04               	xorlw	4
   816  007ED4  B4D8               	btfsc	status,2,c
   817  007ED6  D016               	goto	l1138
   818                           
   819                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
   820  007ED8  5023               	movf	sprintf@c,w,c
   821  007EDA  0D02               	mullw	2
   822  007EDC  0E05               	movlw	low _hexpowers
   823  007EDE  24F3               	addwf	prodl,w,c
   824  007EE0  6EF6               	movwf	tblptrl,c
   825  007EE2  0E08               	movlw	high _hexpowers
   826  007EE4  20F4               	addwfc	prodh,w,c
   827  007EE6  6EF7               	movwf	tblptrh,c
   828  007EE8  0009               	tblrd		*+
   829  007EEA  CFF5 F013          	movff	tablat,??_sprintf
   830  007EEE  0009               	tblrd		*+
   831  007EF0  CFF5 F014          	movff	tablat,??_sprintf+1
   832  007EF4  5013               	movf	??_sprintf,w,c
   833  007EF6  5C1B               	subwf	sprintf@_val,w,c
   834  007EF8  5014               	movf	??_sprintf+1,w,c
   835  007EFA  581C               	subwfb	sprintf@_val+1,w,c
   836  007EFC  A0D8               	btfss	status,0,c
   837  007EFE  D002               	goto	l1138
   838                           
   839                           ;doprnt.c: 1327: break;
   840  007F00  2A23               	incf	sprintf@c,f,c
   841  007F02  D7E6               	goto	L3
   842  007F04                     l1138:
   843                           
   844                           ;doprnt.c: 1390: if(width > c)
   845  007F04  0E80               	movlw	128
   846  007F06  BE23               	btfsc	sprintf@c,7,c
   847  007F08  0E7F               	movlw	127
   848  007F0A  6E13               	movwf	??_sprintf& (0+255),c
   849  007F0C  5021               	movf	sprintf@width,w,c
   850  007F0E  5C23               	subwf	sprintf@c,w,c
   851  007F10  5022               	movf	sprintf@width+1,w,c
   852  007F12  0A80               	xorlw	128
   853  007F14  5813               	subwfb	??_sprintf& (0+255),w,c
   854  007F16  B0D8               	btfsc	status,0,c
   855  007F18  D007               	goto	l1142
   856                           
   857                           ;doprnt.c: 1391: width -= c;
   858  007F1A  5023               	movf	sprintf@c,w,c
   859  007F1C  5E21               	subwf	sprintf@width,f,c
   860  007F1E  0E00               	movlw	0
   861  007F20  BE23               	btfsc	sprintf@c,7,c
   862  007F22  0EFF               	movlw	255
   863  007F24  5A22               	subwfb	sprintf@width+1,f,c
   864  007F26  D004               	goto	l1144
   865  007F28                     l1142:
   866                           
   867                           ;doprnt.c: 1392: else
   868                           ;doprnt.c: 1393: width = 0;
   869  007F28  0E00               	movlw	0
   870  007F2A  6E22               	movwf	sprintf@width+1,c
   871  007F2C  0E00               	movlw	0
   872  007F2E  6E21               	movwf	sprintf@width,c
   873  007F30                     l1144:
   874                           
   875                           ;doprnt.c: 1396: if(flag & 0x04) {
   876  007F30  A41A               	btfss	sprintf@flag,2,c
   877  007F32  D010               	goto	l1154
   878  007F34                     
   879                           ;doprnt.c: 1424: if(width)
   880  007F34  5022               	movf	sprintf@width+1,w,c
   881  007F36  1021               	iorwf	sprintf@width,w,c
   882  007F38  B4D8               	btfsc	status,2,c
   883  007F3A  D01F               	goto	l153
   884                           
   885                           ;doprnt.c: 1426: ((*sp++ = ('0')));
   886                           
   887                           ;doprnt.c: 1425: do
   888  007F3C  C009  FFD9         	movff	sprintf@sp,fsr2l
   889  007F40  C00A  FFDA         	movff	sprintf@sp+1,fsr2h
   890  007F44  0E30               	movlw	48
   891  007F46  6EDF               	movwf	indf2,c
   892  007F48  4A09               	infsnz	sprintf@sp,f,c
   893  007F4A  2A0A               	incf	sprintf@sp+1,f,c
   894                           
   895                           ;doprnt.c: 1427: while(--width);
   896  007F4C  0621               	decf	sprintf@width,f,c
   897  007F4E  A0D8               	btfss	status,0,c
   898  007F50  0622               	decf	sprintf@width+1,f,c
   899  007F52  D7F0               	goto	L4
   900  007F54                     l1154:
   901                           
   902                           ;doprnt.c: 1431: {
   903                           ;doprnt.c: 1433: if(width
   904                           ;doprnt.c: 1437: )
   905  007F54  5022               	movf	sprintf@width+1,w,c
   906  007F56  1021               	iorwf	sprintf@width,w,c
   907  007F58  B4D8               	btfsc	status,2,c
   908  007F5A  D00F               	goto	l153
   909  007F5C                     l1156:
   910                           
   911                           ;doprnt.c: 1439: ((*sp++ = (' ')));
   912  007F5C  C009  FFD9         	movff	sprintf@sp,fsr2l
   913  007F60  C00A  FFDA         	movff	sprintf@sp+1,fsr2h
   914  007F64  0E20               	movlw	32
   915  007F66  6EDF               	movwf	indf2,c
   916  007F68  4A09               	infsnz	sprintf@sp,f,c
   917  007F6A  2A0A               	incf	sprintf@sp+1,f,c
   918                           
   919                           ;doprnt.c: 1440: while(--width);
   920  007F6C  0621               	decf	sprintf@width,f,c
   921  007F6E  A0D8               	btfss	status,0,c
   922  007F70  0622               	decf	sprintf@width+1,f,c
   923  007F72  5022               	movf	(sprintf@width+1)& (0+255),w,c
   924  007F74  1021               	iorwf	sprintf@width& (0+255),w,c
   925  007F76  A4D8               	btfss	status,2,c
   926  007F78  D7F1               	goto	l1156
   927  007F7A                     l153:
   928                           
   929                           ;doprnt.c: 1478: }
   930                           ;doprnt.c: 1481: prec = c;
   931  007F7A  C023  F020         	movff	sprintf@c,sprintf@prec
   932                           
   933                           ;doprnt.c: 1483: while(prec--) {
   934  007F7E  D02A               	goto	l1170
   935  007F80                     l1162:
   936                           
   937                           ;doprnt.c: 1487: {
   938                           ;doprnt.c: 1508: {
   939                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
   940  007F80  C01B  F001         	movff	sprintf@_val,___lwdiv@dividend
   941  007F84  C01C  F002         	movff	sprintf@_val+1,___lwdiv@dividend+1
   942  007F88  5020               	movf	sprintf@prec,w,c
   943  007F8A  0D02               	mullw	2
   944  007F8C  0E05               	movlw	low _hexpowers
   945  007F8E  24F3               	addwf	prodl,w,c
   946  007F90  6EF6               	movwf	tblptrl,c
   947  007F92  0E08               	movlw	high _hexpowers
   948  007F94  20F4               	addwfc	prodh,w,c
   949  007F96  6EF7               	movwf	tblptrh,c
   950  007F98  0009               	tblrd		*+
   951  007F9A  CFF5 F003          	movff	tablat,___lwdiv@divisor
   952  007F9E  000A               	tblrd		*-
   953  007FA0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   954  007FA4  EC15  F03E         	call	___lwdiv	;wreg free
   955  007FA8  5001               	movf	?___lwdiv,w,c
   956  007FAA  0B0F               	andlw	15
   957  007FAC  6E19               	movwf	sprintf@idx,c
   958                           
   959                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
   960  007FAE  5019               	movf	sprintf@idx,w,c
   961  007FB0  0D01               	mullw	1
   962  007FB2  0E35               	movlw	low STR_3
   963  007FB4  24F3               	addwf	prodl,w,c
   964  007FB6  6EF6               	movwf	tblptrl,c
   965  007FB8  0E08               	movlw	high STR_3
   966  007FBA  20F4               	addwfc	prodh,w,c
   967  007FBC  6EF7               	movwf	tblptrh,c
   968  007FBE  0008               	tblrd		*
   969  007FC0  CFF5 F023          	movff	tablat,sprintf@c
   970                           
   971                           ;doprnt.c: 1517: }
   972                           ;doprnt.c: 1532: }
   973                           ;doprnt.c: 1533: ((*sp++ = (c)));
   974  007FC4  C009  FFD9         	movff	sprintf@sp,fsr2l
   975  007FC8  C00A  FFDA         	movff	sprintf@sp+1,fsr2h
   976  007FCC  C023  FFDF         	movff	sprintf@c,indf2
   977  007FD0  4A09               	infsnz	sprintf@sp,f,c
   978  007FD2  2A0A               	incf	sprintf@sp+1,f,c
   979  007FD4                     l1170:
   980  007FD4  0620               	decf	sprintf@prec,f,c
   981  007FD6  2820               	incf	sprintf@prec& (0+255),w,c
   982  007FD8  A4D8               	btfss	status,2,c
   983  007FDA  D7D2               	goto	l1162
   984  007FDC                     l1172:
   985  007FDC  C00B  FFF6         	movff	sprintf@f,tblptrl
   986  007FE0  C00C  FFF7         	movff	sprintf@f+1,tblptrh
   987  007FE4  4A0B               	infsnz	sprintf@f,f,c
   988  007FE6  2A0C               	incf	sprintf@f+1,f,c
   989  007FE8  0008               	tblrd		*
   990  007FEA  CFF5 F023          	movff	tablat,sprintf@c
   991  007FEE  6623               	tstfsz	sprintf@c& (0+255),c
   992  007FF0  D6F1               	goto	l1088
   993  007FF2                     l1174:
   994                           
   995                           ;doprnt.c: 1547: *sp = 0;
   996  007FF2  C009  FFD9         	movff	sprintf@sp,fsr2l
   997  007FF6  C00A  FFDA         	movff	sprintf@sp+1,fsr2h
   998  007FFA  0E00               	movlw	0
   999  007FFC  6EDF               	movwf	indf2,c
  1000                           
  1001                           ;doprnt.c: 1549: return 0;
  1002                           ;	Return value of _sprintf is never used
  1003  007FFE  0012               	return	
  1004  008000                     __end_of_sprintf:
  1005                           	opt stack 0
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           prodh	equ	0xFF4
  1011                           prodl	equ	0xFF3
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           indf2	equ	0xFDF
  1015                           postinc2	equ	0xFDE
  1016                           postdec2	equ	0xFDD
  1017                           fsr2h	equ	0xFDA
  1018                           fsr2l	equ	0xFD9
  1019                           status	equ	0xFD8
  1020                           
  1021 ;; *************** function _isdigit *****************
  1022 ;; Defined at:
  1023 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\isdigit.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  c               1    wreg     unsigned char 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  c               1    2[COMRAM] unsigned char 
  1028 ;; Return value:  Size  Location     Type
  1029 ;;		None               void
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0
  1038 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1039 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1040 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1041 ;;Total ram usage:        3 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_sprintf
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text2
  1051  007AF8                     __ptext2:
  1052                           	opt stack 0
  1053  007AF8                     _isdigit:
  1054                           	opt stack 29
  1055                           
  1056                           ;incstack = 0
  1057                           ;isdigit@c stored from wreg
  1058  007AF8  CFE8 F003          	movff	wreg,isdigit@c
  1059  007AFC  6E01               	movwf	??_isdigit& (0+255),c
  1060  007AFE  0E00               	movlw	0
  1061  007B00  6E02               	movwf	_isdigit$861,c
  1062  007B02  5001               	movf	??_isdigit& (0+255),w,c
  1063  007B04  0E3A               	movlw	58
  1064  007B06  5C03               	subwf	isdigit@c,w,c
  1065  007B08  B0D8               	btfsc	status,0,c
  1066  007B0A  D007               	goto	l1082
  1067  007B0C  0E2F               	movlw	47
  1068  007B0E  6403               	cpfsgt	isdigit@c,c
  1069  007B10  D004               	goto	l1082
  1070  007B12  6E01               	movwf	??_isdigit& (0+255),c
  1071  007B14  0E01               	movlw	1
  1072  007B16  6E02               	movwf	_isdigit$861,c
  1073  007B18  5001               	movf	??_isdigit& (0+255),w,c
  1074  007B1A                     l1082:
  1075  007B1A  C002  F001         	movff	_isdigit$861,??_isdigit
  1076  007B1E  3001               	rrcf	??_isdigit,w,c
  1077  007B20  0012               	return	
  1078  007B22                     __end_of_isdigit:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           prodh	equ	0xFF4
  1085                           prodl	equ	0xFF3
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           indf2	equ	0xFDF
  1089                           postinc2	equ	0xFDE
  1090                           postdec2	equ	0xFDD
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function ___wmul *****************
  1096 ;; Defined at:
  1097 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\wmul.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  multiplier      2    0[COMRAM] unsigned int 
  1100 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  product         2    4[COMRAM] unsigned int 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  2    0[COMRAM] unsigned int 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, prodl, prodh
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         4       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1115 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        6 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; This function calls:
  1119 ;;		Nothing
  1120 ;; This function is called by:
  1121 ;;		_sprintf
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text3
  1126  007BB2                     __ptext3:
  1127                           	opt stack 0
  1128  007BB2                     ___wmul:
  1129                           	opt stack 29
  1130                           
  1131                           ;incstack = 0
  1132  007BB2  5001               	movf	___wmul@multiplier,w,c
  1133  007BB4  0203               	mulwf	___wmul@multiplicand,c
  1134  007BB6  CFF3 F005          	movff	prodl,___wmul@product
  1135  007BBA  CFF4 F006          	movff	prodh,___wmul@product+1
  1136  007BBE  5001               	movf	___wmul@multiplier,w,c
  1137  007BC0  0204               	mulwf	___wmul@multiplicand+1,c
  1138  007BC2  CFF3 FFF4          	movff	prodl,prodh
  1139  007BC6  6AF3               	clrf	prodl,c
  1140  007BC8  50F3               	movf	prodl,w,c
  1141  007BCA  2605               	addwf	___wmul@product,f,c
  1142  007BCC  50F4               	movf	prodh,w,c
  1143  007BCE  2206               	addwfc	___wmul@product+1,f,c
  1144  007BD0  5002               	movf	___wmul@multiplier+1,w,c
  1145  007BD2  0203               	mulwf	___wmul@multiplicand,c
  1146  007BD4  CFF3 FFF4          	movff	prodl,prodh
  1147  007BD8  6AF3               	clrf	prodl,c
  1148  007BDA  50F3               	movf	prodl,w,c
  1149  007BDC  2605               	addwf	___wmul@product,f,c
  1150  007BDE  50F4               	movf	prodh,w,c
  1151  007BE0  2206               	addwfc	___wmul@product+1,f,c
  1152  007BE2  C005  F001         	movff	___wmul@product,?___wmul
  1153  007BE6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1154  007BEA  0012               	return	
  1155  007BEC                     __end_of___wmul:
  1156                           	opt stack 0
  1157                           tblptru	equ	0xFF8
  1158                           tblptrh	equ	0xFF7
  1159                           tblptrl	equ	0xFF6
  1160                           tablat	equ	0xFF5
  1161                           prodh	equ	0xFF4
  1162                           prodl	equ	0xFF3
  1163                           postinc0	equ	0xFEE
  1164                           wreg	equ	0xFE8
  1165                           indf2	equ	0xFDF
  1166                           postinc2	equ	0xFDE
  1167                           postdec2	equ	0xFDD
  1168                           fsr2h	equ	0xFDA
  1169                           fsr2l	equ	0xFD9
  1170                           status	equ	0xFD8
  1171                           
  1172 ;; *************** function ___lwdiv *****************
  1173 ;; Defined at:
  1174 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.30\sources\common\lwdiv.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  dividend        2    0[COMRAM] unsigned int 
  1177 ;;  divisor         2    2[COMRAM] unsigned int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  quotient        2    5[COMRAM] unsigned int 
  1180 ;;  counter         1    7[COMRAM] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  2    0[COMRAM] unsigned int 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:         4       0       0       0       0       0       0       0       0
  1191 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1192 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1193 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1194 ;;Total ram usage:        8 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_sprintf
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text4
  1204  007C2A                     __ptext4:
  1205                           	opt stack 0
  1206  007C2A                     ___lwdiv:
  1207                           	opt stack 29
  1208                           
  1209                           ;incstack = 0
  1210  007C2A  0E00               	movlw	0
  1211  007C2C  6E07               	movwf	___lwdiv@quotient+1,c
  1212  007C2E  0E00               	movlw	0
  1213  007C30  6E06               	movwf	___lwdiv@quotient,c
  1214  007C32  5004               	movf	___lwdiv@divisor+1,w,c
  1215  007C34  1003               	iorwf	___lwdiv@divisor,w,c
  1216  007C36  B4D8               	btfsc	status,2,c
  1217  007C38  D01E               	goto	l672
  1218  007C3A  6E05               	movwf	??___lwdiv& (0+255),c
  1219  007C3C  0E01               	movlw	1
  1220  007C3E  6E08               	movwf	___lwdiv@counter,c
  1221  007C40  5005               	movf	??___lwdiv& (0+255),w,c
  1222  007C42  D004               	goto	l840
  1223  007C44                     l838:
  1224  007C44  90D8               	bcf	status,0,c
  1225  007C46  3603               	rlcf	___lwdiv@divisor,f,c
  1226  007C48  3604               	rlcf	___lwdiv@divisor+1,f,c
  1227  007C4A  2A08               	incf	___lwdiv@counter,f,c
  1228  007C4C                     l840:
  1229  007C4C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1230  007C4E  D7FA               	goto	l838
  1231  007C50                     l842:
  1232  007C50  90D8               	bcf	status,0,c
  1233  007C52  3606               	rlcf	___lwdiv@quotient,f,c
  1234  007C54  3607               	rlcf	___lwdiv@quotient+1,f,c
  1235  007C56  5003               	movf	___lwdiv@divisor,w,c
  1236  007C58  5C01               	subwf	___lwdiv@dividend,w,c
  1237  007C5A  5004               	movf	___lwdiv@divisor+1,w,c
  1238  007C5C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1239  007C5E  A0D8               	btfss	status,0,c
  1240  007C60  D005               	goto	l850
  1241  007C62  5003               	movf	___lwdiv@divisor,w,c
  1242  007C64  5E01               	subwf	___lwdiv@dividend,f,c
  1243  007C66  5004               	movf	___lwdiv@divisor+1,w,c
  1244  007C68  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1245  007C6A  8006               	bsf	___lwdiv@quotient,0,c
  1246  007C6C                     l850:
  1247  007C6C  90D8               	bcf	status,0,c
  1248  007C6E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1249  007C70  3203               	rrcf	___lwdiv@divisor,f,c
  1250  007C72  2E08               	decfsz	___lwdiv@counter,f,c
  1251  007C74  D7ED               	goto	l842
  1252  007C76                     l672:
  1253  007C76  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  1254  007C7A  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1255  007C7E  0012               	return	
  1256  007C80                     __end_of___lwdiv:
  1257                           	opt stack 0
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           prodh	equ	0xFF4
  1263                           prodl	equ	0xFF3
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           indf2	equ	0xFDF
  1267                           postinc2	equ	0xFDE
  1268                           postdec2	equ	0xFDD
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function _set_reg *****************
  1274 ;; Defined at:
  1275 ;;		line 71 in file "mainclock.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  address         1    wreg     unsigned char 
  1278 ;;  x               1    2[COMRAM] unsigned char 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  address         1    3[COMRAM] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;		None               void
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1290 ;;      Params:         1       0       0       0       0       0       0       0       0
  1291 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1293 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1294 ;;Total ram usage:        2 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		_i2c_start
  1299 ;;		_i2c_stop
  1300 ;;		_i2c_write
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text5
  1307  007B4E                     __ptext5:
  1308                           	opt stack 0
  1309  007B4E                     _set_reg:
  1310                           	opt stack 29
  1311                           
  1312                           ;incstack = 0
  1313                           ;set_reg@address stored from wreg
  1314  007B4E  CFE8 F004          	movff	wreg,set_reg@address
  1315                           
  1316                           ;mainclock.c: 73: i2c_start();
  1317  007B52  EC24  F03D         	call	_i2c_start	;wreg free
  1318                           
  1319                           ;mainclock.c: 74: i2c_write(0b11010000);
  1320  007B56  0E00               	movlw	0
  1321  007B58  6E02               	movwf	i2c_write@data+1,c
  1322  007B5A  0ED0               	movlw	208
  1323  007B5C  6E01               	movwf	i2c_write@data,c
  1324  007B5E  EC2E  F03D         	call	_i2c_write	;wreg free
  1325                           
  1326                           ;mainclock.c: 75: i2c_write(address);
  1327  007B62  C004  F001         	movff	set_reg@address,i2c_write@data
  1328  007B66  6A02               	clrf	i2c_write@data+1,c
  1329  007B68  EC2E  F03D         	call	_i2c_write	;wreg free
  1330                           
  1331                           ;mainclock.c: 76: i2c_write(x);
  1332  007B6C  C003  F001         	movff	set_reg@x,i2c_write@data
  1333  007B70  6A02               	clrf	i2c_write@data+1,c
  1334  007B72  EC2E  F03D         	call	_i2c_write	;wreg free
  1335                           
  1336                           ;mainclock.c: 77: i2c_stop();
  1337  007B76  EC29  F03D         	call	_i2c_stop	;wreg free
  1338                           
  1339                           ;mainclock.c: 78: return;
  1340  007B7A  0012               	return	
  1341  007B7C                     __end_of_set_reg:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           indf2	equ	0xFDF
  1352                           postinc2	equ	0xFDE
  1353                           postdec2	equ	0xFDD
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _i2c_init *****************
  1359 ;; Defined at:
  1360 ;;		line 4 in file "I2C.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;		None               void
  1367 ;; Registers used:
  1368 ;;		wreg, status,2
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1377 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text6
  1388  007A68                     __ptext6:
  1389                           	opt stack 0
  1390  007A68                     _i2c_init:
  1391                           	opt stack 30
  1392                           
  1393                           ;I2C.c: 6: TRISBbits.TRISB0 = 1;
  1394                           
  1395                           ;incstack = 0
  1396  007A68  8093               	bsf	3987,0,c	;volatile
  1397                           
  1398                           ;I2C.c: 7: TRISBbits.TRISB1 = 1;
  1399  007A6A  8293               	bsf	3987,1,c	;volatile
  1400                           
  1401                           ;I2C.c: 9: SSPADD = 119;
  1402  007A6C  0E77               	movlw	119
  1403  007A6E  6EC8               	movwf	4040,c	;volatile
  1404                           
  1405                           ;I2C.c: 10: SSPCON1= 0b00001000;
  1406  007A70  0E08               	movlw	8
  1407  007A72  6EC6               	movwf	4038,c	;volatile
  1408                           
  1409                           ;I2C.c: 11: SSPSTATbits.SMP = 1;
  1410  007A74  8EC7               	bsf	4039,7,c	;volatile
  1411                           
  1412                           ;I2C.c: 12: SSPCON1bits.SSPEN = 1;
  1413  007A76  8AC6               	bsf	4038,5,c	;volatile
  1414  007A78  0012               	return	
  1415  007A7A                     __end_of_i2c_init:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           prodh	equ	0xFF4
  1422                           prodl	equ	0xFF3
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           indf2	equ	0xFDF
  1426                           postinc2	equ	0xFDE
  1427                           postdec2	equ	0xFDD
  1428                           fsr2h	equ	0xFDA
  1429                           fsr2l	equ	0xFD9
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _get_reg *****************
  1433 ;; Defined at:
  1434 ;;		line 57 in file "mainclock.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  address         1    wreg     unsigned char 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  address         1    2[COMRAM] unsigned char 
  1439 ;;  data            1    3[COMRAM] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      unsigned char 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1449 ;;      Params:         0       0       0       0       0       0       0       0       0
  1450 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1452 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1453 ;;Total ram usage:        2 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    1
  1456 ;; This function calls:
  1457 ;;		_i2c_read
  1458 ;;		_i2c_restart
  1459 ;;		_i2c_start
  1460 ;;		_i2c_stop
  1461 ;;		_i2c_write
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text7
  1468  007BEC                     __ptext7:
  1469                           	opt stack 0
  1470  007BEC                     _get_reg:
  1471                           	opt stack 29
  1472                           
  1473                           ;incstack = 0
  1474                           ;get_reg@address stored from wreg
  1475  007BEC  CFE8 F003          	movff	wreg,get_reg@address
  1476                           
  1477                           ;mainclock.c: 59: unsigned char data;
  1478                           ;mainclock.c: 60: i2c_start();
  1479  007BF0  EC24  F03D         	call	_i2c_start	;wreg free
  1480                           
  1481                           ;mainclock.c: 61: i2c_write(0b11010000);
  1482  007BF4  0E00               	movlw	0
  1483  007BF6  6E02               	movwf	i2c_write@data+1,c
  1484  007BF8  0ED0               	movlw	208
  1485  007BFA  6E01               	movwf	i2c_write@data,c
  1486  007BFC  EC2E  F03D         	call	_i2c_write	;wreg free
  1487                           
  1488                           ;mainclock.c: 62: i2c_write(address);
  1489  007C00  C003  F001         	movff	get_reg@address,i2c_write@data
  1490  007C04  6A02               	clrf	i2c_write@data+1,c
  1491  007C06  EC2E  F03D         	call	_i2c_write	;wreg free
  1492                           
  1493                           ;mainclock.c: 63: i2c_restart();
  1494  007C0A  EC1F  F03D         	call	_i2c_restart	;wreg free
  1495                           
  1496                           ;mainclock.c: 64: i2c_write(0b11010001);
  1497  007C0E  0E00               	movlw	0
  1498  007C10  6E02               	movwf	i2c_write@data+1,c
  1499  007C12  0ED1               	movlw	209
  1500  007C14  6E01               	movwf	i2c_write@data,c
  1501  007C16  EC2E  F03D         	call	_i2c_write	;wreg free
  1502                           
  1503                           ;mainclock.c: 65: SSPCON2bits.ACKDT=1;
  1504  007C1A  8AC5               	bsf	4037,5,c	;volatile
  1505                           
  1506                           ;mainclock.c: 66: data=i2c_read();
  1507  007C1C  EC48  F03D         	call	_i2c_read	;wreg free
  1508  007C20  6E04               	movwf	get_reg@data,c
  1509                           
  1510                           ;mainclock.c: 67: i2c_stop();
  1511  007C22  EC29  F03D         	call	_i2c_stop	;wreg free
  1512                           
  1513                           ;mainclock.c: 68: return (data);
  1514  007C26  5004               	movf	get_reg@data,w,c
  1515  007C28  0012               	return	
  1516  007C2A                     __end_of_get_reg:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           prodh	equ	0xFF4
  1523                           prodl	equ	0xFF3
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           indf2	equ	0xFDF
  1527                           postinc2	equ	0xFDE
  1528                           postdec2	equ	0xFDD
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _i2c_write *****************
  1534 ;; Defined at:
  1535 ;;		line 29 in file "I2C.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  data            2    0[COMRAM] unsigned int 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		None
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1549 ;;      Params:         2       0       0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1552 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1553 ;;Total ram usage:        2 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_get_reg
  1559 ;;		_set_reg
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text8
  1564  007A5C                     __ptext8:
  1565                           	opt stack 0
  1566  007A5C                     _i2c_write:
  1567                           	opt stack 29
  1568                           
  1569                           ;I2C.c: 31: PIR1bits.SSPIF=0;
  1570                           
  1571                           ;incstack = 0
  1572  007A5C  969E               	bcf	3998,3,c	;volatile
  1573                           
  1574                           ;I2C.c: 32: SSPBUF=data;
  1575  007A5E  C001  FFC9         	movff	i2c_write@data,4041	;volatile
  1576  007A62                     l34:
  1577  007A62  B69E               	btfsc	3998,3,c	;volatile
  1578  007A64  0012               	return	
  1579  007A66  D7FD               	goto	l34
  1580  007A68                     __end_of_i2c_write:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           indf2	equ	0xFDF
  1591                           postinc2	equ	0xFDE
  1592                           postdec2	equ	0xFDD
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597 ;; *************** function _i2c_stop *****************
  1598 ;; Defined at:
  1599 ;;		line 36 in file "I2C.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;		None               void
  1606 ;; Registers used:
  1607 ;;		None
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         0       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_get_reg
  1623 ;;		_set_reg
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text9
  1628  007A52                     __ptext9:
  1629                           	opt stack 0
  1630  007A52                     _i2c_stop:
  1631                           	opt stack 29
  1632                           
  1633                           ;I2C.c: 38: PIR1bits.SSPIF=0;
  1634                           
  1635                           ;incstack = 0
  1636  007A52  969E               	bcf	3998,3,c	;volatile
  1637                           
  1638                           ;I2C.c: 39: SSPCON2bits.PEN=1;
  1639  007A54  84C5               	bsf	4037,2,c	;volatile
  1640  007A56                     l40:
  1641  007A56  B69E               	btfsc	3998,3,c	;volatile
  1642  007A58  0012               	return	
  1643  007A5A  D7FD               	goto	l40
  1644  007A5C                     __end_of_i2c_stop:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           prodh	equ	0xFF4
  1651                           prodl	equ	0xFF3
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           indf2	equ	0xFDF
  1655                           postinc2	equ	0xFDE
  1656                           postdec2	equ	0xFDD
  1657                           fsr2h	equ	0xFDA
  1658                           fsr2l	equ	0xFD9
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _i2c_start *****************
  1662 ;; Defined at:
  1663 ;;		line 15 in file "I2C.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;		None               void
  1670 ;; Registers used:
  1671 ;;		None
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_get_reg
  1687 ;;		_set_reg
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text10
  1692  007A48                     __ptext10:
  1693                           	opt stack 0
  1694  007A48                     _i2c_start:
  1695                           	opt stack 29
  1696                           
  1697                           ;I2C.c: 17: PIR1bits.SSPIF=0;
  1698                           
  1699                           ;incstack = 0
  1700  007A48  969E               	bcf	3998,3,c	;volatile
  1701                           
  1702                           ;I2C.c: 18: SSPCON2bits.SEN=1;
  1703  007A4A  80C5               	bsf	4037,0,c	;volatile
  1704  007A4C                     l22:
  1705  007A4C  B69E               	btfsc	3998,3,c	;volatile
  1706  007A4E  0012               	return	
  1707  007A50  D7FD               	goto	l22
  1708  007A52                     __end_of_i2c_start:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           indf2	equ	0xFDF
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _i2c_restart *****************
  1726 ;; Defined at:
  1727 ;;		line 22 in file "I2C.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;		None               void
  1734 ;; Registers used:
  1735 ;;		None
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1741 ;;      Params:         0       0       0       0       0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_get_reg
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text11
  1755  007A3E                     __ptext11:
  1756                           	opt stack 0
  1757  007A3E                     _i2c_restart:
  1758                           	opt stack 29
  1759                           
  1760                           ;I2C.c: 24: PIR1bits.SSPIF=0;
  1761                           
  1762                           ;incstack = 0
  1763  007A3E  969E               	bcf	3998,3,c	;volatile
  1764                           
  1765                           ;I2C.c: 25: SSPCON2bits.RSEN=1;
  1766  007A40  82C5               	bsf	4037,1,c	;volatile
  1767  007A42                     l28:
  1768  007A42  B69E               	btfsc	3998,3,c	;volatile
  1769  007A44  0012               	return	
  1770  007A46  D7FD               	goto	l28
  1771  007A48                     __end_of_i2c_restart:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _i2c_read *****************
  1789 ;; Defined at:
  1790 ;;		line 43 in file "I2C.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  data            1    0[COMRAM] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      unsigned char 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1804 ;;      Params:         0       0       0       0       0       0       0       0       0
  1805 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1807 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1808 ;;Total ram usage:        1 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_get_reg
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text12
  1818  007A90                     __ptext12:
  1819                           	opt stack 0
  1820  007A90                     _i2c_read:
  1821                           	opt stack 29
  1822                           
  1823                           ;I2C.c: 45: unsigned char data;
  1824                           ;I2C.c: 46: PIR1bits.SSPIF=0;
  1825                           
  1826                           ;incstack = 0
  1827  007A90  969E               	bcf	3998,3,c	;volatile
  1828                           
  1829                           ;I2C.c: 47: SSPCON2bits.RCEN=1;
  1830  007A92  86C5               	bsf	4037,3,c	;volatile
  1831  007A94                     l46:
  1832  007A94  A69E               	btfss	3998,3,c	;volatile
  1833  007A96  D7FE               	goto	l46
  1834                           
  1835                           ;I2C.c: 50: data=SSPBUF;
  1836  007A98  CFC9 F001          	movff	4041,i2c_read@data	;volatile
  1837                           
  1838                           ;I2C.c: 51: PIR1bits.SSPIF=0;
  1839  007A9C  969E               	bcf	3998,3,c	;volatile
  1840                           
  1841                           ;I2C.c: 52: SSPCON2bits.ACKEN=1;
  1842  007A9E  88C5               	bsf	4037,4,c	;volatile
  1843  007AA0                     l49:
  1844  007AA0  A69E               	btfss	3998,3,c	;volatile
  1845  007AA2  D7FE               	goto	l49
  1846                           
  1847                           ;I2C.c: 54: return data;
  1848  007AA4  5001               	movf	i2c_read@data,w,c
  1849  007AA6  0012               	return	
  1850  007AA8                     __end_of_i2c_read:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           indf2	equ	0xFDF
  1861                           postinc2	equ	0xFDE
  1862                           postdec2	equ	0xFDD
  1863                           fsr2h	equ	0xFDA
  1864                           fsr2l	equ	0xFD9
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _SendData *****************
  1868 ;; Defined at:
  1869 ;;		line 32 in file "mainclock.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  lcddata         1    wreg     unsigned char 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  lcddata         1    6[COMRAM] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0
  1884 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1886 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1887 ;;Total ram usage:        1 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		_lcd_delay
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text13
  1898  007AD0                     __ptext13:
  1899                           	opt stack 0
  1900  007AD0                     _SendData:
  1901                           	opt stack 29
  1902                           
  1903                           ;incstack = 0
  1904                           ;SendData@lcddata stored from wreg
  1905  007AD0  CFE8 F007          	movff	wreg,SendData@lcddata
  1906                           
  1907                           ;mainclock.c: 34: LATAbits.LA0 = 1;
  1908  007AD4  8089               	bsf	3977,0,c	;volatile
  1909                           
  1910                           ;mainclock.c: 35: LATB = lcddata;
  1911  007AD6  C007  FF8A         	movff	SendData@lcddata,3978	;volatile
  1912                           
  1913                           ;mainclock.c: 36: LATAbits.LA1 = 1;
  1914  007ADA  8289               	bsf	3977,1,c	;volatile
  1915                           
  1916                           ;mainclock.c: 37: lcd_delay(10);
  1917  007ADC  0E00               	movlw	0
  1918  007ADE  6E02               	movwf	lcd_delay@time+1,c
  1919  007AE0  0E0A               	movlw	10
  1920  007AE2  6E01               	movwf	lcd_delay@time,c
  1921  007AE4  ECBE  F03D         	call	_lcd_delay	;wreg free
  1922                           
  1923                           ;mainclock.c: 38: LATAbits.LA1 = 0;
  1924  007AE8  9289               	bcf	3977,1,c	;volatile
  1925                           
  1926                           ;mainclock.c: 39: lcd_delay(10);
  1927  007AEA  0E00               	movlw	0
  1928  007AEC  6E02               	movwf	lcd_delay@time+1,c
  1929  007AEE  0E0A               	movlw	10
  1930  007AF0  6E01               	movwf	lcd_delay@time,c
  1931  007AF2  ECBE  F03D         	call	_lcd_delay	;wreg free
  1932  007AF6  0012               	return	
  1933  007AF8                     __end_of_SendData:
  1934                           	opt stack 0
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           prodh	equ	0xFF4
  1940                           prodl	equ	0xFF3
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           indf2	equ	0xFDF
  1944                           postinc2	equ	0xFDE
  1945                           postdec2	equ	0xFDD
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _InitLCD *****************
  1951 ;; Defined at:
  1952 ;;		line 42 in file "mainclock.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;		None               void
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    2
  1973 ;; This function calls:
  1974 ;;		_SendInstruction
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text14
  1981  007B22                     __ptext14:
  1982                           	opt stack 0
  1983  007B22                     _InitLCD:
  1984                           	opt stack 28
  1985                           
  1986                           ;mainclock.c: 44: ADCON1 = 0x0F;
  1987                           
  1988                           ;incstack = 0
  1989  007B22  0E0F               	movlw	15
  1990  007B24  6EC1               	movwf	4033,c	;volatile
  1991                           
  1992                           ;mainclock.c: 45: TRISB = 0x00;
  1993  007B26  0E00               	movlw	0
  1994  007B28  6E93               	movwf	3987,c	;volatile
  1995                           
  1996                           ;mainclock.c: 46: TRISAbits.RA0 = 0;
  1997  007B2A  9092               	bcf	3986,0,c	;volatile
  1998                           
  1999                           ;mainclock.c: 47: TRISAbits.RA1 = 0;
  2000  007B2C  9292               	bcf	3986,1,c	;volatile
  2001                           
  2002                           ;mainclock.c: 49: SendInstruction(0x38);
  2003  007B2E  0E38               	movlw	56
  2004  007B30  EC54  F03D         	call	_SendInstruction
  2005                           
  2006                           ;mainclock.c: 50: SendInstruction(0x06);
  2007  007B34  0E06               	movlw	6
  2008  007B36  EC54  F03D         	call	_SendInstruction
  2009                           
  2010                           ;mainclock.c: 51: SendInstruction(0x0C);
  2011  007B3A  0E0C               	movlw	12
  2012  007B3C  EC54  F03D         	call	_SendInstruction
  2013                           
  2014                           ;mainclock.c: 52: SendInstruction(0x01);
  2015  007B40  0E01               	movlw	1
  2016  007B42  EC54  F03D         	call	_SendInstruction
  2017                           
  2018                           ;mainclock.c: 53: SendInstruction(0x80);
  2019  007B46  0E80               	movlw	128
  2020  007B48  EC54  F03D         	call	_SendInstruction
  2021  007B4C  0012               	return	
  2022  007B4E                     __end_of_InitLCD:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           prodh	equ	0xFF4
  2029                           prodl	equ	0xFF3
  2030                           postinc0	equ	0xFEE
  2031                           wreg	equ	0xFE8
  2032                           indf2	equ	0xFDF
  2033                           postinc2	equ	0xFDE
  2034                           postdec2	equ	0xFDD
  2035                           fsr2h	equ	0xFDA
  2036                           fsr2l	equ	0xFD9
  2037                           status	equ	0xFD8
  2038                           
  2039 ;; *************** function _SendInstruction *****************
  2040 ;; Defined at:
  2041 ;;		line 22 in file "mainclock.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;  command         1    wreg     unsigned char 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  command         1    6[COMRAM] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;		None               void
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2055 ;;      Params:         0       0       0       0       0       0       0       0       0
  2056 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2058 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2059 ;;Total ram usage:        1 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    1
  2062 ;; This function calls:
  2063 ;;		_lcd_delay
  2064 ;; This function is called by:
  2065 ;;		_InitLCD
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text15
  2071  007AA8                     __ptext15:
  2072                           	opt stack 0
  2073  007AA8                     _SendInstruction:
  2074                           	opt stack 29
  2075                           
  2076                           ;incstack = 0
  2077                           ;SendInstruction@command stored from wreg
  2078  007AA8  CFE8 F007          	movff	wreg,SendInstruction@command
  2079                           
  2080                           ;mainclock.c: 24: LATAbits.LA0 = 0;
  2081  007AAC  9089               	bcf	3977,0,c	;volatile
  2082                           
  2083                           ;mainclock.c: 25: LATB = command;
  2084  007AAE  C007  FF8A         	movff	SendInstruction@command,3978	;volatile
  2085                           
  2086                           ;mainclock.c: 26: LATAbits.LA1 = 1;
  2087  007AB2  8289               	bsf	3977,1,c	;volatile
  2088                           
  2089                           ;mainclock.c: 27: lcd_delay(10);
  2090  007AB4  0E00               	movlw	0
  2091  007AB6  6E02               	movwf	lcd_delay@time+1,c
  2092  007AB8  0E0A               	movlw	10
  2093  007ABA  6E01               	movwf	lcd_delay@time,c
  2094  007ABC  ECBE  F03D         	call	_lcd_delay	;wreg free
  2095                           
  2096                           ;mainclock.c: 28: LATAbits.LA1 = 0;
  2097  007AC0  9289               	bcf	3977,1,c	;volatile
  2098                           
  2099                           ;mainclock.c: 29: lcd_delay(10);
  2100  007AC2  0E00               	movlw	0
  2101  007AC4  6E02               	movwf	lcd_delay@time+1,c
  2102  007AC6  0E0A               	movlw	10
  2103  007AC8  6E01               	movwf	lcd_delay@time,c
  2104  007ACA  ECBE  F03D         	call	_lcd_delay	;wreg free
  2105  007ACE  0012               	return	
  2106  007AD0                     __end_of_SendInstruction:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           indf2	equ	0xFDF
  2117                           postinc2	equ	0xFDE
  2118                           postdec2	equ	0xFDD
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _lcd_delay *****************
  2124 ;; Defined at:
  2125 ;;		line 11 in file "mainclock.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  time            2    0[COMRAM] unsigned int 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  j               2    4[COMRAM] unsigned int 
  2130 ;;  i               2    2[COMRAM] unsigned int 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, status,0
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2140 ;;      Params:         2       0       0       0       0       0       0       0       0
  2141 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2143 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2144 ;;Total ram usage:        6 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_SendInstruction
  2150 ;;		_SendData
  2151 ;;		_main
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text16
  2156  007B7C                     __ptext16:
  2157                           	opt stack 0
  2158  007B7C                     _lcd_delay:
  2159                           	opt stack 30
  2160                           
  2161                           ;mainclock.c: 13: unsigned int i , j ;
  2162                           ;mainclock.c: 15: for(i = 0; i < time; i++)
  2163                           
  2164                           ;incstack = 0
  2165  007B7C  0E00               	movlw	0
  2166  007B7E  6E04               	movwf	lcd_delay@i+1,c
  2167  007B80  0E00               	movlw	0
  2168  007B82  6E03               	movwf	lcd_delay@i,c
  2169  007B84  D00F               	goto	l818
  2170  007B86                     l806:
  2171                           
  2172                           ;mainclock.c: 16: {
  2173                           ;mainclock.c: 17: for(j=0;j<100;j++);
  2174  007B86  0E00               	movlw	0
  2175  007B88  6E06               	movwf	lcd_delay@j+1,c
  2176  007B8A  0E00               	movlw	0
  2177  007B8C  6E05               	movwf	lcd_delay@j,c
  2178  007B8E  0E64               	movlw	100
  2179  007B90  5C05               	subwf	lcd_delay@j,w,c
  2180  007B92  0E00               	movlw	0
  2181  007B94  5806               	subwfb	lcd_delay@j+1,w,c
  2182  007B96  B0D8               	btfsc	status,0,c
  2183  007B98  D003               	goto	l816
  2184  007B9A  4A05               	infsnz	lcd_delay@j,f,c
  2185  007B9C  2A06               	incf	lcd_delay@j+1,f,c
  2186  007B9E  D7F7               	goto	L5
  2187  007BA0                     l816:
  2188  007BA0  4A03               	infsnz	lcd_delay@i,f,c
  2189  007BA2  2A04               	incf	lcd_delay@i+1,f,c
  2190  007BA4                     l818:
  2191  007BA4  5001               	movf	lcd_delay@time,w,c
  2192  007BA6  5C03               	subwf	lcd_delay@i,w,c
  2193  007BA8  5002               	movf	lcd_delay@time+1,w,c
  2194  007BAA  5804               	subwfb	lcd_delay@i+1,w,c
  2195  007BAC  B0D8               	btfsc	status,0,c
  2196  007BAE  0012               	return	
  2197  007BB0  D7EA               	goto	l806
  2198  007BB2                     __end_of_lcd_delay:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           indf2	equ	0xFDF
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           fsr2h	equ	0xFDA
  2212                           fsr2l	equ	0xFD9
  2213                           status	equ	0xFD8
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           indf2	equ	0xFDF
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229                           	psect	rparam
  2230  0000                     tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           prodh	equ	0xFF4
  2235                           prodl	equ	0xFF3
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           indf2	equ	0xFDF
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    8
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     43      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_2(CODE[20]), STR_1(CODE[20]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> str(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S588$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwdiv
    _set_reg->_i2c_write
    _get_reg->_i2c_write
    _SendData->_lcd_delay
    _InitLCD->_SendInstruction
    _SendInstruction->_lcd_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3710
                                             35 COMRAM     8     8      0
                            _InitLCD
                           _SendData
                    _SendInstruction
                            _get_reg
                           _i2c_init
                          _lcd_delay
                            _set_reg
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    17     10    1412
                                              8 COMRAM    27    17     10
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     191
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     191
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _set_reg                                              2     1      1     561
                                              2 COMRAM     2     1      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_reg                                              2     2      0     318
                                              2 COMRAM     2     2      0
                           _i2c_read
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _i2c_write                                            2     0      2     273
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_restart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_read                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SendData                                             1     1      0     290
                                              6 COMRAM     1     1      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0     290
                    _SendInstruction
 ---------------------------------------------------------------------------------
 (1) _SendInstruction                                      1     1      0     290
                                              6 COMRAM     1     1      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (1) _lcd_delay                                            6     4      2     275
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _SendInstruction
       _lcd_delay
   _SendData
     _lcd_delay
   _SendInstruction
     _lcd_delay
   _get_reg
     _i2c_read
     _i2c_restart
     _i2c_start
     _i2c_stop
     _i2c_write
   _i2c_init
   _lcd_delay
   _set_reg
     _i2c_start
     _i2c_stop
     _i2c_write
   _sprintf
     ___lwdiv
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2B      3B       1       62.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B      20        0.0%
DATA                 0      0      3B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Jun 13 16:13:36 2016

             _SSPSTATbits 000FC7                        l22 7A4C                        l40 7A56  
                      l34 7A62                        l28 7A42                        l46 7A94  
                      l49 7AA0       ___wmul@multiplicand 0003                       l108 7CD8  
                     l153 7F7A                       l806 7B86                       l816 7BA0  
                     l840 7C4C                       l672 7C76                       l818 7BA4  
                     l850 7C6C                       l842 7C50                       l838 7C44  
             get_reg@data 0004                       _str 002C                       prod 000FF3  
                     wreg 000FE8             lcd_delay@time 0001                      l1102 7E06  
                    l1200 7D4A                      l1108 7E34                      l1142 7F28  
                    l1118 7E90                      l1144 7F30                      l1216 7D9E  
                    l1082 7B1A                      l1162 7F80                      l1170 7FD4  
                    l1154 7F54                      l1138 7F04                      l1156 7F5C  
                    l1172 7FDC                      l1174 7FF2                      l1094 7DEE  
                    l1088 7DD4                      l1098 7E00                      STR_1 0821  
                    STR_2 080D                      STR_3 0835                      _LATB 000F8A  
                    _main 7C80                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0800             ??_i2c_restart 0001           __end_of_InitLCD 7B4E  
                   ?_main 0001           __end_of___lwdiv 7C80                     _TRISB 000F93  
         __end_of_get_reg 7C2A           __end_of_isdigit 7B22                     main@i 002B  
         __end_of_set_reg 7B7C                     tablat 000FF5                     status 000FD8  
         __end_of_sprintf 8000           __initialization 7A7A              __end_of_main 7DCA  
        __end_of_i2c_init 7A7A          __end_of_i2c_read 7AA8          __end_of_i2c_stop 7A5C  
        __end_of_SendData 7AF8       __end_of_i2c_restart 7A48                    ??_main 0024  
           __activetblptr 000002                    _ADCON1 000FC1              i2c_read@data 0001  
                  _SSPADD 000FC8                    _SSPBUF 000FC9        __size_of_i2c_start 000A  
      __size_of_i2c_write 000C                 ??_InitLCD 0008  __size_of_SendInstruction 0028  
                  ___wmul 7BB2                 ??___lwdiv 0005            get_reg@address 0003  
                  clear_0 7A80                    main@yr 0027                 ??_get_reg 0003  
               ??_isdigit 0001              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ??_set_reg 0004  
               ??_sprintf 0013                __accesstop 0060   __end_of__initialization 7A86  
          __pcstackCOMRAM 0001               _i2c_restart 7A3E         __end_of_i2c_start 7A52  
       __end_of_i2c_write 7A68        __size_of_lcd_delay 0036              sprintf@width 0021  
               ?_i2c_init 0001                 ?_i2c_read 0001                 ?_i2c_stop 0001  
               ?_SendData 0001                   ?___wmul 0001         ??_SendInstruction 0007  
                 _SSPCON1 000FC6                ??_i2c_init 0001                ??_i2c_read 0001  
              ??_i2c_stop 0001                   _InitLCD 7B22                ??_SendData 0007  
                 __Hparam 0000                   __Lparam 0000         __end_of_lcd_delay 7BB2  
         __size_of___wmul 003A                   ___lwdiv 7C2A              __psmallconst 0804  
                 __pcinit 7A7A                   __ramtop 0800                   __ptext0 7C80  
                 __ptext1 7DCA                   __ptext2 7AF8                   __ptext3 7BB2  
                 __ptext4 7C2A                   __ptext5 7B4E                   __ptext6 7A68  
                 __ptext7 7BEC                   __ptext8 7A5C                   __ptext9 7A52  
                 _get_reg 7BEC         __end_of_hexpowers 080D                   _isdigit 7AF8  
                 _set_reg 7B4E                   _sprintf 7DCA                   main@min 0029  
                 main@hrs 002A                   main@sec 0028                   main@mnt 0026  
    end_of_initialization 7A86             __Lmediumconst 0000            set_reg@address 0004  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
           i2c_write@data 0001                 _TRISAbits 000F92                 _TRISBbits 000F93  
              lcd_delay@i 0003                lcd_delay@j 0005              ?_i2c_restart 0001  
          __end_of___wmul 7BEC       start_initialization 7A7A                 _i2c_start 7A48  
               _i2c_write 7A5C           _SendInstruction 7AA8         __size_of_i2c_init 0012  
       __size_of_i2c_read 0018         __size_of_i2c_stop 000A         __size_of_SendData 0028  
                ??___wmul 0005               __pbssCOMRAM 002C                ?_i2c_start 0001  
     __end_of__stringdata 0846                ?_i2c_write 0001               sprintf@_val 001B  
             sprintf@flag 001A               sprintf@prec 0020                  ?_InitLCD 0001  
        ___lwdiv@dividend 0001           SendData@lcddata 0007                  ?___lwdiv 0001  
  SendInstruction@command 0007                 _lcd_delay 7B7C                  ?_get_reg 0001  
             __smallconst 0804                  ?_isdigit 0001                  ?_set_reg 0003  
               _hexpowers 0805   __end_of_SendInstruction 7AD0          ___lwdiv@quotient 0006  
                ?_sprintf 0009            ___wmul@product 0005                  _LATAbits 000F89  
                _PIR1bits 000F9E      __size_of_i2c_restart 000A                ?_lcd_delay 0001  
             __stringdata 080D         ___wmul@multiplier 0001               ??_i2c_start 0001  
             ??_i2c_write 0003                  _i2c_init 7A68                  _i2c_read 7A90  
                _i2c_stop 7A52                  _SendData 7AD0          __size_of_InitLCD 002C  
                __Hrparam 0000                  __Lrparam 0000          __size_of___lwdiv 0056  
             _isdigit$861 0002          __size_of_get_reg 003E                sprintf@idx 0019  
        __size_of_isdigit 002A           ___lwdiv@divisor 0003           ___lwdiv@counter 0008  
                __ptext10 7A48                  __ptext11 7A3E                  __ptext12 7A90  
                __ptext13 7AD0                  __ptext14 7B22                  __ptext15 7AA8  
                __ptext16 7B7C          __size_of_set_reg 002E          ?_SendInstruction 0001  
        __size_of_sprintf 0236             __size_of_main 014A                  main@date 0025  
             ??_lcd_delay 0003                  isdigit@c 0003                 sprintf@ap 0017  
               sprintf@sp 0009                  set_reg@x 0003                  sprintf@c 0023  
                sprintf@f 000B               _SSPCON1bits 000FC6               _SSPCON2bits 000FC5  
